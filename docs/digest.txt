Directory structure:
└── codesprout/
    ├── README.md
    ├── LICENSE
    ├── tarpaulin-report.html
    ├── .pre-commit-config.yaml
    ├── docs/
    │   ├── PRD.md
    │   ├── RELEASING.md
    │   ├── SECURITY.md
    │   └── TASKS.md
    ├── scripts/
    │   ├── README.md
    │   └── sign_releases.py
    ├── src/
    │   ├── bundler.rs
    │   ├── main.rs
    │   └── parser.rs
    ├── tests/
    │   └── integration_tests.rs
    ├── .cursor/
    ├── .github/
    │   ├── CODEOWNERS
    │   ├── copilot-instructions.md
    │   ├── dependabot.yml
    │   └── workflows/
    │       ├── ci.yml
    │       ├── codeql.yml
    │       ├── dependency-review.yml
    │       ├── release.yml
    │       └── scorecards.yml
    └── .roo/

================================================
File: README.md
================================================
# sprout 🌱

![License](https://img.shields.io/github/license/nightconcept/codesprout)
![GitHub Actions Workflow Status](https://img.shields.io/github/actions/workflow/status/nightconcept/codesprout/ci.yml)
[![Coverage Status](https://coveralls.io/repos/github/nightconcept/codesprout/badge.svg?branch=main)](https://coveralls.io/github/nightconcept/codesprout?branch=main)
![GitHub last commit](https://img.shields.io/github/last-commit/nightconcept/codesprout)
[![OpenSSF Scorecard](https://api.scorecard.dev/projects/github.com/nightconcept/codesprout/badge)](https://scorecard.dev/viewer/?uri=github.com/nightconcept/codesprout)

## 🌟 Overview

`codesprout` is a command-line interface that takes a bundle created by [gitingest](https://gitingest.com/) and sprouts it in the target directory.

`codesprout` is written in Rust for fun and learning.

## 🚀 Getting Started

### Prerequisites

*   **Rust:** Ensure you have Rust installed. You can get it from [rust-lang.org](https://www.rust-lang.org/). `codesprout` is built with the latest stable Rust version.

### Building `codesprout`

1.  **Clone the repository (if you haven't already):**
    ```bash
    git clone <repository-url>
    cd codesprout
    ```
2.  **Build for debugging:**
    ```bash
    cargo build
    ```
    The executable will be located at `target/debug/sprout`.

3.  **Build for release (optimized):**
    ```bash
    cargo build --release
    ```
    The executable will be located at `target/release/sprout`.

## 🛠️ Usage

The `sprout` CLI tool takes a bundle file as input and creates the files and directories in a specified output location.

### Command Syntax:

```bash
sprout [BUNDLE_FILE_PATH] [OUTPUT_DIRECTORY_PATH]
```

Or using flags:

```bash
sprout --input <BUNDLE_FILE_PATH> --output <OUTPUT_DIRECTORY_PATH>
```

### Arguments & Options:

*   `BUNDLE_FILE_PATH`: (Positional or via `-i`/`--input`) Path to the bundle file. This is **required**.
*   `OUTPUT_DIRECTORY_PATH`: (Positional or via `-o`/`--output`) Path to the directory where files will be sprouted.
    *   Defaults to the current working directory if not specified.
*   `-f`, `--force`: (Optional) If specified, `sprout` will overwrite any existing files in the output directory that conflict with files from the bundle. Without this flag, `sprout` will abort if any collisions are detected.

target/tarpaulin

## 🔮 Future Ideas

While the current prototype is focused and functional, here are some ideas for future enhancements:

*   **Reverse Operation ("Bundling"):** Create a bundle file from an existing directory.
*   **Overwrite Options:** Add flags like `--skip` or interactive prompts for overwriting files (complementary to the implemented `--force` flag).

## 📜 License

This project is licensed under the MIT License. See [LICENSE](docs/LICENSE) for details.



================================================
File: LICENSE
================================================
MIT License

Copyright (c) 2025 Danny Solivan

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.



================================================
File: tarpaulin-report.html
================================================
<!doctype html>
<html>
<head>
    <meta charset="utf-8">
    <style>html, body {
  margin: 0;
  padding: 0;
}

.app {
  margin: 10px;
  padding: 0;
}

.files-list {
  margin: 10px 0 0;
  width: 100%;
  border-collapse: collapse;
}
.files-list__head {
  border: 1px solid #999;
}
.files-list__head > tr > th {
  padding: 10px;
  border: 1px solid #999;
  text-align: left;
  font-weight: normal;
  background: #ddd;
}
.files-list__body {
}
.files-list__file {
  cursor: pointer;
}
.files-list__file:hover {
  background: #ccf;
}
.files-list__file > td {
  padding: 10px;
  border: 1px solid #999;
}
.files-list__file > td:first-child::before {
  content: '\01F4C4';
  margin-right: 1em;
}
.files-list__file_low {
  background: #fcc;
}
.files-list__file_medium {
  background: #ffc;
}
.files-list__file_high {
  background: #cfc;
}
.files-list__file_folder > td:first-child::before {
  content: '\01F4C1';
  margin-right: 1em;
}

.file-header {
  border: 1px solid #999;
  display: flex;
  justify-content: space-between;
  align-items: center;
  position: sticky;
  top: 0;
  background: white;
}

.file-header__back {
  margin: 10px;
  cursor: pointer;
  flex-shrink: 0;
  flex-grow: 0;
  text-decoration: underline;
  color: #338;
}

.file-header__name {
  margin: 10px;
  flex-shrink: 2;
  flex-grow: 2;
}

.file-header__stat {
  margin: 10px;
  flex-shrink: 0;
  flex-grow: 0;
}

.file-content {
  margin: 10px 0 0;
  border: 1px solid #999;
  padding: 10px;
  counter-reset: line;
  display: flex;
  flex-direction: column;
}

.code-line::before {
    content: counter(line);
    margin-right: 10px;
}
.code-line {
  margin: 0;
  padding: 0.3em;
  height: 1em;
  counter-increment: line;
}
.code-line_covered {
  background: #cfc;
}
.code-line_uncovered {
  background: #fcc;
}
</style>
</head>
<body>
    <div id="root"></div>
    <script>
        var data = {"files":[{"path":["E:","\\","git","codesprout","src","bundler.rs"],"content":"// src/bundler.rs\r\n// Module for file/directory creation and output logic\r\n\r\nuse crate::parser::ParsedEntry;\r\nuse anyhow::{Context, Result};\r\nuse std::{\r\n    fs,\r\n    path::{Path, PathBuf},\r\n};\r\n\r\n/// Creates directories and files based on the parsed bundle entries.\r\n///\r\n/// This function is called only if bundle parsing and collision checks pass.\r\n/// For each `ParsedEntry`:\r\n///   - Resolves the full absolute path for the new file.\r\n///   - Ensures its parent directory exists using `std::fs::create_dir_all(parent_path)`.\r\n///   - Writes the `entry.content` to the file path using `std::fs::write`.\r\n///\r\n/// Handles potential I/O errors during directory/file creation gracefully, returning an `anyhow::Error`.\r\n/// If `force` is true, existing files will be overwritten.\r\npub fn create_files_from_bundle(\r\n    entries: \u0026[ParsedEntry],\r\n    output_dir: \u0026Path,\r\n    _force: bool, // Indicate unused variable, logic is handled by skipping collision check\r\n) -\u003e Result\u003c()\u003e {\r\n    for entry in entries {\r\n        let full_target_path = output_dir.join(\u0026entry.path);\r\n\r\n        // If forcing, we don't care if the file exists, but we still need to ensure parent dirs are there.\r\n        // If not forcing, collision check should have already happened.\r\n        if let Some(parent_path) = full_target_path.parent() {\r\n            if !parent_path.exists() {\r\n                fs::create_dir_all(parent_path).with_context(|| {\r\n                    format!(\"Failed to create parent directory: {:?}\", parent_path)\r\n                })?;\r\n            } else if parent_path.is_file() {\r\n                // This case should ideally be caught by check_for_collisions if not forcing.\r\n                // If forcing, and a parent path component is a file, fs::write will fail later.\r\n                // This is a safeguard or clarity, fs::write would fail anyway.\r\n                return Err(anyhow::anyhow!(\r\n                    \"Cannot create file {:?}, its parent {:?} is an existing file.\",\r\n                    full_target_path,\r\n                    parent_path\r\n                ));\r\n            }\r\n        }\r\n\r\n        // fs::write will overwrite if the path exists and is a file.\r\n        // If path is a directory, fs::write will fail, which is correct.\r\n        fs::write(\u0026full_target_path, \u0026entry.content)\r\n            .with_context(|| format!(\"Failed to write file: {:?}\", full_target_path))?;\r\n    }\r\n    Ok(())\r\n}\r\n\r\n/// Checks for path collisions in the output directory.\r\n///\r\n/// For each `ParsedEntry`, it constructs the full target path by joining\r\n/// `output_dir` and `entry.path`. It then checks if this full target path\r\n/// already exists. If any collisions are detected, it returns an `anyhow::Error`\r\n/// detailing all collisions.\r\npub fn check_for_collisions(entries: \u0026[ParsedEntry], output_dir: \u0026Path) -\u003e Result\u003c()\u003e {\r\n    let mut collisions = Vec::new();\r\n\r\n    for entry in entries {\r\n        let target_path = output_dir.join(\u0026entry.path);\r\n        if target_path.exists() {\r\n            collisions.push(target_path);\r\n        } else {\r\n            let mut current_check_path = PathBuf::new();\r\n            for component in entry\r\n                .path\r\n                .parent()\r\n                .unwrap_or_else(|| Path::new(\"\"))\r\n                .components()\r\n            {\r\n                current_check_path.push(component);\r\n                let full_component_path = output_dir.join(\u0026current_check_path);\r\n                if full_component_path.is_file()\r\n                    \u0026\u0026 entry\r\n                        .path\r\n                        .strip_prefix(\u0026current_check_path)\r\n                        .is_ok_and(|p| !p.as_os_str().is_empty())\r\n                {\r\n                    collisions.push(full_component_path);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if !collisions.is_empty() {\r\n        let collision_details = collisions\r\n            .iter()\r\n            .map(|p| format!(\"  - {}\", p.display()))\r\n            .collect::\u003cVec\u003cString\u003e\u003e()\r\n            .join(\"\\n\");\r\n        return Err(anyhow::anyhow!(\r\n            \"Output path collision detected. The following paths already exist or conflict with directory creation:\\n{}\",\r\n            collision_details\r\n        ));\r\n    }\r\n\r\n    Ok(())\r\n}\r\n\r\n#[cfg(test)]\r\nmod tests {\r\n    use super::*;\r\n    use crate::parser::ParsedEntry;\r\n    use std::fs::{self, File};\r\n    use tempfile::tempdir;\r\n\r\n    fn create_parsed_entry(path_str: \u0026str, content_str: \u0026str) -\u003e ParsedEntry {\r\n        ParsedEntry {\r\n            path: PathBuf::from(path_str),\r\n            content: String::from(content_str),\r\n        }\r\n    }\r\n\r\n    #[test]\r\n    fn test_check_for_collisions_no_collision() {\r\n        let dir = tempdir().unwrap();\r\n        let output_dir = dir.path();\r\n        let entries = vec![\r\n            create_parsed_entry(\"file1.txt\", \"content1\"),\r\n            create_parsed_entry(\"dir1/file2.txt\", \"content2\"),\r\n        ];\r\n\r\n        let result = check_for_collisions(\u0026entries, output_dir);\r\n        assert!(result.is_ok());\r\n    }\r\n\r\n    #[test]\r\n    fn test_check_for_collisions_single_file_collision() {\r\n        let dir = tempdir().unwrap();\r\n        let output_dir = dir.path();\r\n        File::create(output_dir.join(\"file1.txt\")).unwrap();\r\n\r\n        let entries = vec![\r\n            create_parsed_entry(\"file1.txt\", \"content1\"),\r\n            create_parsed_entry(\"file2.txt\", \"content2\"),\r\n        ];\r\n\r\n        let result = check_for_collisions(\u0026entries, output_dir);\r\n        assert!(result.is_err());\r\n        let error_message = result.err().unwrap().to_string();\r\n        assert!(error_message.contains(\"Output path collision detected\"));\r\n        assert!(error_message.contains(\u0026output_dir.join(\"file1.txt\").display().to_string()));\r\n    }\r\n\r\n    #[test]\r\n    fn test_check_for_collisions_multiple_file_collisions() {\r\n        let dir = tempdir().unwrap();\r\n        let output_dir = dir.path();\r\n        File::create(output_dir.join(\"file1.txt\")).unwrap();\r\n        fs::create_dir_all(output_dir.join(\"dir1\")).unwrap();\r\n        File::create(output_dir.join(\"dir1/file2.txt\")).unwrap();\r\n\r\n        let entries = vec![\r\n            create_parsed_entry(\"file1.txt\", \"c1\"),\r\n            create_parsed_entry(\"dir1/file2.txt\", \"c2\"),\r\n            create_parsed_entry(\"file3.txt\", \"c3\"),\r\n        ];\r\n\r\n        let result = check_for_collisions(\u0026entries, output_dir);\r\n        assert!(result.is_err());\r\n        let error_message = result.err().unwrap().to_string();\r\n        assert!(error_message.contains(\u0026output_dir.join(\"file1.txt\").display().to_string()));\r\n        assert!(error_message.contains(\u0026output_dir.join(\"dir1/file2.txt\").display().to_string()));\r\n    }\r\n\r\n    #[test]\r\n    fn test_check_for_collisions_directory_as_file_collision() {\r\n        let dir = tempdir().unwrap();\r\n        let output_dir = dir.path();\r\n        fs::create_dir_all(output_dir.join(\"item\")).unwrap();\r\n\r\n        let entries = vec![create_parsed_entry(\"item\", \"content\")];\r\n\r\n        let result = check_for_collisions(\u0026entries, output_dir);\r\n        assert!(result.is_err());\r\n        let error_message = result.err().unwrap().to_string();\r\n        assert!(error_message.contains(\u0026output_dir.join(\"item\").display().to_string()));\r\n    }\r\n\r\n    #[test]\r\n    fn test_check_for_collisions_file_as_directory_collision() {\r\n        let dir = tempdir().unwrap();\r\n        let output_dir = dir.path();\r\n        File::create(output_dir.join(\"item\")).unwrap();\r\n\r\n        let entries = vec![create_parsed_entry(\"item/another.txt\", \"content\")];\r\n\r\n        let result = check_for_collisions(\u0026entries, output_dir);\r\n        assert!(result.is_err());\r\n        let error_message = result.err().unwrap().to_string();\r\n        assert!(error_message.contains(\u0026output_dir.join(\"item\").display().to_string()));\r\n        assert!(error_message.contains(\"conflict with directory creation\"));\r\n    }\r\n\r\n    #[test]\r\n    fn test_check_for_collisions_deep_file_as_directory_collision() {\r\n        let dir = tempdir().unwrap();\r\n        let output_dir = dir.path();\r\n        fs::create_dir_all(output_dir.join(\"level1\")).unwrap();\r\n        File::create(output_dir.join(\"level1/item\")).unwrap();\r\n\r\n        let entries = vec![create_parsed_entry(\"level1/item/another.txt\", \"content\")];\r\n\r\n        let result = check_for_collisions(\u0026entries, output_dir);\r\n        assert!(result.is_err());\r\n        let error_message = result.err().unwrap().to_string();\r\n        // Different OS path separators might cause issues, so we compare with both forms\r\n        let expected_path = output_dir.join(\"level1\").join(\"item\");\r\n        assert!(\r\n            error_message.contains(\u0026expected_path.display().to_string()) || \r\n            error_message.contains(\u0026expected_path.display().to_string().replace(\"\\\\\", \"/\")),\r\n            \"Error message '{}' doesn't contain path '{}'\", \r\n            error_message, \r\n            expected_path.display()\r\n        );\r\n    }\r\n\r\n    #[test]\r\n    fn test_create_single_file() -\u003e Result\u003c()\u003e {\r\n        let dir = tempdir()?;\r\n        let output_dir = dir.path();\r\n        let entries = vec![create_parsed_entry(\"file1.txt\", \"Hello World\")];\r\n\r\n        create_files_from_bundle(\u0026entries, output_dir, false)?;\r\n\r\n        let file_path = output_dir.join(\"file1.txt\");\r\n        assert!(file_path.exists());\r\n        assert_eq!(fs::read_to_string(file_path)?, \"Hello World\");\r\n        Ok(())\r\n    }\r\n\r\n    #[test]\r\n    fn test_create_multiple_files() -\u003e Result\u003c()\u003e {\r\n        let dir = tempdir()?;\r\n        let output_dir = dir.path();\r\n        let entries = vec![\r\n            create_parsed_entry(\"file1.txt\", \"Content 1\"),\r\n            create_parsed_entry(\"file2.txt\", \"Content 2\"),\r\n        ];\r\n\r\n        create_files_from_bundle(\u0026entries, output_dir, false)?;\r\n\r\n        let file_path1 = output_dir.join(\"file1.txt\");\r\n        assert!(file_path1.exists());\r\n        assert_eq!(fs::read_to_string(file_path1)?, \"Content 1\");\r\n\r\n        let file_path2 = output_dir.join(\"file2.txt\");\r\n        assert!(file_path2.exists());\r\n        assert_eq!(fs::read_to_string(file_path2)?, \"Content 2\");\r\n        Ok(())\r\n    }\r\n\r\n    #[test]\r\n    fn test_create_files_in_nested_directories() -\u003e Result\u003c()\u003e {\r\n        let dir = tempdir()?;\r\n        let output_dir = dir.path();\r\n        let entries = vec![\r\n            create_parsed_entry(\"dir1/file1.txt\", \"Nested Content 1\"),\r\n            create_parsed_entry(\"dir1/dir2/file2.txt\", \"Deeply Nested Content 2\"),\r\n            create_parsed_entry(\"file3.txt\", \"Root Content 3\"),\r\n        ];\r\n\r\n        create_files_from_bundle(\u0026entries, output_dir, false)?;\r\n\r\n        let path1 = output_dir.join(\"dir1/file1.txt\");\r\n        assert!(path1.exists());\r\n        assert_eq!(fs::read_to_string(path1)?, \"Nested Content 1\");\r\n        assert!(output_dir.join(\"dir1\").is_dir());\r\n\r\n        let path2 = output_dir.join(\"dir1/dir2/file2.txt\");\r\n        assert!(path2.exists());\r\n        assert_eq!(fs::read_to_string(path2)?, \"Deeply Nested Content 2\");\r\n        assert!(output_dir.join(\"dir1/dir2\").is_dir());\r\n\r\n        let path3 = output_dir.join(\"file3.txt\");\r\n        assert!(path3.exists());\r\n        assert_eq!(fs::read_to_string(path3)?, \"Root Content 3\");\r\n        Ok(())\r\n    }\r\n\r\n    #[test]\r\n    fn test_create_file_with_empty_content() -\u003e Result\u003c()\u003e {\r\n        let dir = tempdir()?;\r\n        let output_dir = dir.path();\r\n        let entries = vec![create_parsed_entry(\"empty.txt\", \"\")];\r\n\r\n        create_files_from_bundle(\u0026entries, output_dir, false)?;\r\n\r\n        let file_path = output_dir.join(\"empty.txt\");\r\n        assert!(file_path.exists());\r\n        assert_eq!(fs::read_to_string(file_path)?, \"\");\r\n        Ok(())\r\n    }\r\n\r\n    #[test]\r\n    fn test_create_files_complex_paths_and_content() -\u003e Result\u003c()\u003e {\r\n        let dir = tempdir()?;\r\n        let output_dir = dir.path();\r\n        let entries = vec![\r\n            create_parsed_entry(\"src/main.rs\", \"fn main() {\\n    println!(\\\"Hello\\\");\\n}\"),\r\n            create_parsed_entry(\"docs/README.md\", \"# My Project\\n\\nThis is a test.\"),\r\n            create_parsed_entry(\"config/settings.toml\", \"key = \\\"value\\\"\\nnumber = 123\"),\r\n        ];\r\n\r\n        create_files_from_bundle(\u0026entries, output_dir, false)?;\r\n\r\n        let path_rs = output_dir.join(\"src/main.rs\");\r\n        assert!(path_rs.exists());\r\n        assert_eq!(\r\n            fs::read_to_string(path_rs)?,\r\n            \"fn main() {\\n    println!(\\\"Hello\\\");\\n}\"\r\n        );\r\n        assert!(output_dir.join(\"src\").is_dir());\r\n\r\n        let path_md = output_dir.join(\"docs/README.md\");\r\n        assert!(path_md.exists());\r\n        assert_eq!(\r\n            fs::read_to_string(path_md)?,\r\n            \"# My Project\\n\\nThis is a test.\"\r\n        );\r\n        assert!(output_dir.join(\"docs\").is_dir());\r\n\r\n        let path_toml = output_dir.join(\"config/settings.toml\");\r\n        assert!(path_toml.exists());\r\n        assert_eq!(\r\n            fs::read_to_string(path_toml)?,\r\n            \"key = \\\"value\\\"\\nnumber = 123\"\r\n        );\r\n        assert!(output_dir.join(\"config\").is_dir());\r\n\r\n        Ok(())\r\n    }\r\n\r\n    #[test]\r\n    fn test_create_files_overwrite_with_force() -\u003e Result\u003c()\u003e {\r\n        let dir = tempdir()?;\r\n        let output_dir = dir.path();\r\n        let file_path = output_dir.join(\"file1.txt\");\r\n\r\n        // Create an initial file\r\n        fs::write(\u0026file_path, \"Initial Content\")?;\r\n        assert_eq!(fs::read_to_string(\u0026file_path)?, \"Initial Content\");\r\n\r\n        let entries = vec![create_parsed_entry(\"file1.txt\", \"Overwritten Content\")];\r\n\r\n        // Create files with force=true\r\n        create_files_from_bundle(\u0026entries, output_dir, true)?;\r\n\r\n        assert!(file_path.exists());\r\n        assert_eq!(fs::read_to_string(\u0026file_path)?, \"Overwritten Content\");\r\n        Ok(())\r\n    }\r\n\r\n    #[test]\r\n    fn test_create_files_fail_on_parent_is_file_even_with_force() -\u003e Result\u003c()\u003e {\r\n        let dir = tempdir()?;\r\n        let output_dir = dir.path();\r\n        let file_acting_as_parent_path = output_dir.join(\"parent_file\");\r\n\r\n        // Create a file where a directory is expected\r\n        fs::write(\u0026file_acting_as_parent_path, \"I am a file, not a directory.\")?;\r\n\r\n        let entries = vec![create_parsed_entry(\r\n            \"parent_file/child.txt\",\r\n            \"This should not be written.\",\r\n        )];\r\n\r\n        // Attempt to create files with force=true\r\n        let result = create_files_from_bundle(\u0026entries, output_dir, true);\r\n\r\n        assert!(result.is_err());\r\n        let error_message = result.err().unwrap().to_string();\r\n        assert!(error_message.contains(\"its parent\"));\r\n        assert!(error_message.contains(\"is an existing file\"));\r\n\r\n        // Ensure the original \"parent_file\" is untouched and no \"child.txt\" was created\r\n        assert_eq!(\r\n            fs::read_to_string(\u0026file_acting_as_parent_path)?,\r\n            \"I am a file, not a directory.\"\r\n        );\r\n        assert!(!output_dir.join(\"parent_file/child.txt\").exists());\r\n\r\n        Ok(())\r\n    }\r\n}\r\n","traces":[{"line":21,"address":[],"length":0,"stats":{"Line":1224979098644774912}},{"line":26,"address":[],"length":0,"stats":{"Line":4539628424389459968}},{"line":27,"address":[],"length":0,"stats":{"Line":1729382256910270464}},{"line":31,"address":[],"length":0,"stats":{"Line":3458764513820540928}},{"line":33,"address":[],"length":0,"stats":{"Line":504403158265495552}},{"line":34,"address":[],"length":0,"stats":{"Line":0}},{"line":36,"address":[],"length":0,"stats":{"Line":1224979098644774912}},{"line":40,"address":[],"length":0,"stats":{"Line":144115188075855872}},{"line":41,"address":[],"length":0,"stats":{"Line":144115188075855872}},{"line":42,"address":[],"length":0,"stats":{"Line":144115188075855872}},{"line":43,"address":[],"length":0,"stats":{"Line":144115188075855872}},{"line":50,"address":[],"length":0,"stats":{"Line":1585267068834414592}},{"line":51,"address":[],"length":0,"stats":{"Line":1585267068834414592}},{"line":53,"address":[],"length":0,"stats":{"Line":1080863910568919040}},{"line":62,"address":[],"length":0,"stats":{"Line":1008806316530991104}},{"line":63,"address":[],"length":0,"stats":{"Line":1008806316530991104}},{"line":65,"address":[],"length":0,"stats":{"Line":3891110078048108544}},{"line":67,"address":[],"length":0,"stats":{"Line":360287970189639680}},{"line":68,"address":[],"length":0,"stats":{"Line":360287970189639680}},{"line":70,"address":[],"length":0,"stats":{"Line":1080863910568919040}},{"line":71,"address":[],"length":0,"stats":{"Line":504403158265495552}},{"line":74,"address":[],"length":0,"stats":{"Line":0}},{"line":77,"address":[],"length":0,"stats":{"Line":504403158265495552}},{"line":78,"address":[],"length":0,"stats":{"Line":504403158265495552}},{"line":79,"address":[],"length":0,"stats":{"Line":504403158265495552}},{"line":80,"address":[],"length":0,"stats":{"Line":144115188075855872}},{"line":81,"address":[],"length":0,"stats":{"Line":144115188075855872}},{"line":82,"address":[],"length":0,"stats":{"Line":144115188075855872}},{"line":83,"address":[],"length":0,"stats":{"Line":432345564227567616}},{"line":85,"address":[],"length":0,"stats":{"Line":144115188075855872}},{"line":86,"address":[],"length":0,"stats":{"Line":144115188075855872}},{"line":92,"address":[],"length":0,"stats":{"Line":1008806316530991104}},{"line":93,"address":[],"length":0,"stats":{"Line":432345564227567616}},{"line":95,"address":[],"length":0,"stats":{"Line":936748722493063168}},{"line":104,"address":[],"length":0,"stats":{"Line":576460752303423488}}],"covered":33,"coverable":35},{"path":["E:","\\","git","codesprout","src","main.rs"],"content":"use clap::Parser;\r\nuse std::path::PathBuf;\r\n\r\nmod bundler;\r\nmod parser;\r\n\r\n/// sprout - A CLI tool to sprout files from a bundle.\r\n#[derive(Parser, Debug)]\r\n#[command(author, version, about, long_about = None, infer_long_args = true)]\r\nstruct CliArgs {\r\n    /// Path to the bundle file (positional).\r\n    /// Required unless -i/--input is used.\r\n    #[arg(name = \"BUNDLE_FILE_PATH\", required_unless_present = \"input\")]\r\n    bundle_file_path: Option\u003cPathBuf\u003e,\r\n\r\n    /// Output directory path (positional).\r\n    /// Defaults to the current directory if not specified and -o/--output is not used.\r\n    #[arg(name = \"OUTPUT_DIRECTORY_PATH\", default_value = \".\")]\r\n    output_directory_path: PathBuf,\r\n\r\n    /// Specify bundle file path via flag (alternative to positional BUNDLE_FILE_PATH).\r\n    #[arg(short, long, value_name = \"PATH\", conflicts_with = \"BUNDLE_FILE_PATH\")]\r\n    input: Option\u003cPathBuf\u003e,\r\n\r\n    /// Specify output directory path via flag (overrides positional OUTPUT_DIRECTORY_PATH).\r\n    #[arg(short, long, value_name = \"PATH\")]\r\n    output: Option\u003cPathBuf\u003e,\r\n\r\n    /// Force overwrite of existing files.\r\n    #[arg(short, long, default_value_t = false)]\r\n    force: bool,\r\n}\r\n\r\nfn main() -\u003e anyhow::Result\u003c()\u003e {\r\n    let args = CliArgs::parse();\r\n\r\n    let bundle_path = match (args.bundle_file_path, args.input) {\r\n        (Some(p), None) =\u003e p,\r\n        (None, Some(i)) =\u003e i,\r\n        _ =\u003e unreachable!(\"Clap should ensure one input source is exclusively provided and valid.\"),\r\n    };\r\n\r\n    let final_output_path = if let Some(output_flag_path) = args.output {\r\n        output_flag_path\r\n    } else {\r\n        args.output_directory_path\r\n    };\r\n\r\n    let parsed_data = parser::parse_bundle(\u0026bundle_path)?;\r\n\r\n    if parsed_data.is_empty() {\r\n        println!(\r\n            \"Bundle file '{}' is empty or contains no valid entries. Nothing to sprout.\",\r\n            bundle_path.display()\r\n        );\r\n        return Ok(());\r\n    }\r\n\r\n    if !args.force {\r\n        bundler::check_for_collisions(\u0026parsed_data, \u0026final_output_path)?;\r\n    }\r\n\r\n    bundler::create_files_from_bundle(\u0026parsed_data, \u0026final_output_path, args.force)?;\r\n\r\n    println!(\r\n        \"Successfully sprouted {} file(s) from '{}' to '{}'.{}\",\r\n        parsed_data.len(),\r\n        bundle_path.display(),\r\n        final_output_path.display(),\r\n        if args.force {\r\n            \" (files overwritten if necessary)\"\r\n        } else {\r\n            \"\"\r\n        }\r\n    );\r\n    Ok(())\r\n}\r\n","traces":[{"line":34,"address":[],"length":0,"stats":{"Line":936748722493063168}},{"line":35,"address":[],"length":0,"stats":{"Line":936748722493063168}},{"line":37,"address":[],"length":0,"stats":{"Line":1873497444986126336}},{"line":38,"address":[],"length":0,"stats":{"Line":864691128455135232}},{"line":39,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":43,"address":[],"length":0,"stats":{"Line":144115188075855872}},{"line":44,"address":[],"length":0,"stats":{"Line":0}},{"line":46,"address":[],"length":0,"stats":{"Line":792633534417207296}},{"line":49,"address":[],"length":0,"stats":{"Line":936748722493063168}},{"line":51,"address":[],"length":0,"stats":{"Line":0}},{"line":52,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":53,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":54,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":56,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":59,"address":[],"length":0,"stats":{"Line":792633534417207296}},{"line":60,"address":[],"length":0,"stats":{"Line":648518346341351424}},{"line":63,"address":[],"length":0,"stats":{"Line":792633534417207296}},{"line":65,"address":[],"length":0,"stats":{"Line":648518346341351424}},{"line":66,"address":[],"length":0,"stats":{"Line":648518346341351424}},{"line":67,"address":[],"length":0,"stats":{"Line":648518346341351424}},{"line":68,"address":[],"length":0,"stats":{"Line":648518346341351424}},{"line":69,"address":[],"length":0,"stats":{"Line":648518346341351424}},{"line":70,"address":[],"length":0,"stats":{"Line":648518346341351424}},{"line":71,"address":[],"length":0,"stats":{"Line":144115188075855872}},{"line":73,"address":[],"length":0,"stats":{"Line":504403158265495552}},{"line":76,"address":[],"length":0,"stats":{"Line":0}}],"covered":23,"coverable":26},{"path":["E:","\\","git","codesprout","src","parser.rs"],"content":"// src/parser.rs\r\n// Module for parsing the bundle file\r\n\r\nuse anyhow::{Context, Result, anyhow};\r\nuse std::collections::HashSet;\r\nuse std::fmt;\r\nuse std::fs;\r\nuse std::path::{Path, PathBuf};\r\n\r\nconst FILE_HEADER_SEPARATOR: \u0026str = \"================================================\";\r\nconst FILE_PATH_PREFIX: \u0026str = \"File: \";\r\n\r\n/// Represents a single parsed file entry from the bundle.\r\n#[derive(Debug, PartialEq, Eq, Clone)]\r\npub struct ParsedEntry {\r\n    pub path: PathBuf,\r\n    pub content: String,\r\n}\r\n\r\n/// Specific errors that can occur during bundle parsing and validation.\r\n#[derive(Debug, PartialEq, Eq, Clone)]\r\npub enum BundleValidationError {\r\n    ContentBeforeFirstHeader {\r\n        line_number: usize,\r\n        content_excerpt: String,\r\n    },\r\n    MalformedHeaderMissingFilePrefix {\r\n        line_number: usize,\r\n        header_line: String,\r\n    },\r\n    MalformedHeaderMissingSeparatorAfterPath {\r\n        line_number: usize,\r\n        path_line: String,\r\n    },\r\n    MalformedHeaderPathLineInterruptedBySeparator {\r\n        line_number: usize,\r\n        path_line: String,\r\n    },\r\n    MalformedHeaderPathLineMissingNewline {\r\n        line_number: usize,\r\n        path_line: String,\r\n    },\r\n    MalformedHeaderMissingNewlineAfterContentSeparator {\r\n        line_number: usize,\r\n        separator_line: String,\r\n    },\r\n    EmptyPath {\r\n        line_number: usize,\r\n    },\r\n    AbsolutePathNotAllowed {\r\n        line_number: usize,\r\n        path: String,\r\n    },\r\n    DuplicatePath {\r\n        line_number: usize,\r\n        path: String,\r\n    },\r\n    PrematureEOFBeforePathLine {\r\n        line_number: usize,\r\n    },\r\n    PrematureEOFBeforeContentSeparator {\r\n        line_number: usize,\r\n        path: String,\r\n    },\r\n    PrematureEOFBeforeContentSeparatorNewline {\r\n        line_number: usize,\r\n        path: String,\r\n    },\r\n    UnexpectedContentAfterLastEntry {\r\n        line_number: usize,\r\n        content_excerpt: String,\r\n    },\r\n}\r\n\r\nimpl fmt::Display for BundleValidationError {\r\n    fn fmt(\u0026self, f: \u0026mut fmt::Formatter\u003c'_\u003e) -\u003e fmt::Result {\r\n        match self {\r\n            BundleValidationError::ContentBeforeFirstHeader {\r\n                line_number,\r\n                content_excerpt,\r\n            } =\u003e write!(\r\n                f,\r\n                \"L{}: Content found before the first file header. Starts with: \\\"{}\\\"\",\r\n                line_number, content_excerpt\r\n            ),\r\n            BundleValidationError::MalformedHeaderMissingFilePrefix {\r\n                line_number,\r\n                header_line,\r\n            } =\u003e write!(\r\n                f,\r\n                \"L{}: Malformed file header. Expected '{}' after separator line, found: \\\"{}\\\"\",\r\n                line_number, FILE_PATH_PREFIX, header_line\r\n            ),\r\n            BundleValidationError::MalformedHeaderMissingSeparatorAfterPath {\r\n                line_number,\r\n                path_line,\r\n            } =\u003e write!(\r\n                f,\r\n                \"L{}: Malformed file header. Expected separator line after path line, found: \\\"{}\\\"\",\r\n                line_number, path_line\r\n            ),\r\n            BundleValidationError::MalformedHeaderPathLineInterruptedBySeparator {\r\n                line_number,\r\n                path_line,\r\n            } =\u003e write!(\r\n                f,\r\n                \"L{}: Malformed file header. File path line is interrupted by a separator: \\\"{}\\\"\",\r\n                line_number, path_line\r\n            ),\r\n            BundleValidationError::MalformedHeaderPathLineMissingNewline {\r\n                line_number,\r\n                path_line,\r\n            } =\u003e write!(\r\n                f,\r\n                \"L{}: Malformed file header. File path line does not end with a newline: \\\"{}\\\"\",\r\n                line_number, path_line\r\n            ),\r\n            BundleValidationError::MalformedHeaderMissingNewlineAfterContentSeparator {\r\n                line_number,\r\n                separator_line,\r\n            } =\u003e write!(\r\n                f,\r\n                \"L{}: Malformed file header. Expected newline after content separator line: \\\"{}\\\"\",\r\n                line_number, separator_line\r\n            ),\r\n            BundleValidationError::EmptyPath { line_number } =\u003e {\r\n                write!(f, \"L{}: File path is empty.\", line_number)\r\n            }\r\n            BundleValidationError::AbsolutePathNotAllowed { line_number, path } =\u003e write!(\r\n                f,\r\n                \"L{}: Absolute path not allowed: \\\"{}\\\"\",\r\n                line_number, path\r\n            ),\r\n            BundleValidationError::DuplicatePath { line_number, path } =\u003e {\r\n                write!(f, \"L{}: Duplicate path found: \\\"{}\\\"\", line_number, path)\r\n            }\r\n            BundleValidationError::PrematureEOFBeforePathLine { line_number } =\u003e write!(\r\n                f,\r\n                \"L{}: Premature EOF. Expected 'File: \u003cpath\u003e' line after separator.\",\r\n                line_number\r\n            ),\r\n            BundleValidationError::PrematureEOFBeforeContentSeparator { line_number, path } =\u003e {\r\n                write!(\r\n                    f,\r\n                    \"L{}: Premature EOF for file \\\"{}\\\". Expected second separator line after path.\",\r\n                    path, line_number\r\n                )\r\n            }\r\n            BundleValidationError::PrematureEOFBeforeContentSeparatorNewline {\r\n                line_number,\r\n                path,\r\n            } =\u003e write!(\r\n                f,\r\n                \"L{}: Premature EOF for file \\\"{}\\\". Expected newline after content separator.\",\r\n                path, line_number\r\n            ),\r\n            BundleValidationError::UnexpectedContentAfterLastEntry {\r\n                line_number,\r\n                content_excerpt,\r\n            } =\u003e write!(\r\n                f,\r\n                \"L{}: Unexpected content found after the last valid file entry. Starts with: \\\"{}\\\"\",\r\n                line_number, content_excerpt\r\n            ),\r\n        }\r\n    }\r\n}\r\n\r\n/// Container for multiple validation errors.\r\n#[derive(Debug)]\r\npub struct BundleParseError {\r\n    pub errors: Vec\u003cBundleValidationError\u003e,\r\n}\r\n\r\nimpl fmt::Display for BundleParseError {\r\n    fn fmt(\u0026self, f: \u0026mut fmt::Formatter\u003c'_\u003e) -\u003e fmt::Result {\r\n        writeln!(\r\n            f,\r\n            \"Bundle parsing failed with {} error(s):\",\r\n            self.errors.len()\r\n        )?;\r\n        for error in \u0026self.errors {\r\n            writeln!(f, \"- {}\", error)?;\r\n        }\r\n        Ok(())\r\n    }\r\n}\r\n\r\nimpl std::error::Error for BundleParseError {}\r\n\r\n/// Parses a bundle file, extracting file paths and their content, and validating the format.\r\n///\r\n/// Collects all format errors found in the bundle.\r\npub fn parse_bundle(bundle_path: \u0026Path) -\u003e Result\u003cVec\u003cParsedEntry\u003e\u003e {\r\n    let bundle_content = fs::read_to_string(bundle_path)\r\n        .with_context(|| format!(\"Failed to read bundle file: {:?}\", bundle_path))?;\r\n\r\n    if bundle_content.trim().is_empty() {\r\n        return Ok(Vec::new());\r\n    }\r\n\r\n    let mut entries = Vec::new();\r\n    let mut validation_errors = Vec::new();\r\n    let mut paths_seen = HashSet::new();\r\n\r\n    let lines: Vec\u003c\u0026str\u003e = bundle_content.lines().collect();\r\n\r\n    let mut first_header_line_idx: Option\u003cusize\u003e = None;\r\n    for (idx, line_content) in lines.iter().enumerate() {\r\n        if line_content.trim_start().starts_with(FILE_HEADER_SEPARATOR)\r\n            \u0026\u0026 idx + 1 \u003c lines.len()\r\n            \u0026\u0026 lines[idx + 1].trim_start().starts_with(FILE_PATH_PREFIX)\r\n        {\r\n            first_header_line_idx = Some(idx);\r\n            break;\r\n        }\r\n    }\r\n\r\n    let mut start_processing_from_line_idx = 0;\r\n    let mut skipped_pre_header_line_numbers: Vec\u003cusize\u003e = Vec::new();\r\n\r\n    if let Some(fh_idx) = first_header_line_idx {\r\n        for (line_idx, line_content) in lines.iter().enumerate().take(fh_idx) {\r\n            if !line_content.trim().is_empty() {\r\n                skipped_pre_header_line_numbers.push(line_idx + 1);\r\n            }\r\n        }\r\n\r\n        if !skipped_pre_header_line_numbers.is_empty() {\r\n            let min_line = *skipped_pre_header_line_numbers.iter().min().unwrap();\r\n            let max_line = *skipped_pre_header_line_numbers.iter().max().unwrap();\r\n            if min_line == max_line {\r\n                eprintln!(\r\n                    \"Warning: Line {} excluded due to content before the first file header.\",\r\n                    min_line\r\n                );\r\n            } else {\r\n                eprintln!(\r\n                    \"Warning: Lines {}-{} excluded due to content before the first file header.\",\r\n                    min_line, max_line\r\n                );\r\n            }\r\n        }\r\n        start_processing_from_line_idx = fh_idx;\r\n    } else if !bundle_content.trim().is_empty() {\r\n        let first_actual_content_line_str = lines\r\n            .iter()\r\n            .find(|line| !line.trim().is_empty())\r\n            .map_or(\"\", |line| line.trim());\r\n\r\n        validation_errors.push(BundleValidationError::ContentBeforeFirstHeader {\r\n            line_number: 1,\r\n            content_excerpt: first_actual_content_line_str.chars().take(50).collect(),\r\n        });\r\n    }\r\n\r\n    let mut current_bundle_offset = 0;\r\n    for line_content_str in lines.iter().take(start_processing_from_line_idx) {\r\n        current_bundle_offset += line_content_str.len() + 1;\r\n    }\r\n\r\n    while current_bundle_offset \u003c bundle_content.len() {\r\n        let remaining_content = \u0026bundle_content[current_bundle_offset..];\r\n        let search_start_line = bundle_content[..current_bundle_offset].lines().count();\r\n\r\n        match remaining_content.find(FILE_HEADER_SEPARATOR) {\r\n            Some(header_relative_start) =\u003e {\r\n                let header_absolute_start = current_bundle_offset + header_relative_start;\r\n                let header_line_number =\r\n                    bundle_content[..header_absolute_start].lines().count() + 1;\r\n\r\n                let skipped_content = \u0026bundle_content[current_bundle_offset..header_absolute_start];\r\n                if !skipped_content.trim().is_empty() {\r\n                    validation_errors.push(\r\n                        BundleValidationError::UnexpectedContentAfterLastEntry {\r\n                            line_number: search_start_line,\r\n                            content_excerpt: skipped_content\r\n                                .trim()\r\n                                .lines()\r\n                                .next()\r\n                                .unwrap_or(\"\")\r\n                                .chars()\r\n                                .take(50)\r\n                                .collect(),\r\n                        },\r\n                    );\r\n                }\r\n\r\n                let current_separator_line_num = header_line_number;\r\n\r\n                let after_first_sep_start = header_absolute_start + FILE_HEADER_SEPARATOR.len();\r\n                if after_first_sep_start \u003e= bundle_content.len() {\r\n                    validation_errors.push(BundleValidationError::PrematureEOFBeforePathLine {\r\n                        line_number: current_separator_line_num,\r\n                    });\r\n                    current_bundle_offset = bundle_content.len();\r\n                    continue;\r\n                }\r\n                if bundle_content.as_bytes()[after_first_sep_start] != b'\\n' {\r\n                    validation_errors.push(\r\n                        BundleValidationError::MalformedHeaderMissingFilePrefix {\r\n                            line_number: current_separator_line_num + 1,\r\n                            header_line: bundle_content[after_first_sep_start..]\r\n                                .lines()\r\n                                .next()\r\n                                .unwrap_or(\"\")\r\n                                .trim_end()\r\n                                .to_string(),\r\n                        },\r\n                    );\r\n                    current_bundle_offset = bundle_content.len();\r\n                    continue;\r\n                }\r\n                let path_line_num = current_separator_line_num + 1;\r\n\r\n                let path_line_start = after_first_sep_start + 1;\r\n                if path_line_start \u003e= bundle_content.len() {\r\n                    validation_errors.push(BundleValidationError::PrematureEOFBeforePathLine {\r\n                        line_number: path_line_num,\r\n                    });\r\n                    current_bundle_offset = bundle_content.len();\r\n                    continue;\r\n                }\r\n                if !bundle_content[path_line_start..].starts_with(FILE_PATH_PREFIX) {\r\n                    validation_errors.push(\r\n                        BundleValidationError::MalformedHeaderMissingFilePrefix {\r\n                            line_number: path_line_num,\r\n                            header_line: bundle_content[path_line_start..]\r\n                                .lines()\r\n                                .next()\r\n                                .unwrap_or(\"\")\r\n                                .to_string(),\r\n                        },\r\n                    );\r\n                    current_bundle_offset = bundle_content.len();\r\n                    continue;\r\n                }\r\n\r\n                let path_actual_start = path_line_start + FILE_PATH_PREFIX.len();\r\n                let path_line_terminator_search_slice = \u0026bundle_content[path_actual_start..];\r\n                let newline_pos_in_slice = path_line_terminator_search_slice.find('\\n');\r\n\r\n                let path_str_end_offset = match newline_pos_in_slice {\r\n                    Some(nl_idx) =\u003e {\r\n                        if path_line_terminator_search_slice[..nl_idx]\r\n                            .contains(FILE_HEADER_SEPARATOR)\r\n                        {\r\n                            validation_errors.push(BundleValidationError::MalformedHeaderPathLineInterruptedBySeparator {\r\n                                line_number: path_line_num,\r\n                                path_line: bundle_content[path_actual_start .. path_actual_start + nl_idx].trim_end().to_string(),\r\n                            });\r\n                            current_bundle_offset = bundle_content.len();\r\n                            continue;\r\n                        }\r\n                        path_actual_start + nl_idx\r\n                    }\r\n                    None =\u003e {\r\n                        validation_errors.push(\r\n                            BundleValidationError::MalformedHeaderPathLineMissingNewline {\r\n                                line_number: path_line_num,\r\n                                path_line: path_line_terminator_search_slice\r\n                                    .lines()\r\n                                    .next()\r\n                                    .unwrap_or(\"\")\r\n                                    .trim_end()\r\n                                    .to_string(),\r\n                            },\r\n                        );\r\n                        current_bundle_offset = bundle_content.len();\r\n                        continue;\r\n                    }\r\n                };\r\n\r\n                let file_path_str = bundle_content[path_actual_start..path_str_end_offset].trim();\r\n                if file_path_str.is_empty() {\r\n                    validation_errors.push(BundleValidationError::EmptyPath {\r\n                        line_number: path_line_num,\r\n                    });\r\n                }\r\n\r\n                let path = PathBuf::from(file_path_str);\r\n                // This variable will track if the current entry is valid for actual use,\r\n                // considering emptiness, path type, and duplication.\r\n                let mut is_valid_for_adding_to_entries = !file_path_str.is_empty();\r\n\r\n                if !file_path_str.is_empty() {\r\n                    let first_component = path.components().next();\r\n                    let is_problematic_path_type = path.is_absolute()\r\n                        || matches!(\r\n                            first_component,\r\n                            Some(std::path::Component::RootDir)\r\n                                | Some(std::path::Component::Prefix(_))\r\n                        );\r\n\r\n                    if is_problematic_path_type {\r\n                        validation_errors.push(BundleValidationError::AbsolutePathNotAllowed {\r\n                            line_number: path_line_num,\r\n                            path: file_path_str.to_string(),\r\n                        });\r\n                        is_valid_for_adding_to_entries = false;\r\n                    }\r\n\r\n                    // For duplicate check: only consider if not already invalidated by path type.\r\n                    // `paths_seen` should only store valid, relative paths.\r\n                    if is_valid_for_adding_to_entries \u0026\u0026 !paths_seen.insert(path.clone()) {\r\n                        validation_errors.push(BundleValidationError::DuplicatePath {\r\n                            line_number: path_line_num,\r\n                            path: file_path_str.to_string(),\r\n                        });\r\n                        is_valid_for_adding_to_entries = false; // Mark as invalid if duplicate\r\n                    }\r\n                }\r\n                // If file_path_str was empty, is_valid_for_adding_to_entries is already false,\r\n                // and an EmptyPath error was added earlier.\r\n\r\n                let second_sep_line_num = path_line_num + 1;\r\n\r\n                let second_sep_start = path_str_end_offset + 1;\r\n                if second_sep_start \u003e= bundle_content.len() {\r\n                    validation_errors.push(\r\n                        BundleValidationError::PrematureEOFBeforeContentSeparator {\r\n                            line_number: second_sep_line_num,\r\n                            path: file_path_str.to_string(),\r\n                        },\r\n                    );\r\n                    current_bundle_offset = bundle_content.len();\r\n                    continue;\r\n                }\r\n                if !bundle_content[second_sep_start..].starts_with(FILE_HEADER_SEPARATOR) {\r\n                    validation_errors.push(\r\n                        BundleValidationError::MalformedHeaderMissingSeparatorAfterPath {\r\n                            line_number: second_sep_line_num,\r\n                            path_line: file_path_str.to_string(),\r\n                        },\r\n                    );\r\n                    current_bundle_offset = bundle_content.len();\r\n                    continue;\r\n                }\r\n\r\n                let after_second_sep_start = second_sep_start + FILE_HEADER_SEPARATOR.len();\r\n                if after_second_sep_start \u003e= bundle_content.len() {\r\n                    validation_errors.push(\r\n                        BundleValidationError::PrematureEOFBeforeContentSeparatorNewline {\r\n                            line_number: second_sep_line_num,\r\n                            path: file_path_str.to_string(),\r\n                        },\r\n                    );\r\n                    current_bundle_offset = bundle_content.len();\r\n                    continue;\r\n                }\r\n                if bundle_content.as_bytes()[after_second_sep_start] != b'\\n' {\r\n                    validation_errors.push(\r\n                        BundleValidationError::MalformedHeaderMissingNewlineAfterContentSeparator {\r\n                            line_number: second_sep_line_num,\r\n                            separator_line: bundle_content[second_sep_start\r\n                                ..std::cmp::min(\r\n                                    bundle_content.len(),\r\n                                    second_sep_start + FILE_HEADER_SEPARATOR.len(),\r\n                                )]\r\n                                .trim_end()\r\n                                .to_string(),\r\n                        },\r\n                    );\r\n                    current_bundle_offset = bundle_content.len();\r\n                    continue;\r\n                }\r\n\r\n                let content_actual_start = after_second_sep_start + 1;\r\n\r\n                let next_entry_header_search_start = content_actual_start;\r\n                let content_end_offset = bundle_content[next_entry_header_search_start..]\r\n                    .find(FILE_HEADER_SEPARATOR)\r\n                    .map(|pos| next_entry_header_search_start + pos)\r\n                    .unwrap_or_else(|| bundle_content.len());\r\n\r\n                let content = bundle_content[content_actual_start..content_end_offset].to_string();\r\n\r\n                if is_valid_for_adding_to_entries {\r\n                    entries.push(ParsedEntry { path, content });\r\n                }\r\n\r\n                current_bundle_offset = content_end_offset;\r\n            }\r\n            None =\u003e {\r\n                let final_remaining_content = \u0026bundle_content[current_bundle_offset..];\r\n                if !final_remaining_content.trim().is_empty() \u0026\u0026 !entries.is_empty() {\r\n                    validation_errors.push(\r\n                        BundleValidationError::UnexpectedContentAfterLastEntry {\r\n                            line_number: bundle_content[..current_bundle_offset].lines().count()\r\n                                + 1,\r\n                            content_excerpt: final_remaining_content\r\n                                .trim()\r\n                                .lines()\r\n                                .next()\r\n                                .unwrap_or(\"\")\r\n                                .chars()\r\n                                .take(50)\r\n                                .collect(),\r\n                        },\r\n                    );\r\n                }\r\n                current_bundle_offset = bundle_content.len();\r\n            }\r\n        }\r\n    }\r\n\r\n    if !validation_errors.is_empty() {\r\n        return Err(anyhow!(BundleParseError {\r\n            errors: validation_errors\r\n        }));\r\n    }\r\n\r\n    Ok(entries)\r\n}\r\n\r\n#[cfg(test)]\r\nmod tests {\r\n    use super::*;\r\n    use std::io::Write;\r\n    use tempfile::NamedTempFile;\r\n\r\n    fn create_temp_bundle_file(content: \u0026str) -\u003e NamedTempFile {\r\n        let mut temp_file = NamedTempFile::new().expect(\"Failed to create temp file\");\r\n        write!(temp_file, \"{}\", content).expect(\"Failed to write to temp file\");\r\n        temp_file\r\n    }\r\n\r\n    fn assert_specific_error(\r\n        result: \u0026Result\u003cVec\u003cParsedEntry\u003e, anyhow::Error\u003e,\r\n        expected_error: BundleValidationError,\r\n    ) {\r\n        match result {\r\n            Err(err) =\u003e {\r\n                if let Some(bundle_parse_error) = err.downcast_ref::\u003cBundleParseError\u003e() {\r\n                    assert!(\r\n                        bundle_parse_error.errors.contains(\u0026expected_error),\r\n                        \"Expected error {:?} not found in {:?}\",\r\n                        expected_error,\r\n                        bundle_parse_error.errors\r\n                    );\r\n                } else {\r\n                    panic!(\"Error is not a BundleParseError: {:?}\", err);\r\n                }\r\n            }\r\n            Ok(_) =\u003e panic!(\"Expected error, but got Ok\"),\r\n        }\r\n    }\r\n\r\n    #[test]\r\n    fn test_parse_empty_bundle_file() {\r\n        let temp_file = create_temp_bundle_file(\"\");\r\n        let entries = parse_bundle(temp_file.path()).unwrap();\r\n        assert!(entries.is_empty());\r\n    }\r\n\r\n    #[test]\r\n    fn test_parse_bundle_file_with_only_whitespace() {\r\n        let temp_file = create_temp_bundle_file(\"   \\n\\t  \\n\");\r\n        let entries = parse_bundle(temp_file.path()).unwrap();\r\n        assert!(entries.is_empty());\r\n    }\r\n\r\n    #[test]\r\n    fn test_error_content_before_first_header() {\r\n        let bundle_content = format!(\r\n            \"Some introductory text.\\n\\\r\n            {}\\n\\\r\n            {}path/to/file1.txt\\n\\\r\n            {}\\n\\\r\n            Content of file1.\",\r\n            FILE_HEADER_SEPARATOR, FILE_PATH_PREFIX, FILE_HEADER_SEPARATOR\r\n        );\r\n        let temp_file = create_temp_bundle_file(\u0026bundle_content);\r\n        let result = parse_bundle(temp_file.path());\r\n        assert!(result.is_ok(), \"Expected Ok, got {:?}\", result);\r\n        let entries = result.unwrap();\r\n        assert_eq!(entries.len(), 1);\r\n        assert_eq!(entries[0].path, PathBuf::from(\"path/to/file1.txt\"));\r\n        assert_eq!(entries[0].content, \"Content of file1.\");\r\n    }\r\n\r\n    #[test]\r\n    fn test_error_content_before_first_header_no_valid_header_at_all() {\r\n        let temp_file =\r\n            create_temp_bundle_file(\"This is just some text, no valid file entries at all.\");\r\n        let result = parse_bundle(temp_file.path());\r\n        assert_specific_error(\r\n            \u0026result,\r\n            BundleValidationError::ContentBeforeFirstHeader {\r\n                line_number: 1,\r\n                content_excerpt: \"This is just some text, no valid file entries at a\".to_string(),\r\n            },\r\n        );\r\n    }\r\n\r\n    #[test]\r\n    fn test_parse_single_entry() {\r\n        let bundle_content = format!(\r\n            \"{}\\n\\\r\n            {}file.txt\\n\\\r\n            {}\\n\\\r\n            Hello, world!\",\r\n            FILE_HEADER_SEPARATOR, FILE_PATH_PREFIX, FILE_HEADER_SEPARATOR\r\n        );\r\n        let temp_file = create_temp_bundle_file(\u0026bundle_content);\r\n        let entries = parse_bundle(temp_file.path()).unwrap();\r\n        assert_eq!(entries.len(), 1);\r\n        assert_eq!(entries[0].path, PathBuf::from(\"file.txt\"));\r\n        assert_eq!(entries[0].content, \"Hello, world!\");\r\n    }\r\n\r\n    #[test]\r\n    fn test_parse_multiple_entries() {\r\n        let bundle_content = format!(\r\n            \"{}\\n\\\r\n            {}file1.txt\\n\\\r\n            {}\\n\\\r\n            Content of file1.\\n\\\r\n            {}\\n\\\r\n            {}path/to/file2.rs\\n\\\r\n            {}\\n\\\r\n            // Rust code\\nfn main() {{}}\\n\\\r\n            {}\\n\\\r\n            {}another.md\\n\\\r\n            {}\\n\\\r\n            ## Markdown Content\",\r\n            FILE_HEADER_SEPARATOR,\r\n            FILE_PATH_PREFIX,\r\n            FILE_HEADER_SEPARATOR,\r\n            FILE_HEADER_SEPARATOR,\r\n            FILE_PATH_PREFIX,\r\n            FILE_HEADER_SEPARATOR,\r\n            FILE_HEADER_SEPARATOR,\r\n            FILE_PATH_PREFIX,\r\n            FILE_HEADER_SEPARATOR\r\n        );\r\n        let temp_file = create_temp_bundle_file(\u0026bundle_content);\r\n        let entries = parse_bundle(temp_file.path()).unwrap();\r\n        assert_eq!(entries.len(), 3);\r\n\r\n        assert_eq!(entries[0].path, PathBuf::from(\"file1.txt\"));\r\n        assert_eq!(entries[0].content, \"Content of file1.\\n\");\r\n\r\n        assert_eq!(entries[1].path, PathBuf::from(\"path/to/file2.rs\"));\r\n        assert_eq!(entries[1].content, \"// Rust code\\nfn main() {}\\n\");\r\n\r\n        assert_eq!(entries[2].path, PathBuf::from(\"another.md\"));\r\n        assert_eq!(entries[2].content, \"## Markdown Content\");\r\n    }\r\n\r\n    #[test]\r\n    fn test_parse_entry_with_empty_content() {\r\n        let bundle_content = format!(\r\n            \"{}\\n\\\r\n            {}empty_file.txt\\n\\\r\n            {}\\n\",\r\n            FILE_HEADER_SEPARATOR, FILE_PATH_PREFIX, FILE_HEADER_SEPARATOR\r\n        );\r\n        let temp_file = create_temp_bundle_file(\u0026bundle_content);\r\n        let entries = parse_bundle(temp_file.path()).unwrap();\r\n        assert_eq!(entries.len(), 1);\r\n        assert_eq!(entries[0].path, PathBuf::from(\"empty_file.txt\"));\r\n        assert_eq!(entries[0].content, \"\");\r\n    }\r\n\r\n    #[test]\r\n    fn test_error_malformed_header_missing_file_prefix() {\r\n        let bundle_content = format!(\r\n            \"{}\\n\\\r\n            Not File: path/to/file.txt\\n\\\r\n            {}\\n\\\r\n            Content\",\r\n            FILE_HEADER_SEPARATOR, FILE_HEADER_SEPARATOR\r\n        );\r\n        let temp_file = create_temp_bundle_file(\u0026bundle_content);\r\n        let result = parse_bundle(temp_file.path());\r\n        assert_specific_error(\r\n            \u0026result,\r\n            BundleValidationError::MalformedHeaderMissingFilePrefix {\r\n                line_number: 2,\r\n                header_line: \"Not File: path/to/file.txt\".to_string(),\r\n            },\r\n        );\r\n    }\r\n\r\n    #[test]\r\n    fn test_error_malformed_header_missing_separator_after_path() {\r\n        let bundle_content = format!(\r\n            \"{}\\n\\\r\n            {}path/to/file.txt\\n\\\r\n            Content without second separator\",\r\n            FILE_HEADER_SEPARATOR, FILE_PATH_PREFIX\r\n        );\r\n        let temp_file = create_temp_bundle_file(\u0026bundle_content);\r\n        let result = parse_bundle(temp_file.path());\r\n        assert_specific_error(\r\n            \u0026result,\r\n            BundleValidationError::MalformedHeaderMissingSeparatorAfterPath {\r\n                line_number: 3,\r\n                path_line: \"path/to/file.txt\".to_string(),\r\n            },\r\n        );\r\n    }\r\n\r\n    #[test]\r\n    fn test_error_path_line_interrupted_by_separator() {\r\n        let bundle_content = format!(\r\n            \"{}\\n\\\r\n            {}path/to{}file.txt\\n\\\r\n            {}\\n\\\r\n            Content\",\r\n            FILE_HEADER_SEPARATOR, FILE_PATH_PREFIX, FILE_HEADER_SEPARATOR, FILE_HEADER_SEPARATOR\r\n        );\r\n        let temp_file = create_temp_bundle_file(\u0026bundle_content);\r\n        let result = parse_bundle(temp_file.path());\r\n        assert_specific_error(\r\n            \u0026result,\r\n            BundleValidationError::MalformedHeaderPathLineInterruptedBySeparator {\r\n                line_number: 2,\r\n                path_line: format!(\"path/to{}file.txt\", FILE_HEADER_SEPARATOR),\r\n            },\r\n        );\r\n    }\r\n\r\n    #[test]\r\n    fn test_error_path_line_missing_newline() {\r\n        let bundle_content = format!(\r\n            \"{}\\n\\\r\n            {}path/to/file.txt\",\r\n            FILE_HEADER_SEPARATOR, FILE_PATH_PREFIX\r\n        );\r\n        let temp_file = create_temp_bundle_file(\u0026bundle_content);\r\n        let result = parse_bundle(temp_file.path());\r\n        assert_specific_error(\r\n            \u0026result,\r\n            BundleValidationError::MalformedHeaderPathLineMissingNewline {\r\n                line_number: 2,\r\n                path_line: \"path/to/file.txt\".to_string(),\r\n            },\r\n        );\r\n    }\r\n\r\n    #[test]\r\n    fn test_error_missing_newline_after_content_separator() {\r\n        let bundle_content = format!(\r\n            \"{}\\n\\\r\n            {}file.txt\\n\\\r\n            {}{}\",\r\n            FILE_HEADER_SEPARATOR, FILE_PATH_PREFIX, FILE_HEADER_SEPARATOR, \"NoNewlineContent\"\r\n        );\r\n        let temp_file = create_temp_bundle_file(\u0026bundle_content);\r\n        let result = parse_bundle(temp_file.path());\r\n        assert_specific_error(\r\n            \u0026result,\r\n            BundleValidationError::MalformedHeaderMissingNewlineAfterContentSeparator {\r\n                line_number: 3,\r\n                separator_line: FILE_HEADER_SEPARATOR.to_string(),\r\n            },\r\n        );\r\n    }\r\n\r\n    #[test]\r\n    fn test_error_empty_path() {\r\n        let bundle_content = format!(\r\n            \"{}\\n\\\r\n            {}\\n\\\r\n            {}\\n\\\r\n            Content\",\r\n            FILE_HEADER_SEPARATOR, FILE_PATH_PREFIX, FILE_HEADER_SEPARATOR\r\n        );\r\n        let temp_file = create_temp_bundle_file(\u0026bundle_content);\r\n        let result = parse_bundle(temp_file.path());\r\n        assert_specific_error(\u0026result, BundleValidationError::EmptyPath { line_number: 2 });\r\n    }\r\n\r\n    #[test]\r\n    fn test_error_absolute_path() {\r\n        let absolute_path_str = \"/an/absolute/path.txt\";\r\n        let bundle_content = format!(\r\n            \"{}\\n\\\r\n            {}{}\\n\\\r\n            {}\\n\\\r\n            Content\",\r\n            FILE_HEADER_SEPARATOR, FILE_PATH_PREFIX, absolute_path_str, FILE_HEADER_SEPARATOR\r\n        );\r\n        let temp_file = create_temp_bundle_file(\u0026bundle_content);\r\n        let result = parse_bundle(temp_file.path());\r\n        assert_specific_error(\r\n            \u0026result,\r\n            BundleValidationError::AbsolutePathNotAllowed {\r\n                line_number: 2,\r\n                path: absolute_path_str.to_string(),\r\n            },\r\n        );\r\n    }\r\n\r\n    #[test]\r\n    fn test_error_duplicate_path() {\r\n        let bundle_content = format!(\r\n            \"{}\\n\\\r\n            {}file.txt\\n\\\r\n            {}\\n\\\r\n            Content1\\n\\\r\n            {}\\n\\\r\n            {}file.txt\\n\\\r\n            {}\\n\\\r\n            Content2\",\r\n            FILE_HEADER_SEPARATOR,\r\n            FILE_PATH_PREFIX,\r\n            FILE_HEADER_SEPARATOR,\r\n            FILE_HEADER_SEPARATOR,\r\n            FILE_PATH_PREFIX,\r\n            FILE_HEADER_SEPARATOR\r\n        );\r\n        let temp_file = create_temp_bundle_file(\u0026bundle_content);\r\n        let result = parse_bundle(temp_file.path());\r\n        assert_specific_error(\r\n            \u0026result,\r\n            BundleValidationError::DuplicatePath {\r\n                line_number: 6,\r\n                path: \"file.txt\".to_string(),\r\n            },\r\n        );\r\n    }\r\n\r\n    #[test]\r\n    fn test_error_premature_eof_after_first_separator() {\r\n        let bundle_content = FILE_HEADER_SEPARATOR;\r\n        let temp_file = create_temp_bundle_file(bundle_content);\r\n        let result = parse_bundle(temp_file.path());\r\n        assert_specific_error(\r\n            \u0026result,\r\n            BundleValidationError::PrematureEOFBeforePathLine { line_number: 1 },\r\n        );\r\n    }\r\n\r\n    #[test]\r\n    fn test_error_premature_eof_after_file_prefix() {\r\n        let bundle_content = format!(\"{}\\n{}\", FILE_HEADER_SEPARATOR, FILE_PATH_PREFIX);\r\n        let temp_file = create_temp_bundle_file(\u0026bundle_content);\r\n        let result = parse_bundle(temp_file.path());\r\n        assert_specific_error(\r\n            \u0026result,\r\n            BundleValidationError::MalformedHeaderPathLineMissingNewline {\r\n                line_number: 2,\r\n                path_line: \"\".to_string(),\r\n            },\r\n        );\r\n    }\r\n\r\n    #[test]\r\n    fn test_error_premature_eof_after_path_line() {\r\n        let bundle_content = format!(\"{}\\n{}path.txt\", FILE_HEADER_SEPARATOR, FILE_PATH_PREFIX);\r\n        let temp_file = create_temp_bundle_file(\u0026bundle_content);\r\n        let result = parse_bundle(temp_file.path());\r\n        assert_specific_error(\r\n            \u0026result,\r\n            BundleValidationError::MalformedHeaderPathLineMissingNewline {\r\n                line_number: 2,\r\n                path_line: \"path.txt\".to_string(),\r\n            },\r\n        );\r\n    }\r\n\r\n    #[test]\r\n    fn test_error_unexpected_content_after_last_entry() {\r\n        let bundle_content = format!(\r\n            \"{}\\n\\\r\n            {}file.txt\\n\\\r\n            {}\\n\\\r\n            Content\\n\\\r\n            Some trailing garbage text.\",\r\n            FILE_HEADER_SEPARATOR, FILE_PATH_PREFIX, FILE_HEADER_SEPARATOR\r\n        );\r\n        let temp_file = create_temp_bundle_file(\u0026bundle_content);\r\n        let result = parse_bundle(temp_file.path());\r\n        assert!(result.is_ok(), \"Expected Ok, got {:?}\", result);\r\n        let entries = result.unwrap();\r\n        assert_eq!(entries.len(), 1);\r\n        assert_eq!(entries[0].path, PathBuf::from(\"file.txt\"));\r\n        assert_eq!(entries[0].content, \"Content\\nSome trailing garbage text.\");\r\n    }\r\n\r\n    #[test]\r\n    fn test_multiple_errors_reported() {\r\n        let bundle_content = format!(\r\n            \"Leading garbage.\\n\\\r\n            {}\\n\\\r\n            {}/abs/path.txt\\n\\\r\n            {}\\n\\\r\n            Content1\\n\\\r\n            {}\\n\\\r\n            {}\\n\\\r\n            {}\\n\\\r\n            Content2\\n\\\r\n            Trailing garbage.\",\r\n            FILE_HEADER_SEPARATOR,\r\n            FILE_PATH_PREFIX,\r\n            FILE_HEADER_SEPARATOR,\r\n            FILE_HEADER_SEPARATOR,\r\n            FILE_PATH_PREFIX,\r\n            FILE_HEADER_SEPARATOR\r\n        );\r\n        let temp_file = create_temp_bundle_file(\u0026bundle_content);\r\n        let result = parse_bundle(temp_file.path());\r\n\r\n        assert!(result.is_err());\r\n        if let Err(err) = result {\r\n            if let Some(bundle_parse_error) = err.downcast_ref::\u003cBundleParseError\u003e() {\r\n                assert_eq!(\r\n                    bundle_parse_error.errors.len(),\r\n                    2,\r\n                    \"Expected 2 errors, got {}. Errors: {:?}\",\r\n                    bundle_parse_error.errors.len(),\r\n                    bundle_parse_error.errors\r\n                );\r\n\r\n                assert!(\r\n                    !bundle_parse_error.errors.contains(\r\n                        \u0026BundleValidationError::ContentBeforeFirstHeader {\r\n                            line_number: 1,\r\n                            content_excerpt: \"Leading garbage.\".to_string()\r\n                        }\r\n                    ),\r\n                    \"ContentBeforeFirstHeader should now be a warning, not an error.\"\r\n                );\r\n\r\n                assert!(bundle_parse_error.errors.contains(\r\n                    \u0026BundleValidationError::AbsolutePathNotAllowed {\r\n                        line_number: 3,\r\n                        path: \"/abs/path.txt\".to_string()\r\n                    }\r\n                ));\r\n                assert!(\r\n                    bundle_parse_error\r\n                        .errors\r\n                        .contains(\u0026BundleValidationError::EmptyPath { line_number: 7 })\r\n                );\r\n            } else {\r\n                panic!(\"Error is not a BundleParseError: {:?}\", err);\r\n            }\r\n        } else {\r\n            panic!(\"Expected an error, but got Ok. Result: {:?}\", result);\r\n        }\r\n    }\r\n}\r\n","traces":[{"line":76,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":77,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":79,"address":[],"length":0,"stats":{"Line":0}},{"line":80,"address":[],"length":0,"stats":{"Line":0}},{"line":81,"address":[],"length":0,"stats":{"Line":0}},{"line":82,"address":[],"length":0,"stats":{"Line":0}},{"line":84,"address":[],"length":0,"stats":{"Line":0}},{"line":87,"address":[],"length":0,"stats":{"Line":0}},{"line":88,"address":[],"length":0,"stats":{"Line":0}},{"line":89,"address":[],"length":0,"stats":{"Line":0}},{"line":90,"address":[],"length":0,"stats":{"Line":0}},{"line":92,"address":[],"length":0,"stats":{"Line":0}},{"line":95,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":96,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":97,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":98,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":100,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":103,"address":[],"length":0,"stats":{"Line":0}},{"line":104,"address":[],"length":0,"stats":{"Line":0}},{"line":105,"address":[],"length":0,"stats":{"Line":0}},{"line":106,"address":[],"length":0,"stats":{"Line":0}},{"line":108,"address":[],"length":0,"stats":{"Line":0}},{"line":111,"address":[],"length":0,"stats":{"Line":0}},{"line":112,"address":[],"length":0,"stats":{"Line":0}},{"line":113,"address":[],"length":0,"stats":{"Line":0}},{"line":114,"address":[],"length":0,"stats":{"Line":0}},{"line":116,"address":[],"length":0,"stats":{"Line":0}},{"line":119,"address":[],"length":0,"stats":{"Line":0}},{"line":120,"address":[],"length":0,"stats":{"Line":0}},{"line":121,"address":[],"length":0,"stats":{"Line":0}},{"line":122,"address":[],"length":0,"stats":{"Line":0}},{"line":124,"address":[],"length":0,"stats":{"Line":0}},{"line":126,"address":[],"length":0,"stats":{"Line":0}},{"line":127,"address":[],"length":0,"stats":{"Line":0}},{"line":129,"address":[],"length":0,"stats":{"Line":0}},{"line":130,"address":[],"length":0,"stats":{"Line":0}},{"line":132,"address":[],"length":0,"stats":{"Line":0}},{"line":134,"address":[],"length":0,"stats":{"Line":0}},{"line":135,"address":[],"length":0,"stats":{"Line":0}},{"line":137,"address":[],"length":0,"stats":{"Line":0}},{"line":138,"address":[],"length":0,"stats":{"Line":0}},{"line":140,"address":[],"length":0,"stats":{"Line":0}},{"line":142,"address":[],"length":0,"stats":{"Line":0}},{"line":143,"address":[],"length":0,"stats":{"Line":0}},{"line":144,"address":[],"length":0,"stats":{"Line":0}},{"line":146,"address":[],"length":0,"stats":{"Line":0}},{"line":150,"address":[],"length":0,"stats":{"Line":0}},{"line":151,"address":[],"length":0,"stats":{"Line":0}},{"line":152,"address":[],"length":0,"stats":{"Line":0}},{"line":153,"address":[],"length":0,"stats":{"Line":0}},{"line":155,"address":[],"length":0,"stats":{"Line":0}},{"line":158,"address":[],"length":0,"stats":{"Line":0}},{"line":159,"address":[],"length":0,"stats":{"Line":0}},{"line":160,"address":[],"length":0,"stats":{"Line":0}},{"line":161,"address":[],"length":0,"stats":{"Line":0}},{"line":163,"address":[],"length":0,"stats":{"Line":0}},{"line":176,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":177,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":178,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":180,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":182,"address":[],"length":0,"stats":{"Line":216172782113783808}},{"line":183,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":185,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":194,"address":[],"length":0,"stats":{"Line":2377900603251621888}},{"line":195,"address":[],"length":0,"stats":{"Line":4755801206503243776}},{"line":196,"address":[],"length":0,"stats":{"Line":4755801206503243776}},{"line":199,"address":[],"length":0,"stats":{"Line":216172782113783808}},{"line":202,"address":[],"length":0,"stats":{"Line":2161727821137838080}},{"line":203,"address":[],"length":0,"stats":{"Line":2161727821137838080}},{"line":204,"address":[],"length":0,"stats":{"Line":2161727821137838080}},{"line":206,"address":[],"length":0,"stats":{"Line":2161727821137838080}},{"line":208,"address":[],"length":0,"stats":{"Line":2161727821137838080}},{"line":209,"address":[],"length":0,"stats":{"Line":2522015791327477760}},{"line":210,"address":[],"length":0,"stats":{"Line":2522015791327477760}},{"line":211,"address":[],"length":0,"stats":{"Line":2161727821137838080}},{"line":212,"address":[],"length":0,"stats":{"Line":2089670227099910144}},{"line":214,"address":[],"length":0,"stats":{"Line":1945555039024054272}},{"line":215,"address":[],"length":0,"stats":{"Line":1945555039024054272}},{"line":222,"address":[],"length":0,"stats":{"Line":1945555039024054272}},{"line":223,"address":[],"length":0,"stats":{"Line":144115188075855872}},{"line":224,"address":[],"length":0,"stats":{"Line":144115188075855872}},{"line":225,"address":[],"length":0,"stats":{"Line":144115188075855872}},{"line":230,"address":[],"length":0,"stats":{"Line":144115188075855872}},{"line":231,"address":[],"length":0,"stats":{"Line":144115188075855872}},{"line":232,"address":[],"length":0,"stats":{"Line":288230376151711744}},{"line":233,"address":[],"length":0,"stats":{"Line":144115188075855872}},{"line":234,"address":[],"length":0,"stats":{"Line":144115188075855872}},{"line":235,"address":[],"length":0,"stats":{"Line":144115188075855872}},{"line":238,"address":[],"length":0,"stats":{"Line":0}},{"line":239,"address":[],"length":0,"stats":{"Line":0}},{"line":240,"address":[],"length":0,"stats":{"Line":0}},{"line":245,"address":[],"length":0,"stats":{"Line":432345564227567616}},{"line":246,"address":[],"length":0,"stats":{"Line":216172782113783808}},{"line":248,"address":[],"length":0,"stats":{"Line":432345564227567616}},{"line":249,"address":[],"length":0,"stats":{"Line":216172782113783808}},{"line":258,"address":[],"length":0,"stats":{"Line":144115188075855872}},{"line":262,"address":[],"length":0,"stats":{"Line":4755801206503243776}},{"line":263,"address":[],"length":0,"stats":{"Line":2594073385365405696}},{"line":264,"address":[],"length":0,"stats":{"Line":2594073385365405696}},{"line":266,"address":[],"length":0,"stats":{"Line":2594073385365405696}},{"line":267,"address":[],"length":0,"stats":{"Line":2522015791327477760}},{"line":268,"address":[],"length":0,"stats":{"Line":2522015791327477760}},{"line":269,"address":[],"length":0,"stats":{"Line":2522015791327477760}},{"line":270,"address":[],"length":0,"stats":{"Line":2522015791327477760}},{"line":272,"address":[],"length":0,"stats":{"Line":2522015791327477760}},{"line":273,"address":[],"length":0,"stats":{"Line":2522015791327477760}},{"line":274,"address":[],"length":0,"stats":{"Line":0}},{"line":275,"address":[],"length":0,"stats":{"Line":0}},{"line":276,"address":[],"length":0,"stats":{"Line":0}},{"line":277,"address":[],"length":0,"stats":{"Line":0}},{"line":278,"address":[],"length":0,"stats":{"Line":0}},{"line":279,"address":[],"length":0,"stats":{"Line":0}},{"line":280,"address":[],"length":0,"stats":{"Line":0}},{"line":281,"address":[],"length":0,"stats":{"Line":0}},{"line":282,"address":[],"length":0,"stats":{"Line":0}},{"line":283,"address":[],"length":0,"stats":{"Line":0}},{"line":284,"address":[],"length":0,"stats":{"Line":0}},{"line":289,"address":[],"length":0,"stats":{"Line":2522015791327477760}},{"line":291,"address":[],"length":0,"stats":{"Line":2522015791327477760}},{"line":292,"address":[],"length":0,"stats":{"Line":2522015791327477760}},{"line":293,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":294,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":296,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":297,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":299,"address":[],"length":0,"stats":{"Line":2449958197289549824}},{"line":300,"address":[],"length":0,"stats":{"Line":0}},{"line":301,"address":[],"length":0,"stats":{"Line":0}},{"line":302,"address":[],"length":0,"stats":{"Line":0}},{"line":303,"address":[],"length":0,"stats":{"Line":0}},{"line":304,"address":[],"length":0,"stats":{"Line":0}},{"line":305,"address":[],"length":0,"stats":{"Line":0}},{"line":306,"address":[],"length":0,"stats":{"Line":0}},{"line":307,"address":[],"length":0,"stats":{"Line":0}},{"line":308,"address":[],"length":0,"stats":{"Line":0}},{"line":311,"address":[],"length":0,"stats":{"Line":0}},{"line":312,"address":[],"length":0,"stats":{"Line":0}},{"line":314,"address":[],"length":0,"stats":{"Line":2449958197289549824}},{"line":316,"address":[],"length":0,"stats":{"Line":2449958197289549824}},{"line":317,"address":[],"length":0,"stats":{"Line":2449958197289549824}},{"line":318,"address":[],"length":0,"stats":{"Line":0}},{"line":319,"address":[],"length":0,"stats":{"Line":0}},{"line":321,"address":[],"length":0,"stats":{"Line":0}},{"line":322,"address":[],"length":0,"stats":{"Line":0}},{"line":324,"address":[],"length":0,"stats":{"Line":2449958197289549824}},{"line":325,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":326,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":327,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":328,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":329,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":330,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":331,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":332,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":335,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":336,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":339,"address":[],"length":0,"stats":{"Line":2377900603251621888}},{"line":340,"address":[],"length":0,"stats":{"Line":2377900603251621888}},{"line":341,"address":[],"length":0,"stats":{"Line":2377900603251621888}},{"line":343,"address":[],"length":0,"stats":{"Line":4467570830351532032}},{"line":344,"address":[],"length":0,"stats":{"Line":2161727821137838080}},{"line":345,"address":[],"length":0,"stats":{"Line":2161727821137838080}},{"line":346,"address":[],"length":0,"stats":{"Line":2161727821137838080}},{"line":348,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":349,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":350,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":352,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":353,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":358,"address":[],"length":0,"stats":{"Line":216172782113783808}},{"line":359,"address":[],"length":0,"stats":{"Line":216172782113783808}},{"line":360,"address":[],"length":0,"stats":{"Line":216172782113783808}},{"line":361,"address":[],"length":0,"stats":{"Line":216172782113783808}},{"line":362,"address":[],"length":0,"stats":{"Line":216172782113783808}},{"line":363,"address":[],"length":0,"stats":{"Line":216172782113783808}},{"line":364,"address":[],"length":0,"stats":{"Line":216172782113783808}},{"line":365,"address":[],"length":0,"stats":{"Line":216172782113783808}},{"line":366,"address":[],"length":0,"stats":{"Line":216172782113783808}},{"line":369,"address":[],"length":0,"stats":{"Line":216172782113783808}},{"line":370,"address":[],"length":0,"stats":{"Line":216172782113783808}},{"line":375,"address":[],"length":0,"stats":{"Line":144115188075855872}},{"line":376,"address":[],"length":0,"stats":{"Line":144115188075855872}},{"line":377,"address":[],"length":0,"stats":{"Line":144115188075855872}},{"line":387,"address":[],"length":0,"stats":{"Line":1945555039024054272}},{"line":389,"address":[],"length":0,"stats":{"Line":1801439850948198400}},{"line":390,"address":[],"length":0,"stats":{"Line":1945555039024054272}},{"line":395,"address":[],"length":0,"stats":{"Line":144115188075855872}},{"line":396,"address":[],"length":0,"stats":{"Line":144115188075855872}},{"line":397,"address":[],"length":0,"stats":{"Line":144115188075855872}},{"line":398,"address":[],"length":0,"stats":{"Line":144115188075855872}},{"line":400,"address":[],"length":0,"stats":{"Line":144115188075855872}},{"line":405,"address":[],"length":0,"stats":{"Line":1873497444986126336}},{"line":406,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":407,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":408,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":410,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":420,"address":[],"length":0,"stats":{"Line":0}},{"line":421,"address":[],"length":0,"stats":{"Line":0}},{"line":422,"address":[],"length":0,"stats":{"Line":0}},{"line":423,"address":[],"length":0,"stats":{"Line":0}},{"line":426,"address":[],"length":0,"stats":{"Line":0}},{"line":427,"address":[],"length":0,"stats":{"Line":0}},{"line":429,"address":[],"length":0,"stats":{"Line":2089670227099910144}},{"line":430,"address":[],"length":0,"stats":{"Line":144115188075855872}},{"line":431,"address":[],"length":0,"stats":{"Line":144115188075855872}},{"line":432,"address":[],"length":0,"stats":{"Line":144115188075855872}},{"line":433,"address":[],"length":0,"stats":{"Line":144115188075855872}},{"line":436,"address":[],"length":0,"stats":{"Line":144115188075855872}},{"line":437,"address":[],"length":0,"stats":{"Line":144115188075855872}},{"line":440,"address":[],"length":0,"stats":{"Line":1945555039024054272}},{"line":441,"address":[],"length":0,"stats":{"Line":1945555039024054272}},{"line":442,"address":[],"length":0,"stats":{"Line":0}},{"line":443,"address":[],"length":0,"stats":{"Line":0}},{"line":444,"address":[],"length":0,"stats":{"Line":0}},{"line":445,"address":[],"length":0,"stats":{"Line":0}},{"line":448,"address":[],"length":0,"stats":{"Line":0}},{"line":449,"address":[],"length":0,"stats":{"Line":0}},{"line":451,"address":[],"length":0,"stats":{"Line":1945555039024054272}},{"line":452,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":453,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":454,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":455,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":456,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":457,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":458,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":460,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":461,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":464,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":465,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":468,"address":[],"length":0,"stats":{"Line":1873497444986126336}},{"line":470,"address":[],"length":0,"stats":{"Line":1873497444986126336}},{"line":471,"address":[],"length":0,"stats":{"Line":1873497444986126336}},{"line":472,"address":[],"length":0,"stats":{"Line":1873497444986126336}},{"line":473,"address":[],"length":0,"stats":{"Line":2305843009213693952}},{"line":474,"address":[],"length":0,"stats":{"Line":1441151880758558720}},{"line":478,"address":[],"length":0,"stats":{"Line":1513209474796486656}},{"line":479,"address":[],"length":0,"stats":{"Line":1513209474796486656}},{"line":485,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":486,"address":[],"length":0,"stats":{"Line":144115188075855872}},{"line":487,"address":[],"length":0,"stats":{"Line":0}},{"line":488,"address":[],"length":0,"stats":{"Line":0}},{"line":489,"address":[],"length":0,"stats":{"Line":0}},{"line":490,"address":[],"length":0,"stats":{"Line":0}},{"line":491,"address":[],"length":0,"stats":{"Line":0}},{"line":492,"address":[],"length":0,"stats":{"Line":0}},{"line":493,"address":[],"length":0,"stats":{"Line":0}},{"line":494,"address":[],"length":0,"stats":{"Line":0}},{"line":495,"address":[],"length":0,"stats":{"Line":0}},{"line":496,"address":[],"length":0,"stats":{"Line":0}},{"line":497,"address":[],"length":0,"stats":{"Line":0}},{"line":498,"address":[],"length":0,"stats":{"Line":0}},{"line":508,"address":[],"length":0,"stats":{"Line":1008806316530991104}},{"line":509,"address":[],"length":0,"stats":{"Line":1008806316530991104}},{"line":513,"address":[],"length":0,"stats":{"Line":1152921504606846976}}],"covered":149,"coverable":251},{"path":["E:","\\","git","codesprout","tests","integration_tests.rs"],"content":"use assert_cmd::prelude::*;\r\nuse predicates::prelude::*;\r\nuse std::fs;\r\nuse std::io::Write;\r\nuse std::process::Command;\r\nuse tempfile::NamedTempFile;\r\nuse tempfile::TempDir;\r\n\r\nfn create_temp_bundle_file(content: \u0026str) -\u003e NamedTempFile {\r\n    let mut file = NamedTempFile::new().expect(\"Failed to create temp bundle file\");\r\n    write!(file, \"{}\", content).expect(\"Failed to write to temp bundle file\");\r\n    file\r\n}\r\n\r\n#[test]\r\nfn test_valid_bundle_simple_structure() -\u003e Result\u003c(), Box\u003cdyn std::error::Error\u003e\u003e {\r\n    let bundle_content = \"================================================\\nFile: file1.txt\\n================================================\\nHello from file1\\n================================================\\nFile: file2.txt\\n================================================\\nContent of file2\\n\";\r\n    let bundle_file = create_temp_bundle_file(bundle_content);\r\n    let output_dir = TempDir::new()?;\r\n\r\n    let mut cmd = Command::cargo_bin(\"sprout\")?;\r\n    cmd.arg(bundle_file.path()).arg(output_dir.path());\r\n\r\n    cmd.assert()\r\n        .success()\r\n        .stdout(predicate::str::contains(format!(\r\n            \"Successfully sprouted 2 file(s) from '{}' to '{}'.\",\r\n            bundle_file.path().display(),\r\n            output_dir.path().display()\r\n        )));\r\n\r\n    let file1_path = output_dir.path().join(\"file1.txt\");\r\n    let file2_path = output_dir.path().join(\"file2.txt\");\r\n\r\n    assert!(file1_path.exists());\r\n    assert_eq!(fs::read_to_string(file1_path)?, \"Hello from file1\\n\");\r\n\r\n    assert!(file2_path.exists());\r\n    assert_eq!(fs::read_to_string(file2_path)?, \"Content of file2\\n\");\r\n\r\n    Ok(())\r\n}\r\n\r\n#[test]\r\nfn test_valid_bundle_nested_structure() -\u003e Result\u003c(), Box\u003cdyn std::error::Error\u003e\u003e {\r\n    let bundle_content = \"================================================\\nFile: dir1/file1.txt\\n================================================\\nNested content\\n================================================\\nFile: dir1/dir2/file2.txt\\n================================================\\nDeeply nested\\n\";\r\n    let bundle_file = create_temp_bundle_file(bundle_content);\r\n    let output_dir = TempDir::new()?;\r\n\r\n    let mut cmd = Command::cargo_bin(\"sprout\")?;\r\n    cmd.arg(bundle_file.path()).arg(output_dir.path());\r\n\r\n    cmd.assert()\r\n        .success()\r\n        .stdout(predicate::str::contains(format!(\r\n            \"Successfully sprouted 2 file(s) from '{}' to '{}'.\",\r\n            bundle_file.path().display(),\r\n            output_dir.path().display()\r\n        )));\r\n\r\n    let file1_path = output_dir.path().join(\"dir1/file1.txt\");\r\n    let file2_path = output_dir.path().join(\"dir1/dir2/file2.txt\");\r\n\r\n    assert!(file1_path.exists());\r\n    assert_eq!(fs::read_to_string(file1_path)?, \"Nested content\\n\");\r\n\r\n    assert!(file2_path.exists());\r\n    assert_eq!(fs::read_to_string(file2_path)?, \"Deeply nested\\n\");\r\n\r\n    Ok(())\r\n}\r\n\r\n#[test]\r\nfn test_malformed_bundle_file() -\u003e Result\u003c(), Box\u003cdyn std::error::Error\u003e\u003e {\r\n    let bundle_content = \"================================================\\nFile: file1.txt\\nThis is not a valid header\\nContent\\n\";\r\n    let bundle_file = create_temp_bundle_file(bundle_content);\r\n    let output_dir = TempDir::new()?;\r\n\r\n    let mut cmd = Command::cargo_bin(\"sprout\")?;\r\n    cmd.arg(bundle_file.path()).arg(output_dir.path());\r\n\r\n    cmd.assert().failure().stderr(\r\n        predicate::str::contains(\"Bundle parsing failed\")\r\n            .and(predicate::str::contains(\"Malformed file header\")),\r\n    );\r\n\r\n    assert!(fs::read_dir(output_dir.path())?.next().is_none());\r\n\r\n    Ok(())\r\n}\r\n\r\n#[test]\r\nfn test_output_file_collision() -\u003e Result\u003c(), Box\u003cdyn std::error::Error\u003e\u003e {\r\n    let bundle_content = \"================================================\\nFile: existing_file.txt\\n================================================\\nSome content\\n\";\r\n    let bundle_file = create_temp_bundle_file(bundle_content);\r\n    let output_dir = TempDir::new()?;\r\n\r\n    let conflicting_file_path = output_dir.path().join(\"existing_file.txt\");\r\n    fs::write(\u0026conflicting_file_path, \"Original content\")?;\r\n\r\n    let mut cmd = Command::cargo_bin(\"sprout\")?;\r\n    cmd.arg(bundle_file.path()).arg(output_dir.path());\r\n\r\n    cmd.assert().failure().stderr(\r\n        predicate::str::contains(\"Output path collision detected\").and(predicate::str::contains(\r\n            conflicting_file_path.to_str().unwrap(),\r\n        )),\r\n    );\r\n\r\n    assert_eq!(\r\n        fs::read_to_string(conflicting_file_path)?,\r\n        \"Original content\"\r\n    );\r\n\r\n    Ok(())\r\n}\r\n\r\n#[test]\r\nfn test_empty_bundle_file() -\u003e Result\u003c(), Box\u003cdyn std::error::Error\u003e\u003e {\r\n    let bundle_file = create_temp_bundle_file(\"\");\r\n    let output_dir = TempDir::new()?;\r\n\r\n    let mut cmd = Command::cargo_bin(\"sprout\")?;\r\n    cmd.arg(bundle_file.path()).arg(output_dir.path());\r\n\r\n    cmd.assert()\r\n        .success()\r\n        .stdout(predicate::str::contains(format!(\r\n            \"Bundle file '{}' is empty or contains no valid entries. Nothing to sprout.\",\r\n            bundle_file.path().display()\r\n        )));\r\n\r\n    assert!(fs::read_dir(output_dir.path())?.next().is_none());\r\n    Ok(())\r\n}\r\n\r\n#[test]\r\nfn test_output_to_current_directory_default() -\u003e Result\u003c(), Box\u003cdyn std::error::Error\u003e\u003e {\r\n    let bundle_content = \"================================================\\nFile: default_dir_file.txt\\n================================================\\nDefault dir test\\n\";\r\n    let bundle_file = create_temp_bundle_file(bundle_content);\r\n\r\n    let current_dir_scope = TempDir::new()?;\r\n\r\n    let mut cmd = Command::cargo_bin(\"sprout\")?;\r\n    cmd.current_dir(current_dir_scope.path())\r\n        .arg(bundle_file.path());\r\n\r\n    cmd.assert()\r\n        .success()\r\n        .stdout(predicate::str::contains(format!(\r\n            \"Successfully sprouted 1 file(s) from '{}' to '{}'.\",\r\n            bundle_file.path().display(),\r\n            \".\"\r\n        )));\r\n\r\n    let file_path = current_dir_scope.path().join(\"default_dir_file.txt\");\r\n    assert!(file_path.exists());\r\n    assert_eq!(fs::read_to_string(file_path)?, \"Default dir test\\n\");\r\n\r\n    Ok(())\r\n}\r\n\r\n#[test]\r\nfn test_output_to_specified_directory_via_positional_arg() -\u003e Result\u003c(), Box\u003cdyn std::error::Error\u003e\u003e\r\n{\r\n    let bundle_content = \"================================================\\nFile: specified_pos_file.txt\\n================================================\\nSpecified dir test - positional\\n\";\r\n    let bundle_file = create_temp_bundle_file(bundle_content);\r\n    let output_dir = TempDir::new()?;\r\n\r\n    let mut cmd = Command::cargo_bin(\"sprout\")?;\r\n    cmd.arg(bundle_file.path()).arg(output_dir.path());\r\n\r\n    cmd.assert()\r\n        .success()\r\n        .stdout(predicate::str::contains(format!(\r\n            \"Successfully sprouted 1 file(s) from '{}' to '{}'.\",\r\n            bundle_file.path().display(),\r\n            output_dir.path().display()\r\n        )));\r\n\r\n    let file_path = output_dir.path().join(\"specified_pos_file.txt\");\r\n    assert!(file_path.exists());\r\n    assert_eq!(\r\n        fs::read_to_string(file_path)?,\r\n        \"Specified dir test - positional\\n\"\r\n    );\r\n\r\n    Ok(())\r\n}\r\n\r\n#[test]\r\nfn test_output_to_specified_directory_via_o_flag() -\u003e Result\u003c(), Box\u003cdyn std::error::Error\u003e\u003e {\r\n    let bundle_content = \"================================================\\nFile: specified_flag_file.txt\\n================================================\\nSpecified dir test - flag\\n\";\r\n    let bundle_file = create_temp_bundle_file(bundle_content);\r\n    let output_dir = TempDir::new()?;\r\n\r\n    let mut cmd = Command::cargo_bin(\"sprout\")?;\r\n    cmd.arg(bundle_file.path()).arg(\"-o\").arg(output_dir.path());\r\n\r\n    cmd.assert()\r\n        .success()\r\n        .stdout(predicate::str::contains(format!(\r\n            \"Successfully sprouted 1 file(s) from '{}' to '{}'.\",\r\n            bundle_file.path().display(),\r\n            output_dir.path().display()\r\n        )));\r\n\r\n    let file_path = output_dir.path().join(\"specified_flag_file.txt\");\r\n    assert!(file_path.exists());\r\n    assert_eq!(\r\n        fs::read_to_string(file_path)?,\r\n        \"Specified dir test - flag\\n\"\r\n    );\r\n\r\n    Ok(())\r\n}\r\n\r\n#[test]\r\nfn test_input_via_i_flag() -\u003e Result\u003c(), Box\u003cdyn std::error::Error\u003e\u003e {\r\n    let bundle_content = \"================================================\\nFile: input_flag_test.txt\\n================================================\\nInput via -i flag\\n\";\r\n    let bundle_file = create_temp_bundle_file(bundle_content);\r\n    let output_dir = TempDir::new()?;\r\n\r\n    let mut cmd = Command::cargo_bin(\"sprout\")?;\r\n    cmd.arg(\"-i\")\r\n        .arg(bundle_file.path())\r\n        .arg(\"-o\")\r\n        .arg(output_dir.path());\r\n\r\n    cmd.assert()\r\n        .success()\r\n        .stdout(predicate::str::contains(format!(\r\n            \"Successfully sprouted 1 file(s) from '{}' to '{}'.\",\r\n            bundle_file.path().display(),\r\n            output_dir.path().display()\r\n        )));\r\n\r\n    let file_path = output_dir.path().join(\"input_flag_test.txt\");\r\n    assert!(file_path.exists());\r\n    assert_eq!(fs::read_to_string(file_path)?, \"Input via -i flag\\n\");\r\n\r\n    Ok(())\r\n}\r\n\r\n#[test]\r\nfn test_missing_input_bundle() -\u003e Result\u003c(), Box\u003cdyn std::error::Error\u003e\u003e {\r\n    let mut cmd = Command::cargo_bin(\"sprout\")?;\r\n    cmd.assert().failure().stderr(\r\n        predicate::str::contains(\"error: the following required arguments were not provided:\")\r\n            .and(predicate::str::contains(\"\u003cBUNDLE_FILE_PATH\u003e\")),\r\n    );\r\n    Ok(())\r\n}\r\n\r\n#[test]\r\nfn test_bundle_with_empty_file_content() -\u003e Result\u003c(), Box\u003cdyn std::error::Error\u003e\u003e {\r\n    let bundle_content = \"================================================\\nFile: empty_file.txt\\n================================================\\n\";\r\n    let bundle_file = create_temp_bundle_file(bundle_content);\r\n    let output_dir = TempDir::new()?;\r\n\r\n    let mut cmd = Command::cargo_bin(\"sprout\")?;\r\n    cmd.arg(bundle_file.path()).arg(output_dir.path());\r\n\r\n    cmd.assert()\r\n        .success()\r\n        .stdout(predicate::str::contains(format!(\r\n            \"Successfully sprouted 1 file(s) from '{}' to '{}'.\",\r\n            bundle_file.path().display(),\r\n            output_dir.path().display()\r\n        )));\r\n\r\n    let file_path = output_dir.path().join(\"empty_file.txt\");\r\n    assert!(file_path.exists());\r\n    assert_eq!(fs::read_to_string(file_path)?, \"\");\r\n\r\n    Ok(())\r\n}\r\n\r\n#[test]\r\nfn test_force_overwrite_existing_file() -\u003e Result\u003c(), Box\u003cdyn std::error::Error\u003e\u003e {\r\n    let bundle_content = \"================================================\\nFile: overwrite_me.txt\\n================================================\\nNew Content\\n\";\r\n    let bundle_file = create_temp_bundle_file(bundle_content);\r\n    let output_dir = TempDir::new()?;\r\n    let target_file_path = output_dir.path().join(\"overwrite_me.txt\");\r\n\r\n    // Create the file initially\r\n    fs::write(\u0026target_file_path, \"Old Content\")?;\r\n    assert_eq!(fs::read_to_string(\u0026target_file_path)?, \"Old Content\");\r\n\r\n    let mut cmd = Command::cargo_bin(\"sprout\")?;\r\n    cmd.arg(bundle_file.path())\r\n        .arg(output_dir.path())\r\n        .arg(\"--force\");\r\n\r\n    cmd.assert()\r\n        .success()\r\n        .stdout(predicate::str::contains(format!(\r\n            \"Successfully sprouted 1 file(s) from '{}' to '{}'. (files overwritten if necessary)\",\r\n            bundle_file.path().display(),\r\n            output_dir.path().display()\r\n        )));\r\n\r\n    assert!(target_file_path.exists());\r\n    assert_eq!(fs::read_to_string(target_file_path)?, \"New Content\\n\");\r\n\r\n    Ok(())\r\n}\r\n\r\n#[test]\r\nfn test_force_overwrite_existing_file_short_flag() -\u003e Result\u003c(), Box\u003cdyn std::error::Error\u003e\u003e {\r\n    let bundle_content = \"================================================\\nFile: overwrite_me_short.txt\\n================================================\\nNew Content Short\\n\";\r\n    let bundle_file = create_temp_bundle_file(bundle_content);\r\n    let output_dir = TempDir::new()?;\r\n    let target_file_path = output_dir.path().join(\"overwrite_me_short.txt\");\r\n\r\n    // Create the file initially\r\n    fs::write(\u0026target_file_path, \"Old Content Short\")?;\r\n    assert_eq!(fs::read_to_string(\u0026target_file_path)?, \"Old Content Short\");\r\n\r\n    let mut cmd = Command::cargo_bin(\"sprout\")?;\r\n    cmd.arg(bundle_file.path()).arg(output_dir.path()).arg(\"-f\"); // Short flag for force\r\n\r\n    cmd.assert()\r\n        .success()\r\n        .stdout(predicate::str::contains(format!(\r\n            \"Successfully sprouted 1 file(s) from '{}' to '{}'. (files overwritten if necessary)\",\r\n            bundle_file.path().display(),\r\n            output_dir.path().display()\r\n        )));\r\n\r\n    assert!(target_file_path.exists());\r\n    assert_eq!(fs::read_to_string(target_file_path)?, \"New Content Short\\n\");\r\n\r\n    Ok(())\r\n}\r\n\r\n#[test]\r\nfn test_force_still_fails_if_parent_is_file() -\u003e Result\u003c(), Box\u003cdyn std::error::Error\u003e\u003e {\r\n    let bundle_content = \"================================================\\nFile: existing_file_as_parent/new_child.txt\\n================================================\\nShould not be created\\n\";\r\n    let bundle_file = create_temp_bundle_file(bundle_content);\r\n    let output_dir = TempDir::new()?;\r\n\r\n    // Create a file that would be a parent directory\r\n    let conflicting_parent_path = output_dir.path().join(\"existing_file_as_parent\");\r\n    fs::write(\u0026conflicting_parent_path, \"I am a file.\")?;\r\n\r\n    let mut cmd = Command::cargo_bin(\"sprout\")?;\r\n    cmd.arg(bundle_file.path())\r\n        .arg(output_dir.path())\r\n        .arg(\"--force\");\r\n\r\n    cmd.assert().failure().stderr(\r\n        predicate::str::contains(\"Failed to create parent directory\")\r\n            .or(\r\n                // Error from create_dir_all\r\n                predicate::str::contains(\"its parent\")\r\n                    .and(predicate::str::contains(\"is an existing file\")), // Error from bundler.rs explicit check\r\n            )\r\n            .or(\r\n                predicate::str::contains(\"Failed to write file\"), // Error from fs::write if parent is a file\r\n            ),\r\n    );\r\n\r\n    // Ensure original file is untouched and no new file/directory was created under/as it\r\n    assert_eq!(\r\n        fs::read_to_string(\u0026conflicting_parent_path)?,\r\n        \"I am a file.\"\r\n    );\r\n    assert!(\r\n        !output_dir\r\n            .path()\r\n            .join(\"existing_file_as_parent/new_child.txt\")\r\n            .exists()\r\n    );\r\n    assert!(conflicting_parent_path.is_file());\r\n\r\n    Ok(())\r\n}\r\n","traces":[],"covered":0,"coverable":0}]};
        var previousData = {"files":[{"path":["E:","\\","git","codesprout","src","bundler.rs"],"content":"// src/bundler.rs\r\n// Module for file/directory creation and output logic\r\n\r\nuse crate::parser::ParsedEntry;\r\nuse anyhow::{Context, Result};\r\nuse std::{\r\n    fs,\r\n    path::{Path, PathBuf},\r\n};\r\n\r\n/// Creates directories and files based on the parsed bundle entries.\r\n///\r\n/// This function is called only if bundle parsing and collision checks pass.\r\n/// For each `ParsedEntry`:\r\n///   - Resolves the full absolute path for the new file.\r\n///   - Ensures its parent directory exists using `std::fs::create_dir_all(parent_path)`.\r\n///   - Writes the `entry.content` to the file path using `std::fs::write`.\r\n///\r\n/// Handles potential I/O errors during directory/file creation gracefully, returning an `anyhow::Error`.\r\n/// If `force` is true, existing files will be overwritten.\r\npub fn create_files_from_bundle(\r\n    entries: \u0026[ParsedEntry],\r\n    output_dir: \u0026Path,\r\n    _force: bool, // Indicate unused variable, logic is handled by skipping collision check\r\n) -\u003e Result\u003c()\u003e {\r\n    for entry in entries {\r\n        let full_target_path = output_dir.join(\u0026entry.path);\r\n\r\n        // If forcing, we don't care if the file exists, but we still need to ensure parent dirs are there.\r\n        // If not forcing, collision check should have already happened.\r\n        if let Some(parent_path) = full_target_path.parent() {\r\n            if !parent_path.exists() {\r\n                fs::create_dir_all(parent_path).with_context(|| {\r\n                    format!(\"Failed to create parent directory: {:?}\", parent_path)\r\n                })?;\r\n            } else if parent_path.is_file() {\r\n                // This case should ideally be caught by check_for_collisions if not forcing.\r\n                // If forcing, and a parent path component is a file, fs::write will fail later.\r\n                // This is a safeguard or clarity, fs::write would fail anyway.\r\n                return Err(anyhow::anyhow!(\r\n                    \"Cannot create file {:?}, its parent {:?} is an existing file.\",\r\n                    full_target_path,\r\n                    parent_path\r\n                ));\r\n            }\r\n        }\r\n\r\n        // fs::write will overwrite if the path exists and is a file.\r\n        // If path is a directory, fs::write will fail, which is correct.\r\n        fs::write(\u0026full_target_path, \u0026entry.content)\r\n            .with_context(|| format!(\"Failed to write file: {:?}\", full_target_path))?;\r\n    }\r\n    Ok(())\r\n}\r\n\r\n/// Checks for path collisions in the output directory.\r\n///\r\n/// For each `ParsedEntry`, it constructs the full target path by joining\r\n/// `output_dir` and `entry.path`. It then checks if this full target path\r\n/// already exists. If any collisions are detected, it returns an `anyhow::Error`\r\n/// detailing all collisions.\r\npub fn check_for_collisions(entries: \u0026[ParsedEntry], output_dir: \u0026Path) -\u003e Result\u003c()\u003e {\r\n    let mut collisions = Vec::new();\r\n\r\n    for entry in entries {\r\n        let target_path = output_dir.join(\u0026entry.path);\r\n        if target_path.exists() {\r\n            collisions.push(target_path);\r\n        } else {\r\n            let mut current_check_path = PathBuf::new();\r\n            for component in entry\r\n                .path\r\n                .parent()\r\n                .unwrap_or_else(|| Path::new(\"\"))\r\n                .components()\r\n            {\r\n                current_check_path.push(component);\r\n                let full_component_path = output_dir.join(\u0026current_check_path);\r\n                if full_component_path.is_file()\r\n                    \u0026\u0026 entry\r\n                        .path\r\n                        .strip_prefix(\u0026current_check_path)\r\n                        .is_ok_and(|p| !p.as_os_str().is_empty())\r\n                {\r\n                    collisions.push(full_component_path);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if !collisions.is_empty() {\r\n        let collision_details = collisions\r\n            .iter()\r\n            .map(|p| format!(\"  - {}\", p.display()))\r\n            .collect::\u003cVec\u003cString\u003e\u003e()\r\n            .join(\"\\n\");\r\n        return Err(anyhow::anyhow!(\r\n            \"Output path collision detected. The following paths already exist or conflict with directory creation:\\n{}\",\r\n            collision_details\r\n        ));\r\n    }\r\n\r\n    Ok(())\r\n}\r\n\r\n#[cfg(test)]\r\nmod tests {\r\n    use super::*;\r\n    use crate::parser::ParsedEntry;\r\n    use std::fs::{self, File};\r\n    use tempfile::tempdir;\r\n\r\n    fn create_parsed_entry(path_str: \u0026str, content_str: \u0026str) -\u003e ParsedEntry {\r\n        ParsedEntry {\r\n            path: PathBuf::from(path_str),\r\n            content: String::from(content_str),\r\n        }\r\n    }\r\n\r\n    #[test]\r\n    fn test_check_for_collisions_no_collision() {\r\n        let dir = tempdir().unwrap();\r\n        let output_dir = dir.path();\r\n        let entries = vec![\r\n            create_parsed_entry(\"file1.txt\", \"content1\"),\r\n            create_parsed_entry(\"dir1/file2.txt\", \"content2\"),\r\n        ];\r\n\r\n        let result = check_for_collisions(\u0026entries, output_dir);\r\n        assert!(result.is_ok());\r\n    }\r\n\r\n    #[test]\r\n    fn test_check_for_collisions_single_file_collision() {\r\n        let dir = tempdir().unwrap();\r\n        let output_dir = dir.path();\r\n        File::create(output_dir.join(\"file1.txt\")).unwrap();\r\n\r\n        let entries = vec![\r\n            create_parsed_entry(\"file1.txt\", \"content1\"),\r\n            create_parsed_entry(\"file2.txt\", \"content2\"),\r\n        ];\r\n\r\n        let result = check_for_collisions(\u0026entries, output_dir);\r\n        assert!(result.is_err());\r\n        let error_message = result.err().unwrap().to_string();\r\n        assert!(error_message.contains(\"Output path collision detected\"));\r\n        assert!(error_message.contains(\u0026output_dir.join(\"file1.txt\").display().to_string()));\r\n    }\r\n\r\n    #[test]\r\n    fn test_check_for_collisions_multiple_file_collisions() {\r\n        let dir = tempdir().unwrap();\r\n        let output_dir = dir.path();\r\n        File::create(output_dir.join(\"file1.txt\")).unwrap();\r\n        fs::create_dir_all(output_dir.join(\"dir1\")).unwrap();\r\n        File::create(output_dir.join(\"dir1/file2.txt\")).unwrap();\r\n\r\n        let entries = vec![\r\n            create_parsed_entry(\"file1.txt\", \"c1\"),\r\n            create_parsed_entry(\"dir1/file2.txt\", \"c2\"),\r\n            create_parsed_entry(\"file3.txt\", \"c3\"),\r\n        ];\r\n\r\n        let result = check_for_collisions(\u0026entries, output_dir);\r\n        assert!(result.is_err());\r\n        let error_message = result.err().unwrap().to_string();\r\n        assert!(error_message.contains(\u0026output_dir.join(\"file1.txt\").display().to_string()));\r\n        assert!(error_message.contains(\u0026output_dir.join(\"dir1/file2.txt\").display().to_string()));\r\n    }\r\n\r\n    #[test]\r\n    fn test_check_for_collisions_directory_as_file_collision() {\r\n        let dir = tempdir().unwrap();\r\n        let output_dir = dir.path();\r\n        fs::create_dir_all(output_dir.join(\"item\")).unwrap();\r\n\r\n        let entries = vec![create_parsed_entry(\"item\", \"content\")];\r\n\r\n        let result = check_for_collisions(\u0026entries, output_dir);\r\n        assert!(result.is_err());\r\n        let error_message = result.err().unwrap().to_string();\r\n        assert!(error_message.contains(\u0026output_dir.join(\"item\").display().to_string()));\r\n    }\r\n\r\n    #[test]\r\n    fn test_check_for_collisions_file_as_directory_collision() {\r\n        let dir = tempdir().unwrap();\r\n        let output_dir = dir.path();\r\n        File::create(output_dir.join(\"item\")).unwrap();\r\n\r\n        let entries = vec![create_parsed_entry(\"item/another.txt\", \"content\")];\r\n\r\n        let result = check_for_collisions(\u0026entries, output_dir);\r\n        assert!(result.is_err());\r\n        let error_message = result.err().unwrap().to_string();\r\n        assert!(error_message.contains(\u0026output_dir.join(\"item\").display().to_string()));\r\n        assert!(error_message.contains(\"conflict with directory creation\"));\r\n    }\r\n\r\n    #[test]\r\n    fn test_check_for_collisions_deep_file_as_directory_collision() {\r\n        let dir = tempdir().unwrap();\r\n        let output_dir = dir.path();\r\n        fs::create_dir_all(output_dir.join(\"level1\")).unwrap();\r\n        File::create(output_dir.join(\"level1/item\")).unwrap();\r\n\r\n        let entries = vec![create_parsed_entry(\"level1/item/another.txt\", \"content\")];\r\n\r\n        let result = check_for_collisions(\u0026entries, output_dir);\r\n        assert!(result.is_err());\r\n        let error_message = result.err().unwrap().to_string();\r\n        // Different OS path separators might cause issues, so we compare with both forms\r\n        let expected_path = output_dir.join(\"level1\").join(\"item\");\r\n        assert!(\r\n            error_message.contains(\u0026expected_path.display().to_string()) || \r\n            error_message.contains(\u0026expected_path.display().to_string().replace(\"\\\\\", \"/\")),\r\n            \"Error message '{}' doesn't contain path '{}'\", \r\n            error_message, \r\n            expected_path.display()\r\n        );\r\n    }\r\n\r\n    #[test]\r\n    fn test_create_single_file() -\u003e Result\u003c()\u003e {\r\n        let dir = tempdir()?;\r\n        let output_dir = dir.path();\r\n        let entries = vec![create_parsed_entry(\"file1.txt\", \"Hello World\")];\r\n\r\n        create_files_from_bundle(\u0026entries, output_dir, false)?;\r\n\r\n        let file_path = output_dir.join(\"file1.txt\");\r\n        assert!(file_path.exists());\r\n        assert_eq!(fs::read_to_string(file_path)?, \"Hello World\");\r\n        Ok(())\r\n    }\r\n\r\n    #[test]\r\n    fn test_create_multiple_files() -\u003e Result\u003c()\u003e {\r\n        let dir = tempdir()?;\r\n        let output_dir = dir.path();\r\n        let entries = vec![\r\n            create_parsed_entry(\"file1.txt\", \"Content 1\"),\r\n            create_parsed_entry(\"file2.txt\", \"Content 2\"),\r\n        ];\r\n\r\n        create_files_from_bundle(\u0026entries, output_dir, false)?;\r\n\r\n        let file_path1 = output_dir.join(\"file1.txt\");\r\n        assert!(file_path1.exists());\r\n        assert_eq!(fs::read_to_string(file_path1)?, \"Content 1\");\r\n\r\n        let file_path2 = output_dir.join(\"file2.txt\");\r\n        assert!(file_path2.exists());\r\n        assert_eq!(fs::read_to_string(file_path2)?, \"Content 2\");\r\n        Ok(())\r\n    }\r\n\r\n    #[test]\r\n    fn test_create_files_in_nested_directories() -\u003e Result\u003c()\u003e {\r\n        let dir = tempdir()?;\r\n        let output_dir = dir.path();\r\n        let entries = vec![\r\n            create_parsed_entry(\"dir1/file1.txt\", \"Nested Content 1\"),\r\n            create_parsed_entry(\"dir1/dir2/file2.txt\", \"Deeply Nested Content 2\"),\r\n            create_parsed_entry(\"file3.txt\", \"Root Content 3\"),\r\n        ];\r\n\r\n        create_files_from_bundle(\u0026entries, output_dir, false)?;\r\n\r\n        let path1 = output_dir.join(\"dir1/file1.txt\");\r\n        assert!(path1.exists());\r\n        assert_eq!(fs::read_to_string(path1)?, \"Nested Content 1\");\r\n        assert!(output_dir.join(\"dir1\").is_dir());\r\n\r\n        let path2 = output_dir.join(\"dir1/dir2/file2.txt\");\r\n        assert!(path2.exists());\r\n        assert_eq!(fs::read_to_string(path2)?, \"Deeply Nested Content 2\");\r\n        assert!(output_dir.join(\"dir1/dir2\").is_dir());\r\n\r\n        let path3 = output_dir.join(\"file3.txt\");\r\n        assert!(path3.exists());\r\n        assert_eq!(fs::read_to_string(path3)?, \"Root Content 3\");\r\n        Ok(())\r\n    }\r\n\r\n    #[test]\r\n    fn test_create_file_with_empty_content() -\u003e Result\u003c()\u003e {\r\n        let dir = tempdir()?;\r\n        let output_dir = dir.path();\r\n        let entries = vec![create_parsed_entry(\"empty.txt\", \"\")];\r\n\r\n        create_files_from_bundle(\u0026entries, output_dir, false)?;\r\n\r\n        let file_path = output_dir.join(\"empty.txt\");\r\n        assert!(file_path.exists());\r\n        assert_eq!(fs::read_to_string(file_path)?, \"\");\r\n        Ok(())\r\n    }\r\n\r\n    #[test]\r\n    fn test_create_files_complex_paths_and_content() -\u003e Result\u003c()\u003e {\r\n        let dir = tempdir()?;\r\n        let output_dir = dir.path();\r\n        let entries = vec![\r\n            create_parsed_entry(\"src/main.rs\", \"fn main() {\\n    println!(\\\"Hello\\\");\\n}\"),\r\n            create_parsed_entry(\"docs/README.md\", \"# My Project\\n\\nThis is a test.\"),\r\n            create_parsed_entry(\"config/settings.toml\", \"key = \\\"value\\\"\\nnumber = 123\"),\r\n        ];\r\n\r\n        create_files_from_bundle(\u0026entries, output_dir, false)?;\r\n\r\n        let path_rs = output_dir.join(\"src/main.rs\");\r\n        assert!(path_rs.exists());\r\n        assert_eq!(\r\n            fs::read_to_string(path_rs)?,\r\n            \"fn main() {\\n    println!(\\\"Hello\\\");\\n}\"\r\n        );\r\n        assert!(output_dir.join(\"src\").is_dir());\r\n\r\n        let path_md = output_dir.join(\"docs/README.md\");\r\n        assert!(path_md.exists());\r\n        assert_eq!(\r\n            fs::read_to_string(path_md)?,\r\n            \"# My Project\\n\\nThis is a test.\"\r\n        );\r\n        assert!(output_dir.join(\"docs\").is_dir());\r\n\r\n        let path_toml = output_dir.join(\"config/settings.toml\");\r\n        assert!(path_toml.exists());\r\n        assert_eq!(\r\n            fs::read_to_string(path_toml)?,\r\n            \"key = \\\"value\\\"\\nnumber = 123\"\r\n        );\r\n        assert!(output_dir.join(\"config\").is_dir());\r\n\r\n        Ok(())\r\n    }\r\n\r\n    #[test]\r\n    fn test_create_files_overwrite_with_force() -\u003e Result\u003c()\u003e {\r\n        let dir = tempdir()?;\r\n        let output_dir = dir.path();\r\n        let file_path = output_dir.join(\"file1.txt\");\r\n\r\n        // Create an initial file\r\n        fs::write(\u0026file_path, \"Initial Content\")?;\r\n        assert_eq!(fs::read_to_string(\u0026file_path)?, \"Initial Content\");\r\n\r\n        let entries = vec![create_parsed_entry(\"file1.txt\", \"Overwritten Content\")];\r\n\r\n        // Create files with force=true\r\n        create_files_from_bundle(\u0026entries, output_dir, true)?;\r\n\r\n        assert!(file_path.exists());\r\n        assert_eq!(fs::read_to_string(\u0026file_path)?, \"Overwritten Content\");\r\n        Ok(())\r\n    }\r\n\r\n    #[test]\r\n    fn test_create_files_fail_on_parent_is_file_even_with_force() -\u003e Result\u003c()\u003e {\r\n        let dir = tempdir()?;\r\n        let output_dir = dir.path();\r\n        let file_acting_as_parent_path = output_dir.join(\"parent_file\");\r\n\r\n        // Create a file where a directory is expected\r\n        fs::write(\u0026file_acting_as_parent_path, \"I am a file, not a directory.\")?;\r\n\r\n        let entries = vec![create_parsed_entry(\r\n            \"parent_file/child.txt\",\r\n            \"This should not be written.\",\r\n        )];\r\n\r\n        // Attempt to create files with force=true\r\n        let result = create_files_from_bundle(\u0026entries, output_dir, true);\r\n\r\n        assert!(result.is_err());\r\n        let error_message = result.err().unwrap().to_string();\r\n        assert!(error_message.contains(\"its parent\"));\r\n        assert!(error_message.contains(\"is an existing file\"));\r\n\r\n        // Ensure the original \"parent_file\" is untouched and no \"child.txt\" was created\r\n        assert_eq!(\r\n            fs::read_to_string(\u0026file_acting_as_parent_path)?,\r\n            \"I am a file, not a directory.\"\r\n        );\r\n        assert!(!output_dir.join(\"parent_file/child.txt\").exists());\r\n\r\n        Ok(())\r\n    }\r\n}\r\n","traces":[{"line":20,"address":[],"length":0,"stats":{"Line":864691128455135232}},{"line":21,"address":[],"length":0,"stats":{"Line":3602879701896396800}},{"line":22,"address":[],"length":0,"stats":{"Line":1369094286720630784}},{"line":24,"address":[],"length":0,"stats":{"Line":2738188573441261568}},{"line":26,"address":[],"length":0,"stats":{"Line":504403158265495552}},{"line":27,"address":[],"length":0,"stats":{"Line":0}},{"line":32,"address":[],"length":0,"stats":{"Line":1369094286720630784}},{"line":33,"address":[],"length":0,"stats":{"Line":1369094286720630784}},{"line":35,"address":[],"length":0,"stats":{"Line":864691128455135232}},{"line":44,"address":[],"length":0,"stats":{"Line":1008806316530991104}},{"line":45,"address":[],"length":0,"stats":{"Line":1008806316530991104}},{"line":47,"address":[],"length":0,"stats":{"Line":3891110078048108544}},{"line":49,"address":[],"length":0,"stats":{"Line":360287970189639680}},{"line":50,"address":[],"length":0,"stats":{"Line":360287970189639680}},{"line":52,"address":[],"length":0,"stats":{"Line":1080863910568919040}},{"line":53,"address":[],"length":0,"stats":{"Line":504403158265495552}},{"line":56,"address":[],"length":0,"stats":{"Line":0}},{"line":59,"address":[],"length":0,"stats":{"Line":504403158265495552}},{"line":60,"address":[],"length":0,"stats":{"Line":504403158265495552}},{"line":61,"address":[],"length":0,"stats":{"Line":504403158265495552}},{"line":64,"address":[],"length":0,"stats":{"Line":144115188075855872}},{"line":65,"address":[],"length":0,"stats":{"Line":144115188075855872}},{"line":66,"address":[],"length":0,"stats":{"Line":144115188075855872}},{"line":67,"address":[],"length":0,"stats":{"Line":432345564227567616}},{"line":69,"address":[],"length":0,"stats":{"Line":144115188075855872}},{"line":70,"address":[],"length":0,"stats":{"Line":144115188075855872}},{"line":76,"address":[],"length":0,"stats":{"Line":1008806316530991104}},{"line":77,"address":[],"length":0,"stats":{"Line":432345564227567616}},{"line":79,"address":[],"length":0,"stats":{"Line":936748722493063168}},{"line":88,"address":[],"length":0,"stats":{"Line":576460752303423488}}],"covered":28,"coverable":30},{"path":["E:","\\","git","codesprout","src","main.rs"],"content":"use clap::Parser;\r\nuse std::path::PathBuf;\r\n\r\nmod bundler;\r\nmod parser;\r\n\r\n/// sprout - A CLI tool to sprout files from a bundle.\r\n#[derive(Parser, Debug)]\r\n#[command(author, version, about, long_about = None, infer_long_args = true)]\r\nstruct CliArgs {\r\n    /// Path to the bundle file (positional).\r\n    /// Required unless -i/--input is used.\r\n    #[arg(name = \"BUNDLE_FILE_PATH\", required_unless_present = \"input\")]\r\n    bundle_file_path: Option\u003cPathBuf\u003e,\r\n\r\n    /// Output directory path (positional).\r\n    /// Defaults to the current directory if not specified and -o/--output is not used.\r\n    #[arg(name = \"OUTPUT_DIRECTORY_PATH\", default_value = \".\")]\r\n    output_directory_path: PathBuf,\r\n\r\n    /// Specify bundle file path via flag (alternative to positional BUNDLE_FILE_PATH).\r\n    #[arg(short, long, value_name = \"PATH\", conflicts_with = \"BUNDLE_FILE_PATH\")]\r\n    input: Option\u003cPathBuf\u003e,\r\n\r\n    /// Specify output directory path via flag (overrides positional OUTPUT_DIRECTORY_PATH).\r\n    #[arg(short, long, value_name = \"PATH\")]\r\n    output: Option\u003cPathBuf\u003e,\r\n\r\n    /// Force overwrite of existing files.\r\n    #[arg(short, long, default_value_t = false)]\r\n    force: bool,\r\n}\r\n\r\nfn main() -\u003e anyhow::Result\u003c()\u003e {\r\n    let args = CliArgs::parse();\r\n\r\n    let bundle_path = match (args.bundle_file_path, args.input) {\r\n        (Some(p), None) =\u003e p,\r\n        (None, Some(i)) =\u003e i,\r\n        _ =\u003e unreachable!(\"Clap should ensure one input source is exclusively provided and valid.\"),\r\n    };\r\n\r\n    let final_output_path = if let Some(output_flag_path) = args.output {\r\n        output_flag_path\r\n    } else {\r\n        args.output_directory_path\r\n    };\r\n\r\n    let parsed_data = parser::parse_bundle(\u0026bundle_path)?;\r\n\r\n    if parsed_data.is_empty() {\r\n        println!(\r\n            \"Bundle file '{}' is empty or contains no valid entries. Nothing to sprout.\",\r\n            bundle_path.display()\r\n        );\r\n        return Ok(());\r\n    }\r\n\r\n    if !args.force {\r\n        bundler::check_for_collisions(\u0026parsed_data, \u0026final_output_path)?;\r\n    }\r\n\r\n    bundler::create_files_from_bundle(\u0026parsed_data, \u0026final_output_path, args.force)?;\r\n\r\n    println!(\r\n        \"Successfully sprouted {} file(s) from '{}' to '{}'.{}\",\r\n        parsed_data.len(),\r\n        bundle_path.display(),\r\n        final_output_path.display(),\r\n        if args.force {\r\n            \" (files overwritten if necessary)\"\r\n        } else {\r\n            \"\"\r\n        }\r\n    );\r\n    Ok(())\r\n}\r\n","traces":[{"line":30,"address":[],"length":0,"stats":{"Line":720575940379279360}},{"line":31,"address":[],"length":0,"stats":{"Line":720575940379279360}},{"line":33,"address":[],"length":0,"stats":{"Line":1441151880758558720}},{"line":34,"address":[],"length":0,"stats":{"Line":648518346341351424}},{"line":35,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":39,"address":[],"length":0,"stats":{"Line":144115188075855872}},{"line":40,"address":[],"length":0,"stats":{"Line":0}},{"line":42,"address":[],"length":0,"stats":{"Line":576460752303423488}},{"line":45,"address":[],"length":0,"stats":{"Line":720575940379279360}},{"line":47,"address":[],"length":0,"stats":{"Line":0}},{"line":48,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":49,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":50,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":52,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":55,"address":[],"length":0,"stats":{"Line":648518346341351424}},{"line":57,"address":[],"length":0,"stats":{"Line":504403158265495552}},{"line":59,"address":[],"length":0,"stats":{"Line":504403158265495552}},{"line":60,"address":[],"length":0,"stats":{"Line":504403158265495552}},{"line":61,"address":[],"length":0,"stats":{"Line":504403158265495552}},{"line":62,"address":[],"length":0,"stats":{"Line":504403158265495552}},{"line":63,"address":[],"length":0,"stats":{"Line":504403158265495552}},{"line":65,"address":[],"length":0,"stats":{"Line":504403158265495552}}],"covered":20,"coverable":22},{"path":["E:","\\","git","codesprout","src","parser.rs"],"content":"// src/parser.rs\r\n// Module for parsing the bundle file\r\n\r\nuse anyhow::{Context, Result, anyhow};\r\nuse std::collections::HashSet;\r\nuse std::fmt;\r\nuse std::fs;\r\nuse std::path::{Path, PathBuf};\r\n\r\nconst FILE_HEADER_SEPARATOR: \u0026str = \"================================================\";\r\nconst FILE_PATH_PREFIX: \u0026str = \"File: \";\r\n\r\n/// Represents a single parsed file entry from the bundle.\r\n#[derive(Debug, PartialEq, Eq, Clone)]\r\npub struct ParsedEntry {\r\n    pub path: PathBuf,\r\n    pub content: String,\r\n}\r\n\r\n/// Specific errors that can occur during bundle parsing and validation.\r\n#[derive(Debug, PartialEq, Eq, Clone)]\r\npub enum BundleValidationError {\r\n    ContentBeforeFirstHeader {\r\n        line_number: usize,\r\n        content_excerpt: String,\r\n    },\r\n    MalformedHeaderMissingFilePrefix {\r\n        line_number: usize,\r\n        header_line: String,\r\n    },\r\n    MalformedHeaderMissingSeparatorAfterPath {\r\n        line_number: usize,\r\n        path_line: String,\r\n    },\r\n    MalformedHeaderPathLineInterruptedBySeparator {\r\n        line_number: usize,\r\n        path_line: String,\r\n    },\r\n    MalformedHeaderPathLineMissingNewline {\r\n        line_number: usize,\r\n        path_line: String,\r\n    },\r\n    MalformedHeaderMissingNewlineAfterContentSeparator {\r\n        line_number: usize,\r\n        separator_line: String,\r\n    },\r\n    EmptyPath {\r\n        line_number: usize,\r\n    },\r\n    AbsolutePathNotAllowed {\r\n        line_number: usize,\r\n        path: String,\r\n    },\r\n    DuplicatePath {\r\n        line_number: usize,\r\n        path: String,\r\n    },\r\n    PrematureEOFBeforePathLine {\r\n        line_number: usize,\r\n    },\r\n    PrematureEOFBeforeContentSeparator {\r\n        line_number: usize,\r\n        path: String,\r\n    },\r\n    PrematureEOFBeforeContentSeparatorNewline {\r\n        line_number: usize,\r\n        path: String,\r\n    },\r\n    UnexpectedContentAfterLastEntry {\r\n        line_number: usize,\r\n        content_excerpt: String,\r\n    },\r\n}\r\n\r\nimpl fmt::Display for BundleValidationError {\r\n    fn fmt(\u0026self, f: \u0026mut fmt::Formatter\u003c'_\u003e) -\u003e fmt::Result {\r\n        match self {\r\n            BundleValidationError::ContentBeforeFirstHeader {\r\n                line_number,\r\n                content_excerpt,\r\n            } =\u003e write!(\r\n                f,\r\n                \"L{}: Content found before the first file header. Starts with: \\\"{}\\\"\",\r\n                line_number, content_excerpt\r\n            ),\r\n            BundleValidationError::MalformedHeaderMissingFilePrefix {\r\n                line_number,\r\n                header_line,\r\n            } =\u003e write!(\r\n                f,\r\n                \"L{}: Malformed file header. Expected '{}' after separator line, found: \\\"{}\\\"\",\r\n                line_number, FILE_PATH_PREFIX, header_line\r\n            ),\r\n            BundleValidationError::MalformedHeaderMissingSeparatorAfterPath {\r\n                line_number,\r\n                path_line,\r\n            } =\u003e write!(\r\n                f,\r\n                \"L{}: Malformed file header. Expected separator line after path line, found: \\\"{}\\\"\",\r\n                line_number, path_line\r\n            ),\r\n            BundleValidationError::MalformedHeaderPathLineInterruptedBySeparator {\r\n                line_number,\r\n                path_line,\r\n            } =\u003e write!(\r\n                f,\r\n                \"L{}: Malformed file header. File path line is interrupted by a separator: \\\"{}\\\"\",\r\n                line_number, path_line\r\n            ),\r\n            BundleValidationError::MalformedHeaderPathLineMissingNewline {\r\n                line_number,\r\n                path_line,\r\n            } =\u003e write!(\r\n                f,\r\n                \"L{}: Malformed file header. File path line does not end with a newline: \\\"{}\\\"\",\r\n                line_number, path_line\r\n            ),\r\n            BundleValidationError::MalformedHeaderMissingNewlineAfterContentSeparator {\r\n                line_number,\r\n                separator_line,\r\n            } =\u003e write!(\r\n                f,\r\n                \"L{}: Malformed file header. Expected newline after content separator line: \\\"{}\\\"\",\r\n                line_number, separator_line\r\n            ),\r\n            BundleValidationError::EmptyPath { line_number } =\u003e {\r\n                write!(f, \"L{}: File path is empty.\", line_number)\r\n            }\r\n            BundleValidationError::AbsolutePathNotAllowed { line_number, path } =\u003e write!(\r\n                f,\r\n                \"L{}: Absolute path not allowed: \\\"{}\\\"\",\r\n                line_number, path\r\n            ),\r\n            BundleValidationError::DuplicatePath { line_number, path } =\u003e {\r\n                write!(f, \"L{}: Duplicate path found: \\\"{}\\\"\", line_number, path)\r\n            }\r\n            BundleValidationError::PrematureEOFBeforePathLine { line_number } =\u003e write!(\r\n                f,\r\n                \"L{}: Premature EOF. Expected 'File: \u003cpath\u003e' line after separator.\",\r\n                line_number\r\n            ),\r\n            BundleValidationError::PrematureEOFBeforeContentSeparator { line_number, path } =\u003e {\r\n                write!(\r\n                    f,\r\n                    \"L{}: Premature EOF for file \\\"{}\\\". Expected second separator line after path.\",\r\n                    path, line_number\r\n                )\r\n            }\r\n            BundleValidationError::PrematureEOFBeforeContentSeparatorNewline {\r\n                line_number,\r\n                path,\r\n            } =\u003e write!(\r\n                f,\r\n                \"L{}: Premature EOF for file \\\"{}\\\". Expected newline after content separator.\",\r\n                path, line_number\r\n            ),\r\n            BundleValidationError::UnexpectedContentAfterLastEntry {\r\n                line_number,\r\n                content_excerpt,\r\n            } =\u003e write!(\r\n                f,\r\n                \"L{}: Unexpected content found after the last valid file entry. Starts with: \\\"{}\\\"\",\r\n                line_number, content_excerpt\r\n            ),\r\n        }\r\n    }\r\n}\r\n\r\n/// Container for multiple validation errors.\r\n#[derive(Debug)]\r\npub struct BundleParseError {\r\n    pub errors: Vec\u003cBundleValidationError\u003e,\r\n}\r\n\r\nimpl fmt::Display for BundleParseError {\r\n    fn fmt(\u0026self, f: \u0026mut fmt::Formatter\u003c'_\u003e) -\u003e fmt::Result {\r\n        writeln!(\r\n            f,\r\n            \"Bundle parsing failed with {} error(s):\",\r\n            self.errors.len()\r\n        )?;\r\n        for error in \u0026self.errors {\r\n            writeln!(f, \"- {}\", error)?;\r\n        }\r\n        Ok(())\r\n    }\r\n}\r\n\r\nimpl std::error::Error for BundleParseError {}\r\n\r\n/// Parses a bundle file, extracting file paths and their content, and validating the format.\r\n///\r\n/// Collects all format errors found in the bundle.\r\npub fn parse_bundle(bundle_path: \u0026Path) -\u003e Result\u003cVec\u003cParsedEntry\u003e\u003e {\r\n    let bundle_content = fs::read_to_string(bundle_path)\r\n        .with_context(|| format!(\"Failed to read bundle file: {:?}\", bundle_path))?;\r\n\r\n    if bundle_content.trim().is_empty() {\r\n        return Ok(Vec::new());\r\n    }\r\n\r\n    let mut entries = Vec::new();\r\n    let mut validation_errors = Vec::new();\r\n    let mut paths_seen = HashSet::new();\r\n\r\n    let lines: Vec\u003c\u0026str\u003e = bundle_content.lines().collect();\r\n\r\n    let mut first_header_line_idx: Option\u003cusize\u003e = None;\r\n    for (idx, line_content) in lines.iter().enumerate() {\r\n        if line_content.trim_start().starts_with(FILE_HEADER_SEPARATOR)\r\n            \u0026\u0026 idx + 1 \u003c lines.len()\r\n            \u0026\u0026 lines[idx + 1].trim_start().starts_with(FILE_PATH_PREFIX)\r\n        {\r\n            first_header_line_idx = Some(idx);\r\n            break;\r\n        }\r\n    }\r\n\r\n    let mut start_processing_from_line_idx = 0;\r\n    let mut skipped_pre_header_line_numbers: Vec\u003cusize\u003e = Vec::new();\r\n\r\n    if let Some(fh_idx) = first_header_line_idx {\r\n        for (line_idx, line_content) in lines.iter().enumerate().take(fh_idx) {\r\n            if !line_content.trim().is_empty() {\r\n                skipped_pre_header_line_numbers.push(line_idx + 1);\r\n            }\r\n        }\r\n\r\n        if !skipped_pre_header_line_numbers.is_empty() {\r\n            let min_line = *skipped_pre_header_line_numbers.iter().min().unwrap();\r\n            let max_line = *skipped_pre_header_line_numbers.iter().max().unwrap();\r\n            if min_line == max_line {\r\n                eprintln!(\r\n                    \"Warning: Line {} excluded due to content before the first file header.\",\r\n                    min_line\r\n                );\r\n            } else {\r\n                eprintln!(\r\n                    \"Warning: Lines {}-{} excluded due to content before the first file header.\",\r\n                    min_line, max_line\r\n                );\r\n            }\r\n        }\r\n        start_processing_from_line_idx = fh_idx;\r\n    } else if !bundle_content.trim().is_empty() {\r\n        let first_actual_content_line_str = lines\r\n            .iter()\r\n            .find(|line| !line.trim().is_empty())\r\n            .map_or(\"\", |line| line.trim());\r\n\r\n        validation_errors.push(BundleValidationError::ContentBeforeFirstHeader {\r\n            line_number: 1,\r\n            content_excerpt: first_actual_content_line_str.chars().take(50).collect(),\r\n        });\r\n    }\r\n\r\n    let mut current_bundle_offset = 0;\r\n    for line_content_str in lines.iter().take(start_processing_from_line_idx) {\r\n        current_bundle_offset += line_content_str.len() + 1;\r\n    }\r\n\r\n    while current_bundle_offset \u003c bundle_content.len() {\r\n        let remaining_content = \u0026bundle_content[current_bundle_offset..];\r\n        let search_start_line = bundle_content[..current_bundle_offset].lines().count();\r\n\r\n        match remaining_content.find(FILE_HEADER_SEPARATOR) {\r\n            Some(header_relative_start) =\u003e {\r\n                let header_absolute_start = current_bundle_offset + header_relative_start;\r\n                let header_line_number =\r\n                    bundle_content[..header_absolute_start].lines().count() + 1;\r\n\r\n                let skipped_content = \u0026bundle_content[current_bundle_offset..header_absolute_start];\r\n                if !skipped_content.trim().is_empty() {\r\n                    validation_errors.push(\r\n                        BundleValidationError::UnexpectedContentAfterLastEntry {\r\n                            line_number: search_start_line,\r\n                            content_excerpt: skipped_content\r\n                                .trim()\r\n                                .lines()\r\n                                .next()\r\n                                .unwrap_or(\"\")\r\n                                .chars()\r\n                                .take(50)\r\n                                .collect(),\r\n                        },\r\n                    );\r\n                }\r\n\r\n                let current_separator_line_num = header_line_number;\r\n\r\n                let after_first_sep_start = header_absolute_start + FILE_HEADER_SEPARATOR.len();\r\n                if after_first_sep_start \u003e= bundle_content.len() {\r\n                    validation_errors.push(BundleValidationError::PrematureEOFBeforePathLine {\r\n                        line_number: current_separator_line_num,\r\n                    });\r\n                    current_bundle_offset = bundle_content.len();\r\n                    continue;\r\n                }\r\n                if bundle_content.as_bytes()[after_first_sep_start] != b'\\n' {\r\n                    validation_errors.push(\r\n                        BundleValidationError::MalformedHeaderMissingFilePrefix {\r\n                            line_number: current_separator_line_num + 1,\r\n                            header_line: bundle_content[after_first_sep_start..]\r\n                                .lines()\r\n                                .next()\r\n                                .unwrap_or(\"\")\r\n                                .trim_end()\r\n                                .to_string(),\r\n                        },\r\n                    );\r\n                    current_bundle_offset = bundle_content.len();\r\n                    continue;\r\n                }\r\n                let path_line_num = current_separator_line_num + 1;\r\n\r\n                let path_line_start = after_first_sep_start + 1;\r\n                if path_line_start \u003e= bundle_content.len() {\r\n                    validation_errors.push(BundleValidationError::PrematureEOFBeforePathLine {\r\n                        line_number: path_line_num,\r\n                    });\r\n                    current_bundle_offset = bundle_content.len();\r\n                    continue;\r\n                }\r\n                if !bundle_content[path_line_start..].starts_with(FILE_PATH_PREFIX) {\r\n                    validation_errors.push(\r\n                        BundleValidationError::MalformedHeaderMissingFilePrefix {\r\n                            line_number: path_line_num,\r\n                            header_line: bundle_content[path_line_start..]\r\n                                .lines()\r\n                                .next()\r\n                                .unwrap_or(\"\")\r\n                                .to_string(),\r\n                        },\r\n                    );\r\n                    current_bundle_offset = bundle_content.len();\r\n                    continue;\r\n                }\r\n\r\n                let path_actual_start = path_line_start + FILE_PATH_PREFIX.len();\r\n                let path_line_terminator_search_slice = \u0026bundle_content[path_actual_start..];\r\n                let newline_pos_in_slice = path_line_terminator_search_slice.find('\\n');\r\n\r\n                let path_str_end_offset = match newline_pos_in_slice {\r\n                    Some(nl_idx) =\u003e {\r\n                        if path_line_terminator_search_slice[..nl_idx]\r\n                            .contains(FILE_HEADER_SEPARATOR)\r\n                        {\r\n                            validation_errors.push(BundleValidationError::MalformedHeaderPathLineInterruptedBySeparator {\r\n                                line_number: path_line_num,\r\n                                path_line: bundle_content[path_actual_start .. path_actual_start + nl_idx].trim_end().to_string(),\r\n                            });\r\n                            current_bundle_offset = bundle_content.len();\r\n                            continue;\r\n                        }\r\n                        path_actual_start + nl_idx\r\n                    }\r\n                    None =\u003e {\r\n                        validation_errors.push(\r\n                            BundleValidationError::MalformedHeaderPathLineMissingNewline {\r\n                                line_number: path_line_num,\r\n                                path_line: path_line_terminator_search_slice\r\n                                    .lines()\r\n                                    .next()\r\n                                    .unwrap_or(\"\")\r\n                                    .trim_end()\r\n                                    .to_string(),\r\n                            },\r\n                        );\r\n                        current_bundle_offset = bundle_content.len();\r\n                        continue;\r\n                    }\r\n                };\r\n\r\n                let file_path_str = bundle_content[path_actual_start..path_str_end_offset].trim();\r\n                if file_path_str.is_empty() {\r\n                    validation_errors.push(BundleValidationError::EmptyPath {\r\n                        line_number: path_line_num,\r\n                    });\r\n                }\r\n\r\n                let path = PathBuf::from(file_path_str);\r\n                // This variable will track if the current entry is valid for actual use,\r\n                // considering emptiness, path type, and duplication.\r\n                let mut is_valid_for_adding_to_entries = !file_path_str.is_empty();\r\n\r\n                if !file_path_str.is_empty() {\r\n                    let first_component = path.components().next();\r\n                    let is_problematic_path_type = path.is_absolute()\r\n                        || matches!(\r\n                            first_component,\r\n                            Some(std::path::Component::RootDir)\r\n                                | Some(std::path::Component::Prefix(_))\r\n                        );\r\n\r\n                    if is_problematic_path_type {\r\n                        validation_errors.push(BundleValidationError::AbsolutePathNotAllowed {\r\n                            line_number: path_line_num,\r\n                            path: file_path_str.to_string(),\r\n                        });\r\n                        is_valid_for_adding_to_entries = false;\r\n                    }\r\n\r\n                    // For duplicate check: only consider if not already invalidated by path type.\r\n                    // `paths_seen` should only store valid, relative paths.\r\n                    if is_valid_for_adding_to_entries \u0026\u0026 !paths_seen.insert(path.clone()) {\r\n                        validation_errors.push(BundleValidationError::DuplicatePath {\r\n                            line_number: path_line_num,\r\n                            path: file_path_str.to_string(),\r\n                        });\r\n                        is_valid_for_adding_to_entries = false; // Mark as invalid if duplicate\r\n                    }\r\n                }\r\n                // If file_path_str was empty, is_valid_for_adding_to_entries is already false,\r\n                // and an EmptyPath error was added earlier.\r\n\r\n                let second_sep_line_num = path_line_num + 1;\r\n\r\n                let second_sep_start = path_str_end_offset + 1;\r\n                if second_sep_start \u003e= bundle_content.len() {\r\n                    validation_errors.push(\r\n                        BundleValidationError::PrematureEOFBeforeContentSeparator {\r\n                            line_number: second_sep_line_num,\r\n                            path: file_path_str.to_string(),\r\n                        },\r\n                    );\r\n                    current_bundle_offset = bundle_content.len();\r\n                    continue;\r\n                }\r\n                if !bundle_content[second_sep_start..].starts_with(FILE_HEADER_SEPARATOR) {\r\n                    validation_errors.push(\r\n                        BundleValidationError::MalformedHeaderMissingSeparatorAfterPath {\r\n                            line_number: second_sep_line_num,\r\n                            path_line: file_path_str.to_string(),\r\n                        },\r\n                    );\r\n                    current_bundle_offset = bundle_content.len();\r\n                    continue;\r\n                }\r\n\r\n                let after_second_sep_start = second_sep_start + FILE_HEADER_SEPARATOR.len();\r\n                if after_second_sep_start \u003e= bundle_content.len() {\r\n                    validation_errors.push(\r\n                        BundleValidationError::PrematureEOFBeforeContentSeparatorNewline {\r\n                            line_number: second_sep_line_num,\r\n                            path: file_path_str.to_string(),\r\n                        },\r\n                    );\r\n                    current_bundle_offset = bundle_content.len();\r\n                    continue;\r\n                }\r\n                if bundle_content.as_bytes()[after_second_sep_start] != b'\\n' {\r\n                    validation_errors.push(\r\n                        BundleValidationError::MalformedHeaderMissingNewlineAfterContentSeparator {\r\n                            line_number: second_sep_line_num,\r\n                            separator_line: bundle_content[second_sep_start\r\n                                ..std::cmp::min(\r\n                                    bundle_content.len(),\r\n                                    second_sep_start + FILE_HEADER_SEPARATOR.len(),\r\n                                )]\r\n                                .trim_end()\r\n                                .to_string(),\r\n                        },\r\n                    );\r\n                    current_bundle_offset = bundle_content.len();\r\n                    continue;\r\n                }\r\n\r\n                let content_actual_start = after_second_sep_start + 1;\r\n\r\n                let next_entry_header_search_start = content_actual_start;\r\n                let content_end_offset = bundle_content[next_entry_header_search_start..]\r\n                    .find(FILE_HEADER_SEPARATOR)\r\n                    .map(|pos| next_entry_header_search_start + pos)\r\n                    .unwrap_or_else(|| bundle_content.len());\r\n\r\n                let content = bundle_content[content_actual_start..content_end_offset].to_string();\r\n\r\n                if is_valid_for_adding_to_entries {\r\n                    entries.push(ParsedEntry { path, content });\r\n                }\r\n\r\n                current_bundle_offset = content_end_offset;\r\n            }\r\n            None =\u003e {\r\n                let final_remaining_content = \u0026bundle_content[current_bundle_offset..];\r\n                if !final_remaining_content.trim().is_empty() \u0026\u0026 !entries.is_empty() {\r\n                    validation_errors.push(\r\n                        BundleValidationError::UnexpectedContentAfterLastEntry {\r\n                            line_number: bundle_content[..current_bundle_offset].lines().count()\r\n                                + 1,\r\n                            content_excerpt: final_remaining_content\r\n                                .trim()\r\n                                .lines()\r\n                                .next()\r\n                                .unwrap_or(\"\")\r\n                                .chars()\r\n                                .take(50)\r\n                                .collect(),\r\n                        },\r\n                    );\r\n                }\r\n                current_bundle_offset = bundle_content.len();\r\n            }\r\n        }\r\n    }\r\n\r\n    if !validation_errors.is_empty() {\r\n        return Err(anyhow!(BundleParseError {\r\n            errors: validation_errors\r\n        }));\r\n    }\r\n\r\n    Ok(entries)\r\n}\r\n\r\n#[cfg(test)]\r\nmod tests {\r\n    use super::*;\r\n    use std::io::Write;\r\n    use tempfile::NamedTempFile;\r\n\r\n    fn create_temp_bundle_file(content: \u0026str) -\u003e NamedTempFile {\r\n        let mut temp_file = NamedTempFile::new().expect(\"Failed to create temp file\");\r\n        write!(temp_file, \"{}\", content).expect(\"Failed to write to temp file\");\r\n        temp_file\r\n    }\r\n\r\n    fn assert_specific_error(\r\n        result: \u0026Result\u003cVec\u003cParsedEntry\u003e, anyhow::Error\u003e,\r\n        expected_error: BundleValidationError,\r\n    ) {\r\n        match result {\r\n            Err(err) =\u003e {\r\n                if let Some(bundle_parse_error) = err.downcast_ref::\u003cBundleParseError\u003e() {\r\n                    assert!(\r\n                        bundle_parse_error.errors.contains(\u0026expected_error),\r\n                        \"Expected error {:?} not found in {:?}\",\r\n                        expected_error,\r\n                        bundle_parse_error.errors\r\n                    );\r\n                } else {\r\n                    panic!(\"Error is not a BundleParseError: {:?}\", err);\r\n                }\r\n            }\r\n            Ok(_) =\u003e panic!(\"Expected error, but got Ok\"),\r\n        }\r\n    }\r\n\r\n    #[test]\r\n    fn test_parse_empty_bundle_file() {\r\n        let temp_file = create_temp_bundle_file(\"\");\r\n        let entries = parse_bundle(temp_file.path()).unwrap();\r\n        assert!(entries.is_empty());\r\n    }\r\n\r\n    #[test]\r\n    fn test_parse_bundle_file_with_only_whitespace() {\r\n        let temp_file = create_temp_bundle_file(\"   \\n\\t  \\n\");\r\n        let entries = parse_bundle(temp_file.path()).unwrap();\r\n        assert!(entries.is_empty());\r\n    }\r\n\r\n    #[test]\r\n    fn test_error_content_before_first_header() {\r\n        let bundle_content = format!(\r\n            \"Some introductory text.\\n\\\r\n            {}\\n\\\r\n            {}path/to/file1.txt\\n\\\r\n            {}\\n\\\r\n            Content of file1.\",\r\n            FILE_HEADER_SEPARATOR, FILE_PATH_PREFIX, FILE_HEADER_SEPARATOR\r\n        );\r\n        let temp_file = create_temp_bundle_file(\u0026bundle_content);\r\n        let result = parse_bundle(temp_file.path());\r\n        assert!(result.is_ok(), \"Expected Ok, got {:?}\", result);\r\n        let entries = result.unwrap();\r\n        assert_eq!(entries.len(), 1);\r\n        assert_eq!(entries[0].path, PathBuf::from(\"path/to/file1.txt\"));\r\n        assert_eq!(entries[0].content, \"Content of file1.\");\r\n    }\r\n\r\n    #[test]\r\n    fn test_error_content_before_first_header_no_valid_header_at_all() {\r\n        let temp_file =\r\n            create_temp_bundle_file(\"This is just some text, no valid file entries at all.\");\r\n        let result = parse_bundle(temp_file.path());\r\n        assert_specific_error(\r\n            \u0026result,\r\n            BundleValidationError::ContentBeforeFirstHeader {\r\n                line_number: 1,\r\n                content_excerpt: \"This is just some text, no valid file entries at a\".to_string(),\r\n            },\r\n        );\r\n    }\r\n\r\n    #[test]\r\n    fn test_parse_single_entry() {\r\n        let bundle_content = format!(\r\n            \"{}\\n\\\r\n            {}file.txt\\n\\\r\n            {}\\n\\\r\n            Hello, world!\",\r\n            FILE_HEADER_SEPARATOR, FILE_PATH_PREFIX, FILE_HEADER_SEPARATOR\r\n        );\r\n        let temp_file = create_temp_bundle_file(\u0026bundle_content);\r\n        let entries = parse_bundle(temp_file.path()).unwrap();\r\n        assert_eq!(entries.len(), 1);\r\n        assert_eq!(entries[0].path, PathBuf::from(\"file.txt\"));\r\n        assert_eq!(entries[0].content, \"Hello, world!\");\r\n    }\r\n\r\n    #[test]\r\n    fn test_parse_multiple_entries() {\r\n        let bundle_content = format!(\r\n            \"{}\\n\\\r\n            {}file1.txt\\n\\\r\n            {}\\n\\\r\n            Content of file1.\\n\\\r\n            {}\\n\\\r\n            {}path/to/file2.rs\\n\\\r\n            {}\\n\\\r\n            // Rust code\\nfn main() {{}}\\n\\\r\n            {}\\n\\\r\n            {}another.md\\n\\\r\n            {}\\n\\\r\n            ## Markdown Content\",\r\n            FILE_HEADER_SEPARATOR,\r\n            FILE_PATH_PREFIX,\r\n            FILE_HEADER_SEPARATOR,\r\n            FILE_HEADER_SEPARATOR,\r\n            FILE_PATH_PREFIX,\r\n            FILE_HEADER_SEPARATOR,\r\n            FILE_HEADER_SEPARATOR,\r\n            FILE_PATH_PREFIX,\r\n            FILE_HEADER_SEPARATOR\r\n        );\r\n        let temp_file = create_temp_bundle_file(\u0026bundle_content);\r\n        let entries = parse_bundle(temp_file.path()).unwrap();\r\n        assert_eq!(entries.len(), 3);\r\n\r\n        assert_eq!(entries[0].path, PathBuf::from(\"file1.txt\"));\r\n        assert_eq!(entries[0].content, \"Content of file1.\\n\");\r\n\r\n        assert_eq!(entries[1].path, PathBuf::from(\"path/to/file2.rs\"));\r\n        assert_eq!(entries[1].content, \"// Rust code\\nfn main() {}\\n\");\r\n\r\n        assert_eq!(entries[2].path, PathBuf::from(\"another.md\"));\r\n        assert_eq!(entries[2].content, \"## Markdown Content\");\r\n    }\r\n\r\n    #[test]\r\n    fn test_parse_entry_with_empty_content() {\r\n        let bundle_content = format!(\r\n            \"{}\\n\\\r\n            {}empty_file.txt\\n\\\r\n            {}\\n\",\r\n            FILE_HEADER_SEPARATOR, FILE_PATH_PREFIX, FILE_HEADER_SEPARATOR\r\n        );\r\n        let temp_file = create_temp_bundle_file(\u0026bundle_content);\r\n        let entries = parse_bundle(temp_file.path()).unwrap();\r\n        assert_eq!(entries.len(), 1);\r\n        assert_eq!(entries[0].path, PathBuf::from(\"empty_file.txt\"));\r\n        assert_eq!(entries[0].content, \"\");\r\n    }\r\n\r\n    #[test]\r\n    fn test_error_malformed_header_missing_file_prefix() {\r\n        let bundle_content = format!(\r\n            \"{}\\n\\\r\n            Not File: path/to/file.txt\\n\\\r\n            {}\\n\\\r\n            Content\",\r\n            FILE_HEADER_SEPARATOR, FILE_HEADER_SEPARATOR\r\n        );\r\n        let temp_file = create_temp_bundle_file(\u0026bundle_content);\r\n        let result = parse_bundle(temp_file.path());\r\n        assert_specific_error(\r\n            \u0026result,\r\n            BundleValidationError::MalformedHeaderMissingFilePrefix {\r\n                line_number: 2,\r\n                header_line: \"Not File: path/to/file.txt\".to_string(),\r\n            },\r\n        );\r\n    }\r\n\r\n    #[test]\r\n    fn test_error_malformed_header_missing_separator_after_path() {\r\n        let bundle_content = format!(\r\n            \"{}\\n\\\r\n            {}path/to/file.txt\\n\\\r\n            Content without second separator\",\r\n            FILE_HEADER_SEPARATOR, FILE_PATH_PREFIX\r\n        );\r\n        let temp_file = create_temp_bundle_file(\u0026bundle_content);\r\n        let result = parse_bundle(temp_file.path());\r\n        assert_specific_error(\r\n            \u0026result,\r\n            BundleValidationError::MalformedHeaderMissingSeparatorAfterPath {\r\n                line_number: 3,\r\n                path_line: \"path/to/file.txt\".to_string(),\r\n            },\r\n        );\r\n    }\r\n\r\n    #[test]\r\n    fn test_error_path_line_interrupted_by_separator() {\r\n        let bundle_content = format!(\r\n            \"{}\\n\\\r\n            {}path/to{}file.txt\\n\\\r\n            {}\\n\\\r\n            Content\",\r\n            FILE_HEADER_SEPARATOR, FILE_PATH_PREFIX, FILE_HEADER_SEPARATOR, FILE_HEADER_SEPARATOR\r\n        );\r\n        let temp_file = create_temp_bundle_file(\u0026bundle_content);\r\n        let result = parse_bundle(temp_file.path());\r\n        assert_specific_error(\r\n            \u0026result,\r\n            BundleValidationError::MalformedHeaderPathLineInterruptedBySeparator {\r\n                line_number: 2,\r\n                path_line: format!(\"path/to{}file.txt\", FILE_HEADER_SEPARATOR),\r\n            },\r\n        );\r\n    }\r\n\r\n    #[test]\r\n    fn test_error_path_line_missing_newline() {\r\n        let bundle_content = format!(\r\n            \"{}\\n\\\r\n            {}path/to/file.txt\",\r\n            FILE_HEADER_SEPARATOR, FILE_PATH_PREFIX\r\n        );\r\n        let temp_file = create_temp_bundle_file(\u0026bundle_content);\r\n        let result = parse_bundle(temp_file.path());\r\n        assert_specific_error(\r\n            \u0026result,\r\n            BundleValidationError::MalformedHeaderPathLineMissingNewline {\r\n                line_number: 2,\r\n                path_line: \"path/to/file.txt\".to_string(),\r\n            },\r\n        );\r\n    }\r\n\r\n    #[test]\r\n    fn test_error_missing_newline_after_content_separator() {\r\n        let bundle_content = format!(\r\n            \"{}\\n\\\r\n            {}file.txt\\n\\\r\n            {}{}\",\r\n            FILE_HEADER_SEPARATOR, FILE_PATH_PREFIX, FILE_HEADER_SEPARATOR, \"NoNewlineContent\"\r\n        );\r\n        let temp_file = create_temp_bundle_file(\u0026bundle_content);\r\n        let result = parse_bundle(temp_file.path());\r\n        assert_specific_error(\r\n            \u0026result,\r\n            BundleValidationError::MalformedHeaderMissingNewlineAfterContentSeparator {\r\n                line_number: 3,\r\n                separator_line: FILE_HEADER_SEPARATOR.to_string(),\r\n            },\r\n        );\r\n    }\r\n\r\n    #[test]\r\n    fn test_error_empty_path() {\r\n        let bundle_content = format!(\r\n            \"{}\\n\\\r\n            {}\\n\\\r\n            {}\\n\\\r\n            Content\",\r\n            FILE_HEADER_SEPARATOR, FILE_PATH_PREFIX, FILE_HEADER_SEPARATOR\r\n        );\r\n        let temp_file = create_temp_bundle_file(\u0026bundle_content);\r\n        let result = parse_bundle(temp_file.path());\r\n        assert_specific_error(\u0026result, BundleValidationError::EmptyPath { line_number: 2 });\r\n    }\r\n\r\n    #[test]\r\n    fn test_error_absolute_path() {\r\n        let absolute_path_str = \"/an/absolute/path.txt\";\r\n        let bundle_content = format!(\r\n            \"{}\\n\\\r\n            {}{}\\n\\\r\n            {}\\n\\\r\n            Content\",\r\n            FILE_HEADER_SEPARATOR, FILE_PATH_PREFIX, absolute_path_str, FILE_HEADER_SEPARATOR\r\n        );\r\n        let temp_file = create_temp_bundle_file(\u0026bundle_content);\r\n        let result = parse_bundle(temp_file.path());\r\n        assert_specific_error(\r\n            \u0026result,\r\n            BundleValidationError::AbsolutePathNotAllowed {\r\n                line_number: 2,\r\n                path: absolute_path_str.to_string(),\r\n            },\r\n        );\r\n    }\r\n\r\n    #[test]\r\n    fn test_error_duplicate_path() {\r\n        let bundle_content = format!(\r\n            \"{}\\n\\\r\n            {}file.txt\\n\\\r\n            {}\\n\\\r\n            Content1\\n\\\r\n            {}\\n\\\r\n            {}file.txt\\n\\\r\n            {}\\n\\\r\n            Content2\",\r\n            FILE_HEADER_SEPARATOR,\r\n            FILE_PATH_PREFIX,\r\n            FILE_HEADER_SEPARATOR,\r\n            FILE_HEADER_SEPARATOR,\r\n            FILE_PATH_PREFIX,\r\n            FILE_HEADER_SEPARATOR\r\n        );\r\n        let temp_file = create_temp_bundle_file(\u0026bundle_content);\r\n        let result = parse_bundle(temp_file.path());\r\n        assert_specific_error(\r\n            \u0026result,\r\n            BundleValidationError::DuplicatePath {\r\n                line_number: 6,\r\n                path: \"file.txt\".to_string(),\r\n            },\r\n        );\r\n    }\r\n\r\n    #[test]\r\n    fn test_error_premature_eof_after_first_separator() {\r\n        let bundle_content = FILE_HEADER_SEPARATOR;\r\n        let temp_file = create_temp_bundle_file(bundle_content);\r\n        let result = parse_bundle(temp_file.path());\r\n        assert_specific_error(\r\n            \u0026result,\r\n            BundleValidationError::PrematureEOFBeforePathLine { line_number: 1 },\r\n        );\r\n    }\r\n\r\n    #[test]\r\n    fn test_error_premature_eof_after_file_prefix() {\r\n        let bundle_content = format!(\"{}\\n{}\", FILE_HEADER_SEPARATOR, FILE_PATH_PREFIX);\r\n        let temp_file = create_temp_bundle_file(\u0026bundle_content);\r\n        let result = parse_bundle(temp_file.path());\r\n        assert_specific_error(\r\n            \u0026result,\r\n            BundleValidationError::MalformedHeaderPathLineMissingNewline {\r\n                line_number: 2,\r\n                path_line: \"\".to_string(),\r\n            },\r\n        );\r\n    }\r\n\r\n    #[test]\r\n    fn test_error_premature_eof_after_path_line() {\r\n        let bundle_content = format!(\"{}\\n{}path.txt\", FILE_HEADER_SEPARATOR, FILE_PATH_PREFIX);\r\n        let temp_file = create_temp_bundle_file(\u0026bundle_content);\r\n        let result = parse_bundle(temp_file.path());\r\n        assert_specific_error(\r\n            \u0026result,\r\n            BundleValidationError::MalformedHeaderPathLineMissingNewline {\r\n                line_number: 2,\r\n                path_line: \"path.txt\".to_string(),\r\n            },\r\n        );\r\n    }\r\n\r\n    #[test]\r\n    fn test_error_unexpected_content_after_last_entry() {\r\n        let bundle_content = format!(\r\n            \"{}\\n\\\r\n            {}file.txt\\n\\\r\n            {}\\n\\\r\n            Content\\n\\\r\n            Some trailing garbage text.\",\r\n            FILE_HEADER_SEPARATOR, FILE_PATH_PREFIX, FILE_HEADER_SEPARATOR\r\n        );\r\n        let temp_file = create_temp_bundle_file(\u0026bundle_content);\r\n        let result = parse_bundle(temp_file.path());\r\n        assert!(result.is_ok(), \"Expected Ok, got {:?}\", result);\r\n        let entries = result.unwrap();\r\n        assert_eq!(entries.len(), 1);\r\n        assert_eq!(entries[0].path, PathBuf::from(\"file.txt\"));\r\n        assert_eq!(entries[0].content, \"Content\\nSome trailing garbage text.\");\r\n    }\r\n\r\n    #[test]\r\n    fn test_multiple_errors_reported() {\r\n        let bundle_content = format!(\r\n            \"Leading garbage.\\n\\\r\n            {}\\n\\\r\n            {}/abs/path.txt\\n\\\r\n            {}\\n\\\r\n            Content1\\n\\\r\n            {}\\n\\\r\n            {}\\n\\\r\n            {}\\n\\\r\n            Content2\\n\\\r\n            Trailing garbage.\",\r\n            FILE_HEADER_SEPARATOR,\r\n            FILE_PATH_PREFIX,\r\n            FILE_HEADER_SEPARATOR,\r\n            FILE_HEADER_SEPARATOR,\r\n            FILE_PATH_PREFIX,\r\n            FILE_HEADER_SEPARATOR\r\n        );\r\n        let temp_file = create_temp_bundle_file(\u0026bundle_content);\r\n        let result = parse_bundle(temp_file.path());\r\n\r\n        assert!(result.is_err());\r\n        if let Err(err) = result {\r\n            if let Some(bundle_parse_error) = err.downcast_ref::\u003cBundleParseError\u003e() {\r\n                assert_eq!(\r\n                    bundle_parse_error.errors.len(),\r\n                    2,\r\n                    \"Expected 2 errors, got {}. Errors: {:?}\",\r\n                    bundle_parse_error.errors.len(),\r\n                    bundle_parse_error.errors\r\n                );\r\n\r\n                assert!(\r\n                    !bundle_parse_error.errors.contains(\r\n                        \u0026BundleValidationError::ContentBeforeFirstHeader {\r\n                            line_number: 1,\r\n                            content_excerpt: \"Leading garbage.\".to_string()\r\n                        }\r\n                    ),\r\n                    \"ContentBeforeFirstHeader should now be a warning, not an error.\"\r\n                );\r\n\r\n                assert!(bundle_parse_error.errors.contains(\r\n                    \u0026BundleValidationError::AbsolutePathNotAllowed {\r\n                        line_number: 3,\r\n                        path: \"/abs/path.txt\".to_string()\r\n                    }\r\n                ));\r\n                assert!(\r\n                    bundle_parse_error\r\n                        .errors\r\n                        .contains(\u0026BundleValidationError::EmptyPath { line_number: 7 })\r\n                );\r\n            } else {\r\n                panic!(\"Error is not a BundleParseError: {:?}\", err);\r\n            }\r\n        } else {\r\n            panic!(\"Expected an error, but got Ok. Result: {:?}\", result);\r\n        }\r\n    }\r\n}\r\n","traces":[{"line":76,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":77,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":79,"address":[],"length":0,"stats":{"Line":0}},{"line":80,"address":[],"length":0,"stats":{"Line":0}},{"line":81,"address":[],"length":0,"stats":{"Line":0}},{"line":82,"address":[],"length":0,"stats":{"Line":0}},{"line":84,"address":[],"length":0,"stats":{"Line":0}},{"line":87,"address":[],"length":0,"stats":{"Line":0}},{"line":88,"address":[],"length":0,"stats":{"Line":0}},{"line":89,"address":[],"length":0,"stats":{"Line":0}},{"line":90,"address":[],"length":0,"stats":{"Line":0}},{"line":92,"address":[],"length":0,"stats":{"Line":0}},{"line":95,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":96,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":97,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":98,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":100,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":103,"address":[],"length":0,"stats":{"Line":0}},{"line":104,"address":[],"length":0,"stats":{"Line":0}},{"line":105,"address":[],"length":0,"stats":{"Line":0}},{"line":106,"address":[],"length":0,"stats":{"Line":0}},{"line":108,"address":[],"length":0,"stats":{"Line":0}},{"line":111,"address":[],"length":0,"stats":{"Line":0}},{"line":112,"address":[],"length":0,"stats":{"Line":0}},{"line":113,"address":[],"length":0,"stats":{"Line":0}},{"line":114,"address":[],"length":0,"stats":{"Line":0}},{"line":116,"address":[],"length":0,"stats":{"Line":0}},{"line":119,"address":[],"length":0,"stats":{"Line":0}},{"line":120,"address":[],"length":0,"stats":{"Line":0}},{"line":121,"address":[],"length":0,"stats":{"Line":0}},{"line":122,"address":[],"length":0,"stats":{"Line":0}},{"line":124,"address":[],"length":0,"stats":{"Line":0}},{"line":126,"address":[],"length":0,"stats":{"Line":0}},{"line":127,"address":[],"length":0,"stats":{"Line":0}},{"line":129,"address":[],"length":0,"stats":{"Line":0}},{"line":130,"address":[],"length":0,"stats":{"Line":0}},{"line":132,"address":[],"length":0,"stats":{"Line":0}},{"line":134,"address":[],"length":0,"stats":{"Line":0}},{"line":135,"address":[],"length":0,"stats":{"Line":0}},{"line":137,"address":[],"length":0,"stats":{"Line":0}},{"line":138,"address":[],"length":0,"stats":{"Line":0}},{"line":140,"address":[],"length":0,"stats":{"Line":0}},{"line":142,"address":[],"length":0,"stats":{"Line":0}},{"line":143,"address":[],"length":0,"stats":{"Line":0}},{"line":144,"address":[],"length":0,"stats":{"Line":0}},{"line":146,"address":[],"length":0,"stats":{"Line":0}},{"line":150,"address":[],"length":0,"stats":{"Line":0}},{"line":151,"address":[],"length":0,"stats":{"Line":0}},{"line":152,"address":[],"length":0,"stats":{"Line":0}},{"line":153,"address":[],"length":0,"stats":{"Line":0}},{"line":155,"address":[],"length":0,"stats":{"Line":0}},{"line":158,"address":[],"length":0,"stats":{"Line":0}},{"line":159,"address":[],"length":0,"stats":{"Line":0}},{"line":160,"address":[],"length":0,"stats":{"Line":0}},{"line":161,"address":[],"length":0,"stats":{"Line":0}},{"line":163,"address":[],"length":0,"stats":{"Line":0}},{"line":176,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":177,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":178,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":180,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":182,"address":[],"length":0,"stats":{"Line":216172782113783808}},{"line":183,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":185,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":194,"address":[],"length":0,"stats":{"Line":2161727821137838080}},{"line":195,"address":[],"length":0,"stats":{"Line":4323455642275676160}},{"line":196,"address":[],"length":0,"stats":{"Line":4323455642275676160}},{"line":199,"address":[],"length":0,"stats":{"Line":216172782113783808}},{"line":202,"address":[],"length":0,"stats":{"Line":1945555039024054272}},{"line":203,"address":[],"length":0,"stats":{"Line":1945555039024054272}},{"line":204,"address":[],"length":0,"stats":{"Line":1945555039024054272}},{"line":206,"address":[],"length":0,"stats":{"Line":1945555039024054272}},{"line":208,"address":[],"length":0,"stats":{"Line":1945555039024054272}},{"line":209,"address":[],"length":0,"stats":{"Line":2305843009213693952}},{"line":210,"address":[],"length":0,"stats":{"Line":2305843009213693952}},{"line":211,"address":[],"length":0,"stats":{"Line":1945555039024054272}},{"line":212,"address":[],"length":0,"stats":{"Line":1873497444986126336}},{"line":214,"address":[],"length":0,"stats":{"Line":1729382256910270464}},{"line":215,"address":[],"length":0,"stats":{"Line":1729382256910270464}},{"line":222,"address":[],"length":0,"stats":{"Line":1729382256910270464}},{"line":223,"address":[],"length":0,"stats":{"Line":144115188075855872}},{"line":224,"address":[],"length":0,"stats":{"Line":144115188075855872}},{"line":225,"address":[],"length":0,"stats":{"Line":144115188075855872}},{"line":232,"address":[],"length":0,"stats":{"Line":432345564227567616}},{"line":235,"address":[],"length":0,"stats":{"Line":216172782113783808}},{"line":237,"address":[],"length":0,"stats":{"Line":432345564227567616}},{"line":238,"address":[],"length":0,"stats":{"Line":216172782113783808}},{"line":247,"address":[],"length":0,"stats":{"Line":144115188075855872}},{"line":251,"address":[],"length":0,"stats":{"Line":4323455642275676160}},{"line":252,"address":[],"length":0,"stats":{"Line":2377900603251621888}},{"line":253,"address":[],"length":0,"stats":{"Line":2377900603251621888}},{"line":255,"address":[],"length":0,"stats":{"Line":2377900603251621888}},{"line":256,"address":[],"length":0,"stats":{"Line":2305843009213693952}},{"line":257,"address":[],"length":0,"stats":{"Line":2305843009213693952}},{"line":258,"address":[],"length":0,"stats":{"Line":2305843009213693952}},{"line":259,"address":[],"length":0,"stats":{"Line":2305843009213693952}},{"line":261,"address":[],"length":0,"stats":{"Line":2305843009213693952}},{"line":262,"address":[],"length":0,"stats":{"Line":2305843009213693952}},{"line":263,"address":[],"length":0,"stats":{"Line":0}},{"line":264,"address":[],"length":0,"stats":{"Line":0}},{"line":265,"address":[],"length":0,"stats":{"Line":0}},{"line":266,"address":[],"length":0,"stats":{"Line":0}},{"line":267,"address":[],"length":0,"stats":{"Line":0}},{"line":268,"address":[],"length":0,"stats":{"Line":0}},{"line":269,"address":[],"length":0,"stats":{"Line":0}},{"line":270,"address":[],"length":0,"stats":{"Line":0}},{"line":271,"address":[],"length":0,"stats":{"Line":0}},{"line":272,"address":[],"length":0,"stats":{"Line":0}},{"line":273,"address":[],"length":0,"stats":{"Line":0}},{"line":278,"address":[],"length":0,"stats":{"Line":2305843009213693952}},{"line":280,"address":[],"length":0,"stats":{"Line":2305843009213693952}},{"line":281,"address":[],"length":0,"stats":{"Line":2305843009213693952}},{"line":282,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":283,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":285,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":286,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":288,"address":[],"length":0,"stats":{"Line":2233785415175766016}},{"line":289,"address":[],"length":0,"stats":{"Line":0}},{"line":290,"address":[],"length":0,"stats":{"Line":0}},{"line":291,"address":[],"length":0,"stats":{"Line":0}},{"line":292,"address":[],"length":0,"stats":{"Line":0}},{"line":293,"address":[],"length":0,"stats":{"Line":0}},{"line":294,"address":[],"length":0,"stats":{"Line":0}},{"line":295,"address":[],"length":0,"stats":{"Line":0}},{"line":296,"address":[],"length":0,"stats":{"Line":0}},{"line":297,"address":[],"length":0,"stats":{"Line":0}},{"line":300,"address":[],"length":0,"stats":{"Line":0}},{"line":301,"address":[],"length":0,"stats":{"Line":0}},{"line":303,"address":[],"length":0,"stats":{"Line":2233785415175766016}},{"line":305,"address":[],"length":0,"stats":{"Line":2233785415175766016}},{"line":306,"address":[],"length":0,"stats":{"Line":2233785415175766016}},{"line":307,"address":[],"length":0,"stats":{"Line":0}},{"line":308,"address":[],"length":0,"stats":{"Line":0}},{"line":310,"address":[],"length":0,"stats":{"Line":0}},{"line":311,"address":[],"length":0,"stats":{"Line":0}},{"line":313,"address":[],"length":0,"stats":{"Line":2233785415175766016}},{"line":314,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":315,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":316,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":317,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":318,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":319,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":320,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":321,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":324,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":325,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":328,"address":[],"length":0,"stats":{"Line":2161727821137838080}},{"line":329,"address":[],"length":0,"stats":{"Line":2161727821137838080}},{"line":330,"address":[],"length":0,"stats":{"Line":2161727821137838080}},{"line":332,"address":[],"length":0,"stats":{"Line":4035225266123964416}},{"line":333,"address":[],"length":0,"stats":{"Line":1945555039024054272}},{"line":334,"address":[],"length":0,"stats":{"Line":1945555039024054272}},{"line":335,"address":[],"length":0,"stats":{"Line":1945555039024054272}},{"line":337,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":338,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":339,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":341,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":342,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":347,"address":[],"length":0,"stats":{"Line":216172782113783808}},{"line":348,"address":[],"length":0,"stats":{"Line":216172782113783808}},{"line":349,"address":[],"length":0,"stats":{"Line":216172782113783808}},{"line":350,"address":[],"length":0,"stats":{"Line":216172782113783808}},{"line":351,"address":[],"length":0,"stats":{"Line":216172782113783808}},{"line":352,"address":[],"length":0,"stats":{"Line":216172782113783808}},{"line":353,"address":[],"length":0,"stats":{"Line":216172782113783808}},{"line":354,"address":[],"length":0,"stats":{"Line":216172782113783808}},{"line":355,"address":[],"length":0,"stats":{"Line":216172782113783808}},{"line":358,"address":[],"length":0,"stats":{"Line":216172782113783808}},{"line":359,"address":[],"length":0,"stats":{"Line":216172782113783808}},{"line":364,"address":[],"length":0,"stats":{"Line":144115188075855872}},{"line":365,"address":[],"length":0,"stats":{"Line":144115188075855872}},{"line":366,"address":[],"length":0,"stats":{"Line":144115188075855872}},{"line":376,"address":[],"length":0,"stats":{"Line":1729382256910270464}},{"line":378,"address":[],"length":0,"stats":{"Line":1585267068834414592}},{"line":379,"address":[],"length":0,"stats":{"Line":1729382256910270464}},{"line":384,"address":[],"length":0,"stats":{"Line":144115188075855872}},{"line":385,"address":[],"length":0,"stats":{"Line":144115188075855872}},{"line":386,"address":[],"length":0,"stats":{"Line":144115188075855872}},{"line":387,"address":[],"length":0,"stats":{"Line":144115188075855872}},{"line":389,"address":[],"length":0,"stats":{"Line":144115188075855872}},{"line":394,"address":[],"length":0,"stats":{"Line":1657324662872342528}},{"line":395,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":396,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":397,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":399,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":408,"address":[],"length":0,"stats":{"Line":0}},{"line":409,"address":[],"length":0,"stats":{"Line":0}},{"line":410,"address":[],"length":0,"stats":{"Line":0}},{"line":411,"address":[],"length":0,"stats":{"Line":0}},{"line":414,"address":[],"length":0,"stats":{"Line":0}},{"line":415,"address":[],"length":0,"stats":{"Line":0}},{"line":417,"address":[],"length":0,"stats":{"Line":1873497444986126336}},{"line":418,"address":[],"length":0,"stats":{"Line":144115188075855872}},{"line":419,"address":[],"length":0,"stats":{"Line":144115188075855872}},{"line":420,"address":[],"length":0,"stats":{"Line":144115188075855872}},{"line":421,"address":[],"length":0,"stats":{"Line":144115188075855872}},{"line":424,"address":[],"length":0,"stats":{"Line":144115188075855872}},{"line":425,"address":[],"length":0,"stats":{"Line":144115188075855872}},{"line":428,"address":[],"length":0,"stats":{"Line":1729382256910270464}},{"line":429,"address":[],"length":0,"stats":{"Line":1729382256910270464}},{"line":430,"address":[],"length":0,"stats":{"Line":0}},{"line":431,"address":[],"length":0,"stats":{"Line":0}},{"line":432,"address":[],"length":0,"stats":{"Line":0}},{"line":433,"address":[],"length":0,"stats":{"Line":0}},{"line":436,"address":[],"length":0,"stats":{"Line":0}},{"line":437,"address":[],"length":0,"stats":{"Line":0}},{"line":439,"address":[],"length":0,"stats":{"Line":1729382256910270464}},{"line":440,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":441,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":442,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":443,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":444,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":445,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":446,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":448,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":449,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":452,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":453,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":456,"address":[],"length":0,"stats":{"Line":1657324662872342528}},{"line":458,"address":[],"length":0,"stats":{"Line":1657324662872342528}},{"line":459,"address":[],"length":0,"stats":{"Line":1657324662872342528}},{"line":460,"address":[],"length":0,"stats":{"Line":1657324662872342528}},{"line":461,"address":[],"length":0,"stats":{"Line":2089670227099910144}},{"line":462,"address":[],"length":0,"stats":{"Line":1224979098644774912}},{"line":470,"address":[],"length":0,"stats":{"Line":1297036692682702848}},{"line":471,"address":[],"length":0,"stats":{"Line":1297036692682702848}},{"line":477,"address":[],"length":0,"stats":{"Line":72057594037927936}},{"line":478,"address":[],"length":0,"stats":{"Line":144115188075855872}},{"line":479,"address":[],"length":0,"stats":{"Line":0}},{"line":480,"address":[],"length":0,"stats":{"Line":0}},{"line":481,"address":[],"length":0,"stats":{"Line":0}},{"line":482,"address":[],"length":0,"stats":{"Line":0}},{"line":483,"address":[],"length":0,"stats":{"Line":0}},{"line":484,"address":[],"length":0,"stats":{"Line":0}},{"line":485,"address":[],"length":0,"stats":{"Line":0}},{"line":486,"address":[],"length":0,"stats":{"Line":0}},{"line":487,"address":[],"length":0,"stats":{"Line":0}},{"line":488,"address":[],"length":0,"stats":{"Line":0}},{"line":489,"address":[],"length":0,"stats":{"Line":0}},{"line":490,"address":[],"length":0,"stats":{"Line":0}},{"line":500,"address":[],"length":0,"stats":{"Line":1008806316530991104}},{"line":501,"address":[],"length":0,"stats":{"Line":1008806316530991104}},{"line":505,"address":[],"length":0,"stats":{"Line":936748722493063168}}],"covered":143,"coverable":242},{"path":["E:","\\","git","codesprout","tests","integration_tests.rs"],"content":"use assert_cmd::prelude::*;\r\nuse predicates::prelude::*;\r\nuse std::fs;\r\nuse std::io::Write;\r\nuse std::process::Command;\r\nuse tempfile::NamedTempFile;\r\nuse tempfile::TempDir;\r\n\r\nfn create_temp_bundle_file(content: \u0026str) -\u003e NamedTempFile {\r\n    let mut file = NamedTempFile::new().expect(\"Failed to create temp bundle file\");\r\n    write!(file, \"{}\", content).expect(\"Failed to write to temp bundle file\");\r\n    file\r\n}\r\n\r\n#[test]\r\nfn test_valid_bundle_simple_structure() -\u003e Result\u003c(), Box\u003cdyn std::error::Error\u003e\u003e {\r\n    let bundle_content = \"================================================\\nFile: file1.txt\\n================================================\\nHello from file1\\n================================================\\nFile: file2.txt\\n================================================\\nContent of file2\\n\";\r\n    let bundle_file = create_temp_bundle_file(bundle_content);\r\n    let output_dir = TempDir::new()?;\r\n\r\n    let mut cmd = Command::cargo_bin(\"sprout\")?;\r\n    cmd.arg(bundle_file.path()).arg(output_dir.path());\r\n\r\n    cmd.assert()\r\n        .success()\r\n        .stdout(predicate::str::contains(format!(\r\n            \"Successfully sprouted 2 file(s) from '{}' to '{}'.\",\r\n            bundle_file.path().display(),\r\n            output_dir.path().display()\r\n        )));\r\n\r\n    let file1_path = output_dir.path().join(\"file1.txt\");\r\n    let file2_path = output_dir.path().join(\"file2.txt\");\r\n\r\n    assert!(file1_path.exists());\r\n    assert_eq!(fs::read_to_string(file1_path)?, \"Hello from file1\\n\");\r\n\r\n    assert!(file2_path.exists());\r\n    assert_eq!(fs::read_to_string(file2_path)?, \"Content of file2\\n\");\r\n\r\n    Ok(())\r\n}\r\n\r\n#[test]\r\nfn test_valid_bundle_nested_structure() -\u003e Result\u003c(), Box\u003cdyn std::error::Error\u003e\u003e {\r\n    let bundle_content = \"================================================\\nFile: dir1/file1.txt\\n================================================\\nNested content\\n================================================\\nFile: dir1/dir2/file2.txt\\n================================================\\nDeeply nested\\n\";\r\n    let bundle_file = create_temp_bundle_file(bundle_content);\r\n    let output_dir = TempDir::new()?;\r\n\r\n    let mut cmd = Command::cargo_bin(\"sprout\")?;\r\n    cmd.arg(bundle_file.path()).arg(output_dir.path());\r\n\r\n    cmd.assert()\r\n        .success()\r\n        .stdout(predicate::str::contains(format!(\r\n            \"Successfully sprouted 2 file(s) from '{}' to '{}'.\",\r\n            bundle_file.path().display(),\r\n            output_dir.path().display()\r\n        )));\r\n\r\n    let file1_path = output_dir.path().join(\"dir1/file1.txt\");\r\n    let file2_path = output_dir.path().join(\"dir1/dir2/file2.txt\");\r\n\r\n    assert!(file1_path.exists());\r\n    assert_eq!(fs::read_to_string(file1_path)?, \"Nested content\\n\");\r\n\r\n    assert!(file2_path.exists());\r\n    assert_eq!(fs::read_to_string(file2_path)?, \"Deeply nested\\n\");\r\n\r\n    Ok(())\r\n}\r\n\r\n#[test]\r\nfn test_malformed_bundle_file() -\u003e Result\u003c(), Box\u003cdyn std::error::Error\u003e\u003e {\r\n    let bundle_content = \"================================================\\nFile: file1.txt\\nThis is not a valid header\\nContent\\n\";\r\n    let bundle_file = create_temp_bundle_file(bundle_content);\r\n    let output_dir = TempDir::new()?;\r\n\r\n    let mut cmd = Command::cargo_bin(\"sprout\")?;\r\n    cmd.arg(bundle_file.path()).arg(output_dir.path());\r\n\r\n    cmd.assert().failure().stderr(\r\n        predicate::str::contains(\"Bundle parsing failed\")\r\n            .and(predicate::str::contains(\"Malformed file header\")),\r\n    );\r\n\r\n    assert!(fs::read_dir(output_dir.path())?.next().is_none());\r\n\r\n    Ok(())\r\n}\r\n\r\n#[test]\r\nfn test_output_file_collision() -\u003e Result\u003c(), Box\u003cdyn std::error::Error\u003e\u003e {\r\n    let bundle_content = \"================================================\\nFile: existing_file.txt\\n================================================\\nSome content\\n\";\r\n    let bundle_file = create_temp_bundle_file(bundle_content);\r\n    let output_dir = TempDir::new()?;\r\n\r\n    let conflicting_file_path = output_dir.path().join(\"existing_file.txt\");\r\n    fs::write(\u0026conflicting_file_path, \"Original content\")?;\r\n\r\n    let mut cmd = Command::cargo_bin(\"sprout\")?;\r\n    cmd.arg(bundle_file.path()).arg(output_dir.path());\r\n\r\n    cmd.assert().failure().stderr(\r\n        predicate::str::contains(\"Output path collision detected\").and(predicate::str::contains(\r\n            conflicting_file_path.to_str().unwrap(),\r\n        )),\r\n    );\r\n\r\n    assert_eq!(\r\n        fs::read_to_string(conflicting_file_path)?,\r\n        \"Original content\"\r\n    );\r\n\r\n    Ok(())\r\n}\r\n\r\n#[test]\r\nfn test_empty_bundle_file() -\u003e Result\u003c(), Box\u003cdyn std::error::Error\u003e\u003e {\r\n    let bundle_file = create_temp_bundle_file(\"\");\r\n    let output_dir = TempDir::new()?;\r\n\r\n    let mut cmd = Command::cargo_bin(\"sprout\")?;\r\n    cmd.arg(bundle_file.path()).arg(output_dir.path());\r\n\r\n    cmd.assert()\r\n        .success()\r\n        .stdout(predicate::str::contains(format!(\r\n            \"Bundle file '{}' is empty or contains no valid entries. Nothing to sprout.\",\r\n            bundle_file.path().display()\r\n        )));\r\n\r\n    assert!(fs::read_dir(output_dir.path())?.next().is_none());\r\n    Ok(())\r\n}\r\n\r\n#[test]\r\nfn test_output_to_current_directory_default() -\u003e Result\u003c(), Box\u003cdyn std::error::Error\u003e\u003e {\r\n    let bundle_content = \"================================================\\nFile: default_dir_file.txt\\n================================================\\nDefault dir test\\n\";\r\n    let bundle_file = create_temp_bundle_file(bundle_content);\r\n\r\n    let current_dir_scope = TempDir::new()?;\r\n\r\n    let mut cmd = Command::cargo_bin(\"sprout\")?;\r\n    cmd.current_dir(current_dir_scope.path())\r\n        .arg(bundle_file.path());\r\n\r\n    cmd.assert()\r\n        .success()\r\n        .stdout(predicate::str::contains(format!(\r\n            \"Successfully sprouted 1 file(s) from '{}' to '{}'.\",\r\n            bundle_file.path().display(),\r\n            \".\"\r\n        )));\r\n\r\n    let file_path = current_dir_scope.path().join(\"default_dir_file.txt\");\r\n    assert!(file_path.exists());\r\n    assert_eq!(fs::read_to_string(file_path)?, \"Default dir test\\n\");\r\n\r\n    Ok(())\r\n}\r\n\r\n#[test]\r\nfn test_output_to_specified_directory_via_positional_arg() -\u003e Result\u003c(), Box\u003cdyn std::error::Error\u003e\u003e\r\n{\r\n    let bundle_content = \"================================================\\nFile: specified_pos_file.txt\\n================================================\\nSpecified dir test - positional\\n\";\r\n    let bundle_file = create_temp_bundle_file(bundle_content);\r\n    let output_dir = TempDir::new()?;\r\n\r\n    let mut cmd = Command::cargo_bin(\"sprout\")?;\r\n    cmd.arg(bundle_file.path()).arg(output_dir.path());\r\n\r\n    cmd.assert()\r\n        .success()\r\n        .stdout(predicate::str::contains(format!(\r\n            \"Successfully sprouted 1 file(s) from '{}' to '{}'.\",\r\n            bundle_file.path().display(),\r\n            output_dir.path().display()\r\n        )));\r\n\r\n    let file_path = output_dir.path().join(\"specified_pos_file.txt\");\r\n    assert!(file_path.exists());\r\n    assert_eq!(\r\n        fs::read_to_string(file_path)?,\r\n        \"Specified dir test - positional\\n\"\r\n    );\r\n\r\n    Ok(())\r\n}\r\n\r\n#[test]\r\nfn test_output_to_specified_directory_via_o_flag() -\u003e Result\u003c(), Box\u003cdyn std::error::Error\u003e\u003e {\r\n    let bundle_content = \"================================================\\nFile: specified_flag_file.txt\\n================================================\\nSpecified dir test - flag\\n\";\r\n    let bundle_file = create_temp_bundle_file(bundle_content);\r\n    let output_dir = TempDir::new()?;\r\n\r\n    let mut cmd = Command::cargo_bin(\"sprout\")?;\r\n    cmd.arg(bundle_file.path()).arg(\"-o\").arg(output_dir.path());\r\n\r\n    cmd.assert()\r\n        .success()\r\n        .stdout(predicate::str::contains(format!(\r\n            \"Successfully sprouted 1 file(s) from '{}' to '{}'.\",\r\n            bundle_file.path().display(),\r\n            output_dir.path().display()\r\n        )));\r\n\r\n    let file_path = output_dir.path().join(\"specified_flag_file.txt\");\r\n    assert!(file_path.exists());\r\n    assert_eq!(\r\n        fs::read_to_string(file_path)?,\r\n        \"Specified dir test - flag\\n\"\r\n    );\r\n\r\n    Ok(())\r\n}\r\n\r\n#[test]\r\nfn test_input_via_i_flag() -\u003e Result\u003c(), Box\u003cdyn std::error::Error\u003e\u003e {\r\n    let bundle_content = \"================================================\\nFile: input_flag_test.txt\\n================================================\\nInput via -i flag\\n\";\r\n    let bundle_file = create_temp_bundle_file(bundle_content);\r\n    let output_dir = TempDir::new()?;\r\n\r\n    let mut cmd = Command::cargo_bin(\"sprout\")?;\r\n    cmd.arg(\"-i\")\r\n        .arg(bundle_file.path())\r\n        .arg(\"-o\")\r\n        .arg(output_dir.path());\r\n\r\n    cmd.assert()\r\n        .success()\r\n        .stdout(predicate::str::contains(format!(\r\n            \"Successfully sprouted 1 file(s) from '{}' to '{}'.\",\r\n            bundle_file.path().display(),\r\n            output_dir.path().display()\r\n        )));\r\n\r\n    let file_path = output_dir.path().join(\"input_flag_test.txt\");\r\n    assert!(file_path.exists());\r\n    assert_eq!(fs::read_to_string(file_path)?, \"Input via -i flag\\n\");\r\n\r\n    Ok(())\r\n}\r\n\r\n#[test]\r\nfn test_missing_input_bundle() -\u003e Result\u003c(), Box\u003cdyn std::error::Error\u003e\u003e {\r\n    let mut cmd = Command::cargo_bin(\"sprout\")?;\r\n    cmd.assert().failure().stderr(\r\n        predicate::str::contains(\"error: the following required arguments were not provided:\")\r\n            .and(predicate::str::contains(\"\u003cBUNDLE_FILE_PATH\u003e\")),\r\n    );\r\n    Ok(())\r\n}\r\n\r\n#[test]\r\nfn test_bundle_with_empty_file_content() -\u003e Result\u003c(), Box\u003cdyn std::error::Error\u003e\u003e {\r\n    let bundle_content = \"================================================\\nFile: empty_file.txt\\n================================================\\n\";\r\n    let bundle_file = create_temp_bundle_file(bundle_content);\r\n    let output_dir = TempDir::new()?;\r\n\r\n    let mut cmd = Command::cargo_bin(\"sprout\")?;\r\n    cmd.arg(bundle_file.path()).arg(output_dir.path());\r\n\r\n    cmd.assert()\r\n        .success()\r\n        .stdout(predicate::str::contains(format!(\r\n            \"Successfully sprouted 1 file(s) from '{}' to '{}'.\",\r\n            bundle_file.path().display(),\r\n            output_dir.path().display()\r\n        )));\r\n\r\n    let file_path = output_dir.path().join(\"empty_file.txt\");\r\n    assert!(file_path.exists());\r\n    assert_eq!(fs::read_to_string(file_path)?, \"\");\r\n\r\n    Ok(())\r\n}\r\n\r\n#[test]\r\nfn test_force_overwrite_existing_file() -\u003e Result\u003c(), Box\u003cdyn std::error::Error\u003e\u003e {\r\n    let bundle_content = \"================================================\\nFile: overwrite_me.txt\\n================================================\\nNew Content\\n\";\r\n    let bundle_file = create_temp_bundle_file(bundle_content);\r\n    let output_dir = TempDir::new()?;\r\n    let target_file_path = output_dir.path().join(\"overwrite_me.txt\");\r\n\r\n    // Create the file initially\r\n    fs::write(\u0026target_file_path, \"Old Content\")?;\r\n    assert_eq!(fs::read_to_string(\u0026target_file_path)?, \"Old Content\");\r\n\r\n    let mut cmd = Command::cargo_bin(\"sprout\")?;\r\n    cmd.arg(bundle_file.path())\r\n        .arg(output_dir.path())\r\n        .arg(\"--force\");\r\n\r\n    cmd.assert()\r\n        .success()\r\n        .stdout(predicate::str::contains(format!(\r\n            \"Successfully sprouted 1 file(s) from '{}' to '{}'. (files overwritten if necessary)\",\r\n            bundle_file.path().display(),\r\n            output_dir.path().display()\r\n        )));\r\n\r\n    assert!(target_file_path.exists());\r\n    assert_eq!(fs::read_to_string(target_file_path)?, \"New Content\\n\");\r\n\r\n    Ok(())\r\n}\r\n\r\n#[test]\r\nfn test_force_overwrite_existing_file_short_flag() -\u003e Result\u003c(), Box\u003cdyn std::error::Error\u003e\u003e {\r\n    let bundle_content = \"================================================\\nFile: overwrite_me_short.txt\\n================================================\\nNew Content Short\\n\";\r\n    let bundle_file = create_temp_bundle_file(bundle_content);\r\n    let output_dir = TempDir::new()?;\r\n    let target_file_path = output_dir.path().join(\"overwrite_me_short.txt\");\r\n\r\n    // Create the file initially\r\n    fs::write(\u0026target_file_path, \"Old Content Short\")?;\r\n    assert_eq!(fs::read_to_string(\u0026target_file_path)?, \"Old Content Short\");\r\n\r\n    let mut cmd = Command::cargo_bin(\"sprout\")?;\r\n    cmd.arg(bundle_file.path()).arg(output_dir.path()).arg(\"-f\"); // Short flag for force\r\n\r\n    cmd.assert()\r\n        .success()\r\n        .stdout(predicate::str::contains(format!(\r\n            \"Successfully sprouted 1 file(s) from '{}' to '{}'. (files overwritten if necessary)\",\r\n            bundle_file.path().display(),\r\n            output_dir.path().display()\r\n        )));\r\n\r\n    assert!(target_file_path.exists());\r\n    assert_eq!(fs::read_to_string(target_file_path)?, \"New Content Short\\n\");\r\n\r\n    Ok(())\r\n}\r\n\r\n#[test]\r\nfn test_force_still_fails_if_parent_is_file() -\u003e Result\u003c(), Box\u003cdyn std::error::Error\u003e\u003e {\r\n    let bundle_content = \"================================================\\nFile: existing_file_as_parent/new_child.txt\\n================================================\\nShould not be created\\n\";\r\n    let bundle_file = create_temp_bundle_file(bundle_content);\r\n    let output_dir = TempDir::new()?;\r\n\r\n    // Create a file that would be a parent directory\r\n    let conflicting_parent_path = output_dir.path().join(\"existing_file_as_parent\");\r\n    fs::write(\u0026conflicting_parent_path, \"I am a file.\")?;\r\n\r\n    let mut cmd = Command::cargo_bin(\"sprout\")?;\r\n    cmd.arg(bundle_file.path())\r\n        .arg(output_dir.path())\r\n        .arg(\"--force\");\r\n\r\n    cmd.assert().failure().stderr(\r\n        predicate::str::contains(\"Failed to create parent directory\")\r\n            .or(\r\n                // Error from create_dir_all\r\n                predicate::str::contains(\"its parent\")\r\n                    .and(predicate::str::contains(\"is an existing file\")), // Error from bundler.rs explicit check\r\n            )\r\n            .or(\r\n                predicate::str::contains(\"Failed to write file\"), // Error from fs::write if parent is a file\r\n            ),\r\n    );\r\n\r\n    // Ensure original file is untouched and no new file/directory was created under/as it\r\n    assert_eq!(\r\n        fs::read_to_string(\u0026conflicting_parent_path)?,\r\n        \"I am a file.\"\r\n    );\r\n    assert!(\r\n        !output_dir\r\n            .path()\r\n            .join(\"existing_file_as_parent/new_child.txt\")\r\n            .exists()\r\n    );\r\n    assert!(conflicting_parent_path.is_file());\r\n\r\n    Ok(())\r\n}\r\n","traces":[],"covered":0,"coverable":0}]};
    </script>
    <script crossorigin>/** @license React v16.13.1
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
'use strict';(function(d,r){"object"===typeof exports&&"undefined"!==typeof module?r(exports):"function"===typeof define&&define.amd?define(["exports"],r):(d=d||self,r(d.React={}))})(this,function(d){function r(a){for(var b="https://reactjs.org/docs/error-decoder.html?invariant="+a,c=1;c<arguments.length;c++)b+="&args[]="+encodeURIComponent(arguments[c]);return"Minified React error #"+a+"; visit "+b+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}
function w(a,b,c){this.props=a;this.context=b;this.refs=ba;this.updater=c||ca}function da(){}function L(a,b,c){this.props=a;this.context=b;this.refs=ba;this.updater=c||ca}function ea(a,b,c){var g,e={},fa=null,d=null;if(null!=b)for(g in void 0!==b.ref&&(d=b.ref),void 0!==b.key&&(fa=""+b.key),b)ha.call(b,g)&&!ia.hasOwnProperty(g)&&(e[g]=b[g]);var h=arguments.length-2;if(1===h)e.children=c;else if(1<h){for(var k=Array(h),f=0;f<h;f++)k[f]=arguments[f+2];e.children=k}if(a&&a.defaultProps)for(g in h=a.defaultProps,
h)void 0===e[g]&&(e[g]=h[g]);return{$$typeof:x,type:a,key:fa,ref:d,props:e,_owner:M.current}}function va(a,b){return{$$typeof:x,type:a.type,key:b,ref:a.ref,props:a.props,_owner:a._owner}}function N(a){return"object"===typeof a&&null!==a&&a.$$typeof===x}function wa(a){var b={"=":"=0",":":"=2"};return"$"+(""+a).replace(/[=:]/g,function(a){return b[a]})}function ja(a,b,c,g){if(C.length){var e=C.pop();e.result=a;e.keyPrefix=b;e.func=c;e.context=g;e.count=0;return e}return{result:a,keyPrefix:b,func:c,
context:g,count:0}}function ka(a){a.result=null;a.keyPrefix=null;a.func=null;a.context=null;a.count=0;10>C.length&&C.push(a)}function O(a,b,c,g){var e=typeof a;if("undefined"===e||"boolean"===e)a=null;var d=!1;if(null===a)d=!0;else switch(e){case "string":case "number":d=!0;break;case "object":switch(a.$$typeof){case x:case xa:d=!0}}if(d)return c(g,a,""===b?"."+P(a,0):b),1;d=0;b=""===b?".":b+":";if(Array.isArray(a))for(var f=0;f<a.length;f++){e=a[f];var h=b+P(e,f);d+=O(e,h,c,g)}else if(null===a||
"object"!==typeof a?h=null:(h=la&&a[la]||a["@@iterator"],h="function"===typeof h?h:null),"function"===typeof h)for(a=h.call(a),f=0;!(e=a.next()).done;)e=e.value,h=b+P(e,f++),d+=O(e,h,c,g);else if("object"===e)throw c=""+a,Error(r(31,"[object Object]"===c?"object with keys {"+Object.keys(a).join(", ")+"}":c,""));return d}function Q(a,b,c){return null==a?0:O(a,"",b,c)}function P(a,b){return"object"===typeof a&&null!==a&&null!=a.key?wa(a.key):b.toString(36)}function ya(a,b,c){a.func.call(a.context,b,
a.count++)}function za(a,b,c){var g=a.result,e=a.keyPrefix;a=a.func.call(a.context,b,a.count++);Array.isArray(a)?R(a,g,c,function(a){return a}):null!=a&&(N(a)&&(a=va(a,e+(!a.key||b&&b.key===a.key?"":(""+a.key).replace(ma,"$&/")+"/")+c)),g.push(a))}function R(a,b,c,g,e){var d="";null!=c&&(d=(""+c).replace(ma,"$&/")+"/");b=ja(b,d,g,e);Q(a,za,b);ka(b)}function t(){var a=na.current;if(null===a)throw Error(r(321));return a}function S(a,b){var c=a.length;a.push(b);a:for(;;){var g=c-1>>>1,e=a[g];if(void 0!==
e&&0<D(e,b))a[g]=b,a[c]=e,c=g;else break a}}function n(a){a=a[0];return void 0===a?null:a}function E(a){var b=a[0];if(void 0!==b){var c=a.pop();if(c!==b){a[0]=c;a:for(var g=0,e=a.length;g<e;){var d=2*(g+1)-1,f=a[d],h=d+1,k=a[h];if(void 0!==f&&0>D(f,c))void 0!==k&&0>D(k,f)?(a[g]=k,a[h]=c,g=h):(a[g]=f,a[d]=c,g=d);else if(void 0!==k&&0>D(k,c))a[g]=k,a[h]=c,g=h;else break a}}return b}return null}function D(a,b){var c=a.sortIndex-b.sortIndex;return 0!==c?c:a.id-b.id}function F(a){for(var b=n(u);null!==
b;){if(null===b.callback)E(u);else if(b.startTime<=a)E(u),b.sortIndex=b.expirationTime,S(p,b);else break;b=n(u)}}function T(a){y=!1;F(a);if(!v)if(null!==n(p))v=!0,z(U);else{var b=n(u);null!==b&&G(T,b.startTime-a)}}function U(a,b){v=!1;y&&(y=!1,V());H=!0;var c=m;try{F(b);for(l=n(p);null!==l&&(!(l.expirationTime>b)||a&&!W());){var g=l.callback;if(null!==g){l.callback=null;m=l.priorityLevel;var e=g(l.expirationTime<=b);b=q();"function"===typeof e?l.callback=e:l===n(p)&&E(p);F(b)}else E(p);l=n(p)}if(null!==
l)var d=!0;else{var f=n(u);null!==f&&G(T,f.startTime-b);d=!1}return d}finally{l=null,m=c,H=!1}}function oa(a){switch(a){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1E4;default:return 5E3}}var f="function"===typeof Symbol&&Symbol.for,x=f?Symbol.for("react.element"):60103,xa=f?Symbol.for("react.portal"):60106,Aa=f?Symbol.for("react.fragment"):60107,Ba=f?Symbol.for("react.strict_mode"):60108,Ca=f?Symbol.for("react.profiler"):60114,Da=f?Symbol.for("react.provider"):60109,
Ea=f?Symbol.for("react.context"):60110,Fa=f?Symbol.for("react.forward_ref"):60112,Ga=f?Symbol.for("react.suspense"):60113,Ha=f?Symbol.for("react.memo"):60115,Ia=f?Symbol.for("react.lazy"):60116,la="function"===typeof Symbol&&Symbol.iterator,pa=Object.getOwnPropertySymbols,Ja=Object.prototype.hasOwnProperty,Ka=Object.prototype.propertyIsEnumerable,I=function(){try{if(!Object.assign)return!1;var a=new String("abc");a[5]="de";if("5"===Object.getOwnPropertyNames(a)[0])return!1;var b={};for(a=0;10>a;a++)b["_"+
String.fromCharCode(a)]=a;if("0123456789"!==Object.getOwnPropertyNames(b).map(function(a){return b[a]}).join(""))return!1;var c={};"abcdefghijklmnopqrst".split("").forEach(function(a){c[a]=a});return"abcdefghijklmnopqrst"!==Object.keys(Object.assign({},c)).join("")?!1:!0}catch(g){return!1}}()?Object.assign:function(a,b){if(null===a||void 0===a)throw new TypeError("Object.assign cannot be called with null or undefined");var c=Object(a);for(var g,e=1;e<arguments.length;e++){var d=Object(arguments[e]);
for(var f in d)Ja.call(d,f)&&(c[f]=d[f]);if(pa){g=pa(d);for(var h=0;h<g.length;h++)Ka.call(d,g[h])&&(c[g[h]]=d[g[h]])}}return c},ca={isMounted:function(a){return!1},enqueueForceUpdate:function(a,b,c){},enqueueReplaceState:function(a,b,c,d){},enqueueSetState:function(a,b,c,d){}},ba={};w.prototype.isReactComponent={};w.prototype.setState=function(a,b){if("object"!==typeof a&&"function"!==typeof a&&null!=a)throw Error(r(85));this.updater.enqueueSetState(this,a,b,"setState")};w.prototype.forceUpdate=
function(a){this.updater.enqueueForceUpdate(this,a,"forceUpdate")};da.prototype=w.prototype;f=L.prototype=new da;f.constructor=L;I(f,w.prototype);f.isPureReactComponent=!0;var M={current:null},ha=Object.prototype.hasOwnProperty,ia={key:!0,ref:!0,__self:!0,__source:!0},ma=/\/+/g,C=[],na={current:null},X;if("undefined"===typeof window||"function"!==typeof MessageChannel){var A=null,qa=null,ra=function(){if(null!==A)try{var a=q();A(!0,a);A=null}catch(b){throw setTimeout(ra,0),b;}},La=Date.now();var q=
function(){return Date.now()-La};var z=function(a){null!==A?setTimeout(z,0,a):(A=a,setTimeout(ra,0))};var G=function(a,b){qa=setTimeout(a,b)};var V=function(){clearTimeout(qa)};var W=function(){return!1};f=X=function(){}}else{var Y=window.performance,sa=window.Date,Ma=window.setTimeout,Na=window.clearTimeout;"undefined"!==typeof console&&(f=window.cancelAnimationFrame,"function"!==typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),
"function"!==typeof f&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"));if("object"===typeof Y&&"function"===typeof Y.now)q=function(){return Y.now()};else{var Oa=sa.now();q=function(){return sa.now()-Oa}}var J=!1,K=null,Z=-1,ta=5,ua=0;W=function(){return q()>=ua};f=function(){};X=function(a){0>a||125<a?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):
ta=0<a?Math.floor(1E3/a):5};var B=new MessageChannel,aa=B.port2;B.port1.onmessage=function(){if(null!==K){var a=q();ua=a+ta;try{K(!0,a)?aa.postMessage(null):(J=!1,K=null)}catch(b){throw aa.postMessage(null),b;}}else J=!1};z=function(a){K=a;J||(J=!0,aa.postMessage(null))};G=function(a,b){Z=Ma(function(){a(q())},b)};V=function(){Na(Z);Z=-1}}var p=[],u=[],Pa=1,l=null,m=3,H=!1,v=!1,y=!1,Qa=0;B={ReactCurrentDispatcher:na,ReactCurrentOwner:M,IsSomeRendererActing:{current:!1},assign:I};I(B,{Scheduler:{__proto__:null,
unstable_ImmediatePriority:1,unstable_UserBlockingPriority:2,unstable_NormalPriority:3,unstable_IdlePriority:5,unstable_LowPriority:4,unstable_runWithPriority:function(a,b){switch(a){case 1:case 2:case 3:case 4:case 5:break;default:a=3}var c=m;m=a;try{return b()}finally{m=c}},unstable_next:function(a){switch(m){case 1:case 2:case 3:var b=3;break;default:b=m}var c=m;m=b;try{return a()}finally{m=c}},unstable_scheduleCallback:function(a,b,c){var d=q();if("object"===typeof c&&null!==c){var e=c.delay;
e="number"===typeof e&&0<e?d+e:d;c="number"===typeof c.timeout?c.timeout:oa(a)}else c=oa(a),e=d;c=e+c;a={id:Pa++,callback:b,priorityLevel:a,startTime:e,expirationTime:c,sortIndex:-1};e>d?(a.sortIndex=e,S(u,a),null===n(p)&&a===n(u)&&(y?V():y=!0,G(T,e-d))):(a.sortIndex=c,S(p,a),v||H||(v=!0,z(U)));return a},unstable_cancelCallback:function(a){a.callback=null},unstable_wrapCallback:function(a){var b=m;return function(){var c=m;m=b;try{return a.apply(this,arguments)}finally{m=c}}},unstable_getCurrentPriorityLevel:function(){return m},
unstable_shouldYield:function(){var a=q();F(a);var b=n(p);return b!==l&&null!==l&&null!==b&&null!==b.callback&&b.startTime<=a&&b.expirationTime<l.expirationTime||W()},unstable_requestPaint:f,unstable_continueExecution:function(){v||H||(v=!0,z(U))},unstable_pauseExecution:function(){},unstable_getFirstCallbackNode:function(){return n(p)},get unstable_now(){return q},get unstable_forceFrameRate(){return X},unstable_Profiling:null},SchedulerTracing:{__proto__:null,__interactionsRef:null,__subscriberRef:null,
unstable_clear:function(a){return a()},unstable_getCurrent:function(){return null},unstable_getThreadID:function(){return++Qa},unstable_trace:function(a,b,c){return c()},unstable_wrap:function(a){return a},unstable_subscribe:function(a){},unstable_unsubscribe:function(a){}}});d.Children={map:function(a,b,c){if(null==a)return a;var d=[];R(a,d,null,b,c);return d},forEach:function(a,b,c){if(null==a)return a;b=ja(null,null,b,c);Q(a,ya,b);ka(b)},count:function(a){return Q(a,function(){return null},null)},
toArray:function(a){var b=[];R(a,b,null,function(a){return a});return b},only:function(a){if(!N(a))throw Error(r(143));return a}};d.Component=w;d.Fragment=Aa;d.Profiler=Ca;d.PureComponent=L;d.StrictMode=Ba;d.Suspense=Ga;d.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=B;d.cloneElement=function(a,b,c){if(null===a||void 0===a)throw Error(r(267,a));var d=I({},a.props),e=a.key,f=a.ref,m=a._owner;if(null!=b){void 0!==b.ref&&(f=b.ref,m=M.current);void 0!==b.key&&(e=""+b.key);if(a.type&&a.type.defaultProps)var h=
a.type.defaultProps;for(k in b)ha.call(b,k)&&!ia.hasOwnProperty(k)&&(d[k]=void 0===b[k]&&void 0!==h?h[k]:b[k])}var k=arguments.length-2;if(1===k)d.children=c;else if(1<k){h=Array(k);for(var l=0;l<k;l++)h[l]=arguments[l+2];d.children=h}return{$$typeof:x,type:a.type,key:e,ref:f,props:d,_owner:m}};d.createContext=function(a,b){void 0===b&&(b=null);a={$$typeof:Ea,_calculateChangedBits:b,_currentValue:a,_currentValue2:a,_threadCount:0,Provider:null,Consumer:null};a.Provider={$$typeof:Da,_context:a};return a.Consumer=
a};d.createElement=ea;d.createFactory=function(a){var b=ea.bind(null,a);b.type=a;return b};d.createRef=function(){return{current:null}};d.forwardRef=function(a){return{$$typeof:Fa,render:a}};d.isValidElement=N;d.lazy=function(a){return{$$typeof:Ia,_ctor:a,_status:-1,_result:null}};d.memo=function(a,b){return{$$typeof:Ha,type:a,compare:void 0===b?null:b}};d.useCallback=function(a,b){return t().useCallback(a,b)};d.useContext=function(a,b){return t().useContext(a,b)};d.useDebugValue=function(a,b){};
d.useEffect=function(a,b){return t().useEffect(a,b)};d.useImperativeHandle=function(a,b,c){return t().useImperativeHandle(a,b,c)};d.useLayoutEffect=function(a,b){return t().useLayoutEffect(a,b)};d.useMemo=function(a,b){return t().useMemo(a,b)};d.useReducer=function(a,b,c){return t().useReducer(a,b,c)};d.useRef=function(a){return t().useRef(a)};d.useState=function(a){return t().useState(a)};d.version="16.13.1"});
</script>
    <script crossorigin>/** @license React v16.13.1
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/*
 Modernizr 3.0.0pre (Custom Build) | MIT
*/
'use strict';(function(I,ea){"object"===typeof exports&&"undefined"!==typeof module?ea(exports,require("react")):"function"===typeof define&&define.amd?define(["exports","react"],ea):(I=I||self,ea(I.ReactDOM={},I.React))})(this,function(I,ea){function k(a){for(var b="https://reactjs.org/docs/error-decoder.html?invariant="+a,c=1;c<arguments.length;c++)b+="&args[]="+encodeURIComponent(arguments[c]);return"Minified React error #"+a+"; visit "+b+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}
function ji(a,b,c,d,e,f,g,h,m){yb=!1;gc=null;ki.apply(li,arguments)}function mi(a,b,c,d,e,f,g,h,m){ji.apply(this,arguments);if(yb){if(yb){var n=gc;yb=!1;gc=null}else throw Error(k(198));hc||(hc=!0,pd=n)}}function lf(a,b,c){var d=a.type||"unknown-event";a.currentTarget=mf(c);mi(d,b,void 0,a);a.currentTarget=null}function nf(){if(ic)for(var a in cb){var b=cb[a],c=ic.indexOf(a);if(!(-1<c))throw Error(k(96,a));if(!jc[c]){if(!b.extractEvents)throw Error(k(97,a));jc[c]=b;c=b.eventTypes;for(var d in c){var e=
void 0;var f=c[d],g=b,h=d;if(qd.hasOwnProperty(h))throw Error(k(99,h));qd[h]=f;var m=f.phasedRegistrationNames;if(m){for(e in m)m.hasOwnProperty(e)&&of(m[e],g,h);e=!0}else f.registrationName?(of(f.registrationName,g,h),e=!0):e=!1;if(!e)throw Error(k(98,d,a));}}}}function of(a,b,c){if(db[a])throw Error(k(100,a));db[a]=b;rd[a]=b.eventTypes[c].dependencies}function pf(a){var b=!1,c;for(c in a)if(a.hasOwnProperty(c)){var d=a[c];if(!cb.hasOwnProperty(c)||cb[c]!==d){if(cb[c])throw Error(k(102,c));cb[c]=
d;b=!0}}b&&nf()}function qf(a){if(a=rf(a)){if("function"!==typeof sd)throw Error(k(280));var b=a.stateNode;b&&(b=td(b),sd(a.stateNode,a.type,b))}}function sf(a){eb?fb?fb.push(a):fb=[a]:eb=a}function tf(){if(eb){var a=eb,b=fb;fb=eb=null;qf(a);if(b)for(a=0;a<b.length;a++)qf(b[a])}}function ud(){if(null!==eb||null!==fb)vd(),tf()}function uf(a,b,c){if(wd)return a(b,c);wd=!0;try{return vf(a,b,c)}finally{wd=!1,ud()}}function ni(a){if(wf.call(xf,a))return!0;if(wf.call(yf,a))return!1;if(oi.test(a))return xf[a]=
!0;yf[a]=!0;return!1}function pi(a,b,c,d){if(null!==c&&0===c.type)return!1;switch(typeof b){case "function":case "symbol":return!0;case "boolean":if(d)return!1;if(null!==c)return!c.acceptsBooleans;a=a.toLowerCase().slice(0,5);return"data-"!==a&&"aria-"!==a;default:return!1}}function qi(a,b,c,d){if(null===b||"undefined"===typeof b||pi(a,b,c,d))return!0;if(d)return!1;if(null!==c)switch(c.type){case 3:return!b;case 4:return!1===b;case 5:return isNaN(b);case 6:return isNaN(b)||1>b}return!1}function L(a,
b,c,d,e,f){this.acceptsBooleans=2===b||3===b||4===b;this.attributeName=d;this.attributeNamespace=e;this.mustUseProperty=c;this.propertyName=a;this.type=b;this.sanitizeURL=f}function xd(a,b,c,d){var e=E.hasOwnProperty(b)?E[b]:null;var f=null!==e?0===e.type:d?!1:!(2<b.length)||"o"!==b[0]&&"O"!==b[0]||"n"!==b[1]&&"N"!==b[1]?!1:!0;f||(qi(b,c,e,d)&&(c=null),d||null===e?ni(b)&&(null===c?a.removeAttribute(b):a.setAttribute(b,""+c)):e.mustUseProperty?a[e.propertyName]=null===c?3===e.type?!1:"":c:(b=e.attributeName,
d=e.attributeNamespace,null===c?a.removeAttribute(b):(e=e.type,c=3===e||4===e&&!0===c?"":""+c,d?a.setAttributeNS(d,b,c):a.setAttribute(b,c))))}function zb(a){if(null===a||"object"!==typeof a)return null;a=zf&&a[zf]||a["@@iterator"];return"function"===typeof a?a:null}function ri(a){if(-1===a._status){a._status=0;var b=a._ctor;b=b();a._result=b;b.then(function(b){0===a._status&&(b=b.default,a._status=1,a._result=b)},function(b){0===a._status&&(a._status=2,a._result=b)})}}function na(a){if(null==a)return null;
if("function"===typeof a)return a.displayName||a.name||null;if("string"===typeof a)return a;switch(a){case Ma:return"Fragment";case gb:return"Portal";case kc:return"Profiler";case Af:return"StrictMode";case lc:return"Suspense";case yd:return"SuspenseList"}if("object"===typeof a)switch(a.$$typeof){case Bf:return"Context.Consumer";case Cf:return"Context.Provider";case zd:var b=a.render;b=b.displayName||b.name||"";return a.displayName||(""!==b?"ForwardRef("+b+")":"ForwardRef");case Ad:return na(a.type);
case Df:return na(a.render);case Ef:if(a=1===a._status?a._result:null)return na(a)}return null}function Bd(a){var b="";do{a:switch(a.tag){case 3:case 4:case 6:case 7:case 10:case 9:var c="";break a;default:var d=a._debugOwner,e=a._debugSource,f=na(a.type);c=null;d&&(c=na(d.type));d=f;f="";e?f=" (at "+e.fileName.replace(si,"")+":"+e.lineNumber+")":c&&(f=" (created by "+c+")");c="\n    in "+(d||"Unknown")+f}b+=c;a=a.return}while(a);return b}function va(a){switch(typeof a){case "boolean":case "number":case "object":case "string":case "undefined":return a;
default:return""}}function Ff(a){var b=a.type;return(a=a.nodeName)&&"input"===a.toLowerCase()&&("checkbox"===b||"radio"===b)}function ti(a){var b=Ff(a)?"checked":"value",c=Object.getOwnPropertyDescriptor(a.constructor.prototype,b),d=""+a[b];if(!a.hasOwnProperty(b)&&"undefined"!==typeof c&&"function"===typeof c.get&&"function"===typeof c.set){var e=c.get,f=c.set;Object.defineProperty(a,b,{configurable:!0,get:function(){return e.call(this)},set:function(a){d=""+a;f.call(this,a)}});Object.defineProperty(a,
b,{enumerable:c.enumerable});return{getValue:function(){return d},setValue:function(a){d=""+a},stopTracking:function(){a._valueTracker=null;delete a[b]}}}}function mc(a){a._valueTracker||(a._valueTracker=ti(a))}function Gf(a){if(!a)return!1;var b=a._valueTracker;if(!b)return!0;var c=b.getValue();var d="";a&&(d=Ff(a)?a.checked?"true":"false":a.value);a=d;return a!==c?(b.setValue(a),!0):!1}function Cd(a,b){var c=b.checked;return M({},b,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=
c?c:a._wrapperState.initialChecked})}function Hf(a,b){var c=null==b.defaultValue?"":b.defaultValue,d=null!=b.checked?b.checked:b.defaultChecked;c=va(null!=b.value?b.value:c);a._wrapperState={initialChecked:d,initialValue:c,controlled:"checkbox"===b.type||"radio"===b.type?null!=b.checked:null!=b.value}}function If(a,b){b=b.checked;null!=b&&xd(a,"checked",b,!1)}function Dd(a,b){If(a,b);var c=va(b.value),d=b.type;if(null!=c)if("number"===d){if(0===c&&""===a.value||a.value!=c)a.value=""+c}else a.value!==
""+c&&(a.value=""+c);else if("submit"===d||"reset"===d){a.removeAttribute("value");return}b.hasOwnProperty("value")?Ed(a,b.type,c):b.hasOwnProperty("defaultValue")&&Ed(a,b.type,va(b.defaultValue));null==b.checked&&null!=b.defaultChecked&&(a.defaultChecked=!!b.defaultChecked)}function Jf(a,b,c){if(b.hasOwnProperty("value")||b.hasOwnProperty("defaultValue")){var d=b.type;if(!("submit"!==d&&"reset"!==d||void 0!==b.value&&null!==b.value))return;b=""+a._wrapperState.initialValue;c||b===a.value||(a.value=
b);a.defaultValue=b}c=a.name;""!==c&&(a.name="");a.defaultChecked=!!a._wrapperState.initialChecked;""!==c&&(a.name=c)}function Ed(a,b,c){if("number"!==b||a.ownerDocument.activeElement!==a)null==c?a.defaultValue=""+a._wrapperState.initialValue:a.defaultValue!==""+c&&(a.defaultValue=""+c)}function ui(a){var b="";ea.Children.forEach(a,function(a){null!=a&&(b+=a)});return b}function Fd(a,b){a=M({children:void 0},b);if(b=ui(b.children))a.children=b;return a}function hb(a,b,c,d){a=a.options;if(b){b={};
for(var e=0;e<c.length;e++)b["$"+c[e]]=!0;for(c=0;c<a.length;c++)e=b.hasOwnProperty("$"+a[c].value),a[c].selected!==e&&(a[c].selected=e),e&&d&&(a[c].defaultSelected=!0)}else{c=""+va(c);b=null;for(e=0;e<a.length;e++){if(a[e].value===c){a[e].selected=!0;d&&(a[e].defaultSelected=!0);return}null!==b||a[e].disabled||(b=a[e])}null!==b&&(b.selected=!0)}}function Gd(a,b){if(null!=b.dangerouslySetInnerHTML)throw Error(k(91));return M({},b,{value:void 0,defaultValue:void 0,children:""+a._wrapperState.initialValue})}
function Kf(a,b){var c=b.value;if(null==c){c=b.children;b=b.defaultValue;if(null!=c){if(null!=b)throw Error(k(92));if(Array.isArray(c)){if(!(1>=c.length))throw Error(k(93));c=c[0]}b=c}null==b&&(b="");c=b}a._wrapperState={initialValue:va(c)}}function Lf(a,b){var c=va(b.value),d=va(b.defaultValue);null!=c&&(c=""+c,c!==a.value&&(a.value=c),null==b.defaultValue&&a.defaultValue!==c&&(a.defaultValue=c));null!=d&&(a.defaultValue=""+d)}function Mf(a,b){b=a.textContent;b===a._wrapperState.initialValue&&""!==
b&&null!==b&&(a.value=b)}function Nf(a){switch(a){case "svg":return"http://www.w3.org/2000/svg";case "math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Hd(a,b){return null==a||"http://www.w3.org/1999/xhtml"===a?Nf(b):"http://www.w3.org/2000/svg"===a&&"foreignObject"===b?"http://www.w3.org/1999/xhtml":a}function nc(a,b){var c={};c[a.toLowerCase()]=b.toLowerCase();c["Webkit"+a]="webkit"+b;c["Moz"+a]="moz"+b;return c}function oc(a){if(Id[a])return Id[a];
if(!ib[a])return a;var b=ib[a],c;for(c in b)if(b.hasOwnProperty(c)&&c in Of)return Id[a]=b[c];return a}function Jd(a){var b=Pf.get(a);void 0===b&&(b=new Map,Pf.set(a,b));return b}function Na(a){var b=a,c=a;if(a.alternate)for(;b.return;)b=b.return;else{a=b;do b=a,0!==(b.effectTag&1026)&&(c=b.return),a=b.return;while(a)}return 3===b.tag?c:null}function Qf(a){if(13===a.tag){var b=a.memoizedState;null===b&&(a=a.alternate,null!==a&&(b=a.memoizedState));if(null!==b)return b.dehydrated}return null}function Rf(a){if(Na(a)!==
a)throw Error(k(188));}function vi(a){var b=a.alternate;if(!b){b=Na(a);if(null===b)throw Error(k(188));return b!==a?null:a}for(var c=a,d=b;;){var e=c.return;if(null===e)break;var f=e.alternate;if(null===f){d=e.return;if(null!==d){c=d;continue}break}if(e.child===f.child){for(f=e.child;f;){if(f===c)return Rf(e),a;if(f===d)return Rf(e),b;f=f.sibling}throw Error(k(188));}if(c.return!==d.return)c=e,d=f;else{for(var g=!1,h=e.child;h;){if(h===c){g=!0;c=e;d=f;break}if(h===d){g=!0;d=e;c=f;break}h=h.sibling}if(!g){for(h=
f.child;h;){if(h===c){g=!0;c=f;d=e;break}if(h===d){g=!0;d=f;c=e;break}h=h.sibling}if(!g)throw Error(k(189));}}if(c.alternate!==d)throw Error(k(190));}if(3!==c.tag)throw Error(k(188));return c.stateNode.current===c?a:b}function Sf(a){a=vi(a);if(!a)return null;for(var b=a;;){if(5===b.tag||6===b.tag)return b;if(b.child)b.child.return=b,b=b.child;else{if(b===a)break;for(;!b.sibling;){if(!b.return||b.return===a)return null;b=b.return}b.sibling.return=b.return;b=b.sibling}}return null}function jb(a,b){if(null==
b)throw Error(k(30));if(null==a)return b;if(Array.isArray(a)){if(Array.isArray(b))return a.push.apply(a,b),a;a.push(b);return a}return Array.isArray(b)?[a].concat(b):[a,b]}function Kd(a,b,c){Array.isArray(a)?a.forEach(b,c):a&&b.call(c,a)}function pc(a){null!==a&&(Ab=jb(Ab,a));a=Ab;Ab=null;if(a){Kd(a,wi);if(Ab)throw Error(k(95));if(hc)throw a=pd,hc=!1,pd=null,a;}}function Ld(a){a=a.target||a.srcElement||window;a.correspondingUseElement&&(a=a.correspondingUseElement);return 3===a.nodeType?a.parentNode:
a}function Tf(a){if(!wa)return!1;a="on"+a;var b=a in document;b||(b=document.createElement("div"),b.setAttribute(a,"return;"),b="function"===typeof b[a]);return b}function Uf(a){a.topLevelType=null;a.nativeEvent=null;a.targetInst=null;a.ancestors.length=0;10>qc.length&&qc.push(a)}function Vf(a,b,c,d){if(qc.length){var e=qc.pop();e.topLevelType=a;e.eventSystemFlags=d;e.nativeEvent=b;e.targetInst=c;return e}return{topLevelType:a,eventSystemFlags:d,nativeEvent:b,targetInst:c,ancestors:[]}}function Wf(a){var b=
a.targetInst,c=b;do{if(!c){a.ancestors.push(c);break}var d=c;if(3===d.tag)d=d.stateNode.containerInfo;else{for(;d.return;)d=d.return;d=3!==d.tag?null:d.stateNode.containerInfo}if(!d)break;b=c.tag;5!==b&&6!==b||a.ancestors.push(c);c=Bb(d)}while(c);for(c=0;c<a.ancestors.length;c++){b=a.ancestors[c];var e=Ld(a.nativeEvent);d=a.topLevelType;var f=a.nativeEvent,g=a.eventSystemFlags;0===c&&(g|=64);for(var h=null,m=0;m<jc.length;m++){var n=jc[m];n&&(n=n.extractEvents(d,b,f,e,g))&&(h=jb(h,n))}pc(h)}}function Md(a,
b,c){if(!c.has(a)){switch(a){case "scroll":Cb(b,"scroll",!0);break;case "focus":case "blur":Cb(b,"focus",!0);Cb(b,"blur",!0);c.set("blur",null);c.set("focus",null);break;case "cancel":case "close":Tf(a)&&Cb(b,a,!0);break;case "invalid":case "submit":case "reset":break;default:-1===Db.indexOf(a)&&w(a,b)}c.set(a,null)}}function xi(a,b){var c=Jd(b);Nd.forEach(function(a){Md(a,b,c)});yi.forEach(function(a){Md(a,b,c)})}function Od(a,b,c,d,e){return{blockedOn:a,topLevelType:b,eventSystemFlags:c|32,nativeEvent:e,
container:d}}function Xf(a,b){switch(a){case "focus":case "blur":xa=null;break;case "dragenter":case "dragleave":ya=null;break;case "mouseover":case "mouseout":za=null;break;case "pointerover":case "pointerout":Eb.delete(b.pointerId);break;case "gotpointercapture":case "lostpointercapture":Fb.delete(b.pointerId)}}function Gb(a,b,c,d,e,f){if(null===a||a.nativeEvent!==f)return a=Od(b,c,d,e,f),null!==b&&(b=Hb(b),null!==b&&Yf(b)),a;a.eventSystemFlags|=d;return a}function zi(a,b,c,d,e){switch(b){case "focus":return xa=
Gb(xa,a,b,c,d,e),!0;case "dragenter":return ya=Gb(ya,a,b,c,d,e),!0;case "mouseover":return za=Gb(za,a,b,c,d,e),!0;case "pointerover":var f=e.pointerId;Eb.set(f,Gb(Eb.get(f)||null,a,b,c,d,e));return!0;case "gotpointercapture":return f=e.pointerId,Fb.set(f,Gb(Fb.get(f)||null,a,b,c,d,e)),!0}return!1}function Ai(a){var b=Bb(a.target);if(null!==b){var c=Na(b);if(null!==c)if(b=c.tag,13===b){if(b=Qf(c),null!==b){a.blockedOn=b;Pd(a.priority,function(){Bi(c)});return}}else if(3===b&&c.stateNode.hydrate){a.blockedOn=
3===c.tag?c.stateNode.containerInfo:null;return}}a.blockedOn=null}function rc(a){if(null!==a.blockedOn)return!1;var b=Qd(a.topLevelType,a.eventSystemFlags,a.container,a.nativeEvent);if(null!==b){var c=Hb(b);null!==c&&Yf(c);a.blockedOn=b;return!1}return!0}function Zf(a,b,c){rc(a)&&c.delete(b)}function Ci(){for(Rd=!1;0<fa.length;){var a=fa[0];if(null!==a.blockedOn){a=Hb(a.blockedOn);null!==a&&Di(a);break}var b=Qd(a.topLevelType,a.eventSystemFlags,a.container,a.nativeEvent);null!==b?a.blockedOn=b:fa.shift()}null!==
xa&&rc(xa)&&(xa=null);null!==ya&&rc(ya)&&(ya=null);null!==za&&rc(za)&&(za=null);Eb.forEach(Zf);Fb.forEach(Zf)}function Ib(a,b){a.blockedOn===b&&(a.blockedOn=null,Rd||(Rd=!0,$f(ag,Ci)))}function bg(a){if(0<fa.length){Ib(fa[0],a);for(var b=1;b<fa.length;b++){var c=fa[b];c.blockedOn===a&&(c.blockedOn=null)}}null!==xa&&Ib(xa,a);null!==ya&&Ib(ya,a);null!==za&&Ib(za,a);b=function(b){return Ib(b,a)};Eb.forEach(b);Fb.forEach(b);for(b=0;b<Jb.length;b++)c=Jb[b],c.blockedOn===a&&(c.blockedOn=null);for(;0<Jb.length&&
(b=Jb[0],null===b.blockedOn);)Ai(b),null===b.blockedOn&&Jb.shift()}function Sd(a,b){for(var c=0;c<a.length;c+=2){var d=a[c],e=a[c+1],f="on"+(e[0].toUpperCase()+e.slice(1));f={phasedRegistrationNames:{bubbled:f,captured:f+"Capture"},dependencies:[d],eventPriority:b};Td.set(d,b);cg.set(d,f);dg[e]=f}}function w(a,b){Cb(b,a,!1)}function Cb(a,b,c){var d=Td.get(b);switch(void 0===d?2:d){case 0:d=Ei.bind(null,b,1,a);break;case 1:d=Fi.bind(null,b,1,a);break;default:d=sc.bind(null,b,1,a)}c?a.addEventListener(b,
d,!0):a.addEventListener(b,d,!1)}function Ei(a,b,c,d){Oa||vd();var e=sc,f=Oa;Oa=!0;try{eg(e,a,b,c,d)}finally{(Oa=f)||ud()}}function Fi(a,b,c,d){Gi(Hi,sc.bind(null,a,b,c,d))}function sc(a,b,c,d){if(tc)if(0<fa.length&&-1<Nd.indexOf(a))a=Od(null,a,b,c,d),fa.push(a);else{var e=Qd(a,b,c,d);if(null===e)Xf(a,d);else if(-1<Nd.indexOf(a))a=Od(e,a,b,c,d),fa.push(a);else if(!zi(e,a,b,c,d)){Xf(a,d);a=Vf(a,d,null,b);try{uf(Wf,a)}finally{Uf(a)}}}}function Qd(a,b,c,d){c=Ld(d);c=Bb(c);if(null!==c){var e=Na(c);if(null===
e)c=null;else{var f=e.tag;if(13===f){c=Qf(e);if(null!==c)return c;c=null}else if(3===f){if(e.stateNode.hydrate)return 3===e.tag?e.stateNode.containerInfo:null;c=null}else e!==c&&(c=null)}}a=Vf(a,d,c,b);try{uf(Wf,a)}finally{Uf(a)}return null}function fg(a,b,c){return null==b||"boolean"===typeof b||""===b?"":c||"number"!==typeof b||0===b||Kb.hasOwnProperty(a)&&Kb[a]?(""+b).trim():b+"px"}function gg(a,b){a=a.style;for(var c in b)if(b.hasOwnProperty(c)){var d=0===c.indexOf("--"),e=fg(c,b[c],d);"float"===
c&&(c="cssFloat");d?a.setProperty(c,e):a[c]=e}}function Ud(a,b){if(b){if(Ii[a]&&(null!=b.children||null!=b.dangerouslySetInnerHTML))throw Error(k(137,a,""));if(null!=b.dangerouslySetInnerHTML){if(null!=b.children)throw Error(k(60));if(!("object"===typeof b.dangerouslySetInnerHTML&&"__html"in b.dangerouslySetInnerHTML))throw Error(k(61));}if(null!=b.style&&"object"!==typeof b.style)throw Error(k(62,""));}}function Vd(a,b){if(-1===a.indexOf("-"))return"string"===typeof b.is;switch(a){case "annotation-xml":case "color-profile":case "font-face":case "font-face-src":case "font-face-uri":case "font-face-format":case "font-face-name":case "missing-glyph":return!1;
default:return!0}}function oa(a,b){a=9===a.nodeType||11===a.nodeType?a:a.ownerDocument;var c=Jd(a);b=rd[b];for(var d=0;d<b.length;d++)Md(b[d],a,c)}function uc(){}function Wd(a){a=a||("undefined"!==typeof document?document:void 0);if("undefined"===typeof a)return null;try{return a.activeElement||a.body}catch(b){return a.body}}function hg(a){for(;a&&a.firstChild;)a=a.firstChild;return a}function ig(a,b){var c=hg(a);a=0;for(var d;c;){if(3===c.nodeType){d=a+c.textContent.length;if(a<=b&&d>=b)return{node:c,
offset:b-a};a=d}a:{for(;c;){if(c.nextSibling){c=c.nextSibling;break a}c=c.parentNode}c=void 0}c=hg(c)}}function jg(a,b){return a&&b?a===b?!0:a&&3===a.nodeType?!1:b&&3===b.nodeType?jg(a,b.parentNode):"contains"in a?a.contains(b):a.compareDocumentPosition?!!(a.compareDocumentPosition(b)&16):!1:!1}function kg(){for(var a=window,b=Wd();b instanceof a.HTMLIFrameElement;){try{var c="string"===typeof b.contentWindow.location.href}catch(d){c=!1}if(c)a=b.contentWindow;else break;b=Wd(a.document)}return b}
function Xd(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return b&&("input"===b&&("text"===a.type||"search"===a.type||"tel"===a.type||"url"===a.type||"password"===a.type)||"textarea"===b||"true"===a.contentEditable)}function lg(a,b){switch(a){case "button":case "input":case "select":case "textarea":return!!b.autoFocus}return!1}function Yd(a,b){return"textarea"===a||"option"===a||"noscript"===a||"string"===typeof b.children||"number"===typeof b.children||"object"===typeof b.dangerouslySetInnerHTML&&
null!==b.dangerouslySetInnerHTML&&null!=b.dangerouslySetInnerHTML.__html}function kb(a){for(;null!=a;a=a.nextSibling){var b=a.nodeType;if(1===b||3===b)break}return a}function mg(a){a=a.previousSibling;for(var b=0;a;){if(8===a.nodeType){var c=a.data;if(c===ng||c===Zd||c===$d){if(0===b)return a;b--}else c===og&&b++}a=a.previousSibling}return null}function Bb(a){var b=a[Aa];if(b)return b;for(var c=a.parentNode;c;){if(b=c[Lb]||c[Aa]){c=b.alternate;if(null!==b.child||null!==c&&null!==c.child)for(a=mg(a);null!==
a;){if(c=a[Aa])return c;a=mg(a)}return b}a=c;c=a.parentNode}return null}function Hb(a){a=a[Aa]||a[Lb];return!a||5!==a.tag&&6!==a.tag&&13!==a.tag&&3!==a.tag?null:a}function Pa(a){if(5===a.tag||6===a.tag)return a.stateNode;throw Error(k(33));}function ae(a){return a[vc]||null}function pa(a){do a=a.return;while(a&&5!==a.tag);return a?a:null}function pg(a,b){var c=a.stateNode;if(!c)return null;var d=td(c);if(!d)return null;c=d[b];a:switch(b){case "onClick":case "onClickCapture":case "onDoubleClick":case "onDoubleClickCapture":case "onMouseDown":case "onMouseDownCapture":case "onMouseMove":case "onMouseMoveCapture":case "onMouseUp":case "onMouseUpCapture":case "onMouseEnter":(d=
!d.disabled)||(a=a.type,d=!("button"===a||"input"===a||"select"===a||"textarea"===a));a=!d;break a;default:a=!1}if(a)return null;if(c&&"function"!==typeof c)throw Error(k(231,b,typeof c));return c}function qg(a,b,c){if(b=pg(a,c.dispatchConfig.phasedRegistrationNames[b]))c._dispatchListeners=jb(c._dispatchListeners,b),c._dispatchInstances=jb(c._dispatchInstances,a)}function Ji(a){if(a&&a.dispatchConfig.phasedRegistrationNames){for(var b=a._targetInst,c=[];b;)c.push(b),b=pa(b);for(b=c.length;0<b--;)qg(c[b],
"captured",a);for(b=0;b<c.length;b++)qg(c[b],"bubbled",a)}}function be(a,b,c){a&&c&&c.dispatchConfig.registrationName&&(b=pg(a,c.dispatchConfig.registrationName))&&(c._dispatchListeners=jb(c._dispatchListeners,b),c._dispatchInstances=jb(c._dispatchInstances,a))}function Ki(a){a&&a.dispatchConfig.registrationName&&be(a._targetInst,null,a)}function lb(a){Kd(a,Ji)}function rg(){if(wc)return wc;var a,b=ce,c=b.length,d,e="value"in Ba?Ba.value:Ba.textContent,f=e.length;for(a=0;a<c&&b[a]===e[a];a++);var g=
c-a;for(d=1;d<=g&&b[c-d]===e[f-d];d++);return wc=e.slice(a,1<d?1-d:void 0)}function xc(){return!0}function yc(){return!1}function R(a,b,c,d){this.dispatchConfig=a;this._targetInst=b;this.nativeEvent=c;a=this.constructor.Interface;for(var e in a)a.hasOwnProperty(e)&&((b=a[e])?this[e]=b(c):"target"===e?this.target=d:this[e]=c[e]);this.isDefaultPrevented=(null!=c.defaultPrevented?c.defaultPrevented:!1===c.returnValue)?xc:yc;this.isPropagationStopped=yc;return this}function Li(a,b,c,d){if(this.eventPool.length){var e=
this.eventPool.pop();this.call(e,a,b,c,d);return e}return new this(a,b,c,d)}function Mi(a){if(!(a instanceof this))throw Error(k(279));a.destructor();10>this.eventPool.length&&this.eventPool.push(a)}function sg(a){a.eventPool=[];a.getPooled=Li;a.release=Mi}function tg(a,b){switch(a){case "keyup":return-1!==Ni.indexOf(b.keyCode);case "keydown":return 229!==b.keyCode;case "keypress":case "mousedown":case "blur":return!0;default:return!1}}function ug(a){a=a.detail;return"object"===typeof a&&"data"in
a?a.data:null}function Oi(a,b){switch(a){case "compositionend":return ug(b);case "keypress":if(32!==b.which)return null;vg=!0;return wg;case "textInput":return a=b.data,a===wg&&vg?null:a;default:return null}}function Pi(a,b){if(mb)return"compositionend"===a||!de&&tg(a,b)?(a=rg(),wc=ce=Ba=null,mb=!1,a):null;switch(a){case "paste":return null;case "keypress":if(!(b.ctrlKey||b.altKey||b.metaKey)||b.ctrlKey&&b.altKey){if(b.char&&1<b.char.length)return b.char;if(b.which)return String.fromCharCode(b.which)}return null;
case "compositionend":return xg&&"ko"!==b.locale?null:b.data;default:return null}}function yg(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return"input"===b?!!Qi[a.type]:"textarea"===b?!0:!1}function zg(a,b,c){a=R.getPooled(Ag.change,a,b,c);a.type="change";sf(c);lb(a);return a}function Ri(a){pc(a)}function zc(a){var b=Pa(a);if(Gf(b))return a}function Si(a,b){if("change"===a)return b}function Bg(){Mb&&(Mb.detachEvent("onpropertychange",Cg),Nb=Mb=null)}function Cg(a){if("value"===a.propertyName&&
zc(Nb))if(a=zg(Nb,a,Ld(a)),Oa)pc(a);else{Oa=!0;try{ee(Ri,a)}finally{Oa=!1,ud()}}}function Ti(a,b,c){"focus"===a?(Bg(),Mb=b,Nb=c,Mb.attachEvent("onpropertychange",Cg)):"blur"===a&&Bg()}function Ui(a,b){if("selectionchange"===a||"keyup"===a||"keydown"===a)return zc(Nb)}function Vi(a,b){if("click"===a)return zc(b)}function Wi(a,b){if("input"===a||"change"===a)return zc(b)}function Xi(a){var b=this.nativeEvent;return b.getModifierState?b.getModifierState(a):(a=Yi[a])?!!b[a]:!1}function fe(a){return Xi}
function Zi(a,b){return a===b&&(0!==a||1/a===1/b)||a!==a&&b!==b}function Ob(a,b){if(Qa(a,b))return!0;if("object"!==typeof a||null===a||"object"!==typeof b||null===b)return!1;var c=Object.keys(a),d=Object.keys(b);if(c.length!==d.length)return!1;for(d=0;d<c.length;d++)if(!$i.call(b,c[d])||!Qa(a[c[d]],b[c[d]]))return!1;return!0}function Dg(a,b){var c=b.window===b?b.document:9===b.nodeType?b:b.ownerDocument;if(ge||null==nb||nb!==Wd(c))return null;c=nb;"selectionStart"in c&&Xd(c)?c={start:c.selectionStart,
end:c.selectionEnd}:(c=(c.ownerDocument&&c.ownerDocument.defaultView||window).getSelection(),c={anchorNode:c.anchorNode,anchorOffset:c.anchorOffset,focusNode:c.focusNode,focusOffset:c.focusOffset});return Pb&&Ob(Pb,c)?null:(Pb=c,a=R.getPooled(Eg.select,he,a,b),a.type="select",a.target=nb,lb(a),a)}function Ac(a){var b=a.keyCode;"charCode"in a?(a=a.charCode,0===a&&13===b&&(a=13)):a=b;10===a&&(a=13);return 32<=a||13===a?a:0}function q(a,b){0>ob||(a.current=ie[ob],ie[ob]=null,ob--)}function y(a,b,c){ob++;
ie[ob]=a.current;a.current=b}function pb(a,b){var c=a.type.contextTypes;if(!c)return Ca;var d=a.stateNode;if(d&&d.__reactInternalMemoizedUnmaskedChildContext===b)return d.__reactInternalMemoizedMaskedChildContext;var e={},f;for(f in c)e[f]=b[f];d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=b,a.__reactInternalMemoizedMaskedChildContext=e);return e}function N(a){a=a.childContextTypes;return null!==a&&void 0!==a}function Fg(a,b,c){if(B.current!==Ca)throw Error(k(168));y(B,b);y(G,c)}
function Gg(a,b,c){var d=a.stateNode;a=b.childContextTypes;if("function"!==typeof d.getChildContext)return c;d=d.getChildContext();for(var e in d)if(!(e in a))throw Error(k(108,na(b)||"Unknown",e));return M({},c,{},d)}function Bc(a){a=(a=a.stateNode)&&a.__reactInternalMemoizedMergedChildContext||Ca;Ra=B.current;y(B,a);y(G,G.current);return!0}function Hg(a,b,c){var d=a.stateNode;if(!d)throw Error(k(169));c?(a=Gg(a,b,Ra),d.__reactInternalMemoizedMergedChildContext=a,q(G),q(B),y(B,a)):q(G);y(G,c)}function Cc(){switch(aj()){case Dc:return 99;
case Ig:return 98;case Jg:return 97;case Kg:return 96;case Lg:return 95;default:throw Error(k(332));}}function Mg(a){switch(a){case 99:return Dc;case 98:return Ig;case 97:return Jg;case 96:return Kg;case 95:return Lg;default:throw Error(k(332));}}function Da(a,b){a=Mg(a);return bj(a,b)}function Ng(a,b,c){a=Mg(a);return je(a,b,c)}function Og(a){null===qa?(qa=[a],Ec=je(Dc,Pg)):qa.push(a);return Qg}function ha(){if(null!==Ec){var a=Ec;Ec=null;Rg(a)}Pg()}function Pg(){if(!ke&&null!==qa){ke=!0;var a=0;
try{var b=qa;Da(99,function(){for(;a<b.length;a++){var c=b[a];do c=c(!0);while(null!==c)}});qa=null}catch(c){throw null!==qa&&(qa=qa.slice(a+1)),je(Dc,ha),c;}finally{ke=!1}}}function Fc(a,b,c){c/=10;return 1073741821-(((1073741821-a+b/10)/c|0)+1)*c}function aa(a,b){if(a&&a.defaultProps){b=M({},b);a=a.defaultProps;for(var c in a)void 0===b[c]&&(b[c]=a[c])}return b}function le(){Gc=qb=Hc=null}function me(a){var b=Ic.current;q(Ic);a.type._context._currentValue=b}function Sg(a,b){for(;null!==a;){var c=
a.alternate;if(a.childExpirationTime<b)a.childExpirationTime=b,null!==c&&c.childExpirationTime<b&&(c.childExpirationTime=b);else if(null!==c&&c.childExpirationTime<b)c.childExpirationTime=b;else break;a=a.return}}function rb(a,b){Hc=a;Gc=qb=null;a=a.dependencies;null!==a&&null!==a.firstContext&&(a.expirationTime>=b&&(ia=!0),a.firstContext=null)}function W(a,b){if(Gc!==a&&!1!==b&&0!==b){if("number"!==typeof b||1073741823===b)Gc=a,b=1073741823;b={context:a,observedBits:b,next:null};if(null===qb){if(null===
Hc)throw Error(k(308));qb=b;Hc.dependencies={expirationTime:0,firstContext:b,responders:null}}else qb=qb.next=b}return a._currentValue}function ne(a){a.updateQueue={baseState:a.memoizedState,baseQueue:null,shared:{pending:null},effects:null}}function oe(a,b){a=a.updateQueue;b.updateQueue===a&&(b.updateQueue={baseState:a.baseState,baseQueue:a.baseQueue,shared:a.shared,effects:a.effects})}function Ea(a,b){a={expirationTime:a,suspenseConfig:b,tag:Tg,payload:null,callback:null,next:null};return a.next=
a}function Fa(a,b){a=a.updateQueue;if(null!==a){a=a.shared;var c=a.pending;null===c?b.next=b:(b.next=c.next,c.next=b);a.pending=b}}function Ug(a,b){var c=a.alternate;null!==c&&oe(c,a);a=a.updateQueue;c=a.baseQueue;null===c?(a.baseQueue=b.next=b,b.next=b):(b.next=c.next,c.next=b)}function Qb(a,b,c,d){var e=a.updateQueue;Ga=!1;var f=e.baseQueue,g=e.shared.pending;if(null!==g){if(null!==f){var h=f.next;f.next=g.next;g.next=h}f=g;e.shared.pending=null;h=a.alternate;null!==h&&(h=h.updateQueue,null!==h&&
(h.baseQueue=g))}if(null!==f){h=f.next;var m=e.baseState,n=0,k=null,ba=null,l=null;if(null!==h){var p=h;do{g=p.expirationTime;if(g<d){var t={expirationTime:p.expirationTime,suspenseConfig:p.suspenseConfig,tag:p.tag,payload:p.payload,callback:p.callback,next:null};null===l?(ba=l=t,k=m):l=l.next=t;g>n&&(n=g)}else{null!==l&&(l=l.next={expirationTime:1073741823,suspenseConfig:p.suspenseConfig,tag:p.tag,payload:p.payload,callback:p.callback,next:null});Vg(g,p.suspenseConfig);a:{var q=a,r=p;g=b;t=c;switch(r.tag){case 1:q=
r.payload;if("function"===typeof q){m=q.call(t,m,g);break a}m=q;break a;case 3:q.effectTag=q.effectTag&-4097|64;case Tg:q=r.payload;g="function"===typeof q?q.call(t,m,g):q;if(null===g||void 0===g)break a;m=M({},m,g);break a;case Jc:Ga=!0}}null!==p.callback&&(a.effectTag|=32,g=e.effects,null===g?e.effects=[p]:g.push(p))}p=p.next;if(null===p||p===h)if(g=e.shared.pending,null===g)break;else p=f.next=g.next,g.next=h,e.baseQueue=f=g,e.shared.pending=null}while(1)}null===l?k=m:l.next=ba;e.baseState=k;e.baseQueue=
l;Kc(n);a.expirationTime=n;a.memoizedState=m}}function Wg(a,b,c){a=b.effects;b.effects=null;if(null!==a)for(b=0;b<a.length;b++){var d=a[b],e=d.callback;if(null!==e){d.callback=null;d=e;e=c;if("function"!==typeof d)throw Error(k(191,d));d.call(e)}}}function Lc(a,b,c,d){b=a.memoizedState;c=c(d,b);c=null===c||void 0===c?b:M({},b,c);a.memoizedState=c;0===a.expirationTime&&(a.updateQueue.baseState=c)}function Xg(a,b,c,d,e,f,g){a=a.stateNode;return"function"===typeof a.shouldComponentUpdate?a.shouldComponentUpdate(d,
f,g):b.prototype&&b.prototype.isPureReactComponent?!Ob(c,d)||!Ob(e,f):!0}function Yg(a,b,c){var d=!1,e=Ca;var f=b.contextType;"object"===typeof f&&null!==f?f=W(f):(e=N(b)?Ra:B.current,d=b.contextTypes,f=(d=null!==d&&void 0!==d)?pb(a,e):Ca);b=new b(c,f);a.memoizedState=null!==b.state&&void 0!==b.state?b.state:null;b.updater=Mc;a.stateNode=b;b._reactInternalFiber=a;d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=e,a.__reactInternalMemoizedMaskedChildContext=f);return b}function Zg(a,
b,c,d){a=b.state;"function"===typeof b.componentWillReceiveProps&&b.componentWillReceiveProps(c,d);"function"===typeof b.UNSAFE_componentWillReceiveProps&&b.UNSAFE_componentWillReceiveProps(c,d);b.state!==a&&Mc.enqueueReplaceState(b,b.state,null)}function pe(a,b,c,d){var e=a.stateNode;e.props=c;e.state=a.memoizedState;e.refs=$g;ne(a);var f=b.contextType;"object"===typeof f&&null!==f?e.context=W(f):(f=N(b)?Ra:B.current,e.context=pb(a,f));Qb(a,c,e,d);e.state=a.memoizedState;f=b.getDerivedStateFromProps;
"function"===typeof f&&(Lc(a,b,f,c),e.state=a.memoizedState);"function"===typeof b.getDerivedStateFromProps||"function"===typeof e.getSnapshotBeforeUpdate||"function"!==typeof e.UNSAFE_componentWillMount&&"function"!==typeof e.componentWillMount||(b=e.state,"function"===typeof e.componentWillMount&&e.componentWillMount(),"function"===typeof e.UNSAFE_componentWillMount&&e.UNSAFE_componentWillMount(),b!==e.state&&Mc.enqueueReplaceState(e,e.state,null),Qb(a,c,e,d),e.state=a.memoizedState);"function"===
typeof e.componentDidMount&&(a.effectTag|=4)}function Rb(a,b,c){a=c.ref;if(null!==a&&"function"!==typeof a&&"object"!==typeof a){if(c._owner){c=c._owner;if(c){if(1!==c.tag)throw Error(k(309));var d=c.stateNode}if(!d)throw Error(k(147,a));var e=""+a;if(null!==b&&null!==b.ref&&"function"===typeof b.ref&&b.ref._stringRef===e)return b.ref;b=function(a){var b=d.refs;b===$g&&(b=d.refs={});null===a?delete b[e]:b[e]=a};b._stringRef=e;return b}if("string"!==typeof a)throw Error(k(284));if(!c._owner)throw Error(k(290,
a));}return a}function Nc(a,b){if("textarea"!==a.type)throw Error(k(31,"[object Object]"===Object.prototype.toString.call(b)?"object with keys {"+Object.keys(b).join(", ")+"}":b,""));}function ah(a){function b(b,c){if(a){var d=b.lastEffect;null!==d?(d.nextEffect=c,b.lastEffect=c):b.firstEffect=b.lastEffect=c;c.nextEffect=null;c.effectTag=8}}function c(c,d){if(!a)return null;for(;null!==d;)b(c,d),d=d.sibling;return null}function d(a,b){for(a=new Map;null!==b;)null!==b.key?a.set(b.key,b):a.set(b.index,
b),b=b.sibling;return a}function e(a,b){a=Sa(a,b);a.index=0;a.sibling=null;return a}function f(b,c,d){b.index=d;if(!a)return c;d=b.alternate;if(null!==d)return d=d.index,d<c?(b.effectTag=2,c):d;b.effectTag=2;return c}function g(b){a&&null===b.alternate&&(b.effectTag=2);return b}function h(a,b,c,d){if(null===b||6!==b.tag)return b=qe(c,a.mode,d),b.return=a,b;b=e(b,c);b.return=a;return b}function m(a,b,c,d){if(null!==b&&b.elementType===c.type)return d=e(b,c.props),d.ref=Rb(a,b,c),d.return=a,d;d=Oc(c.type,
c.key,c.props,null,a.mode,d);d.ref=Rb(a,b,c);d.return=a;return d}function n(a,b,c,d){if(null===b||4!==b.tag||b.stateNode.containerInfo!==c.containerInfo||b.stateNode.implementation!==c.implementation)return b=re(c,a.mode,d),b.return=a,b;b=e(b,c.children||[]);b.return=a;return b}function l(a,b,c,d,f){if(null===b||7!==b.tag)return b=Ha(c,a.mode,d,f),b.return=a,b;b=e(b,c);b.return=a;return b}function ba(a,b,c){if("string"===typeof b||"number"===typeof b)return b=qe(""+b,a.mode,c),b.return=a,b;if("object"===
typeof b&&null!==b){switch(b.$$typeof){case Pc:return c=Oc(b.type,b.key,b.props,null,a.mode,c),c.ref=Rb(a,null,b),c.return=a,c;case gb:return b=re(b,a.mode,c),b.return=a,b}if(Qc(b)||zb(b))return b=Ha(b,a.mode,c,null),b.return=a,b;Nc(a,b)}return null}function p(a,b,c,d){var e=null!==b?b.key:null;if("string"===typeof c||"number"===typeof c)return null!==e?null:h(a,b,""+c,d);if("object"===typeof c&&null!==c){switch(c.$$typeof){case Pc:return c.key===e?c.type===Ma?l(a,b,c.props.children,d,e):m(a,b,c,
d):null;case gb:return c.key===e?n(a,b,c,d):null}if(Qc(c)||zb(c))return null!==e?null:l(a,b,c,d,null);Nc(a,c)}return null}function t(a,b,c,d,e){if("string"===typeof d||"number"===typeof d)return a=a.get(c)||null,h(b,a,""+d,e);if("object"===typeof d&&null!==d){switch(d.$$typeof){case Pc:return a=a.get(null===d.key?c:d.key)||null,d.type===Ma?l(b,a,d.props.children,e,d.key):m(b,a,d,e);case gb:return a=a.get(null===d.key?c:d.key)||null,n(b,a,d,e)}if(Qc(d)||zb(d))return a=a.get(c)||null,l(b,a,d,e,null);
Nc(b,d)}return null}function q(e,g,h,m){for(var n=null,k=null,l=g,r=g=0,C=null;null!==l&&r<h.length;r++){l.index>r?(C=l,l=null):C=l.sibling;var O=p(e,l,h[r],m);if(null===O){null===l&&(l=C);break}a&&l&&null===O.alternate&&b(e,l);g=f(O,g,r);null===k?n=O:k.sibling=O;k=O;l=C}if(r===h.length)return c(e,l),n;if(null===l){for(;r<h.length;r++)l=ba(e,h[r],m),null!==l&&(g=f(l,g,r),null===k?n=l:k.sibling=l,k=l);return n}for(l=d(e,l);r<h.length;r++)C=t(l,e,r,h[r],m),null!==C&&(a&&null!==C.alternate&&l.delete(null===
C.key?r:C.key),g=f(C,g,r),null===k?n=C:k.sibling=C,k=C);a&&l.forEach(function(a){return b(e,a)});return n}function w(e,g,h,n){var m=zb(h);if("function"!==typeof m)throw Error(k(150));h=m.call(h);if(null==h)throw Error(k(151));for(var l=m=null,r=g,C=g=0,O=null,v=h.next();null!==r&&!v.done;C++,v=h.next()){r.index>C?(O=r,r=null):O=r.sibling;var q=p(e,r,v.value,n);if(null===q){null===r&&(r=O);break}a&&r&&null===q.alternate&&b(e,r);g=f(q,g,C);null===l?m=q:l.sibling=q;l=q;r=O}if(v.done)return c(e,r),m;
if(null===r){for(;!v.done;C++,v=h.next())v=ba(e,v.value,n),null!==v&&(g=f(v,g,C),null===l?m=v:l.sibling=v,l=v);return m}for(r=d(e,r);!v.done;C++,v=h.next())v=t(r,e,C,v.value,n),null!==v&&(a&&null!==v.alternate&&r.delete(null===v.key?C:v.key),g=f(v,g,C),null===l?m=v:l.sibling=v,l=v);a&&r.forEach(function(a){return b(e,a)});return m}return function(a,d,f,h){var m="object"===typeof f&&null!==f&&f.type===Ma&&null===f.key;m&&(f=f.props.children);var n="object"===typeof f&&null!==f;if(n)switch(f.$$typeof){case Pc:a:{n=
f.key;for(m=d;null!==m;){if(m.key===n){switch(m.tag){case 7:if(f.type===Ma){c(a,m.sibling);d=e(m,f.props.children);d.return=a;a=d;break a}break;default:if(m.elementType===f.type){c(a,m.sibling);d=e(m,f.props);d.ref=Rb(a,m,f);d.return=a;a=d;break a}}c(a,m);break}else b(a,m);m=m.sibling}f.type===Ma?(d=Ha(f.props.children,a.mode,h,f.key),d.return=a,a=d):(h=Oc(f.type,f.key,f.props,null,a.mode,h),h.ref=Rb(a,d,f),h.return=a,a=h)}return g(a);case gb:a:{for(m=f.key;null!==d;){if(d.key===m)if(4===d.tag&&d.stateNode.containerInfo===
f.containerInfo&&d.stateNode.implementation===f.implementation){c(a,d.sibling);d=e(d,f.children||[]);d.return=a;a=d;break a}else{c(a,d);break}else b(a,d);d=d.sibling}d=re(f,a.mode,h);d.return=a;a=d}return g(a)}if("string"===typeof f||"number"===typeof f)return f=""+f,null!==d&&6===d.tag?(c(a,d.sibling),d=e(d,f),d.return=a,a=d):(c(a,d),d=qe(f,a.mode,h),d.return=a,a=d),g(a);if(Qc(f))return q(a,d,f,h);if(zb(f))return w(a,d,f,h);n&&Nc(a,f);if("undefined"===typeof f&&!m)switch(a.tag){case 1:case 0:throw a=
a.type,Error(k(152,a.displayName||a.name||"Component"));}return c(a,d)}}function Ta(a){if(a===Sb)throw Error(k(174));return a}function se(a,b){y(Tb,b);y(Ub,a);y(ja,Sb);a=b.nodeType;switch(a){case 9:case 11:b=(b=b.documentElement)?b.namespaceURI:Hd(null,"");break;default:a=8===a?b.parentNode:b,b=a.namespaceURI||null,a=a.tagName,b=Hd(b,a)}q(ja);y(ja,b)}function tb(a){q(ja);q(Ub);q(Tb)}function bh(a){Ta(Tb.current);var b=Ta(ja.current);var c=Hd(b,a.type);b!==c&&(y(Ub,a),y(ja,c))}function te(a){Ub.current===
a&&(q(ja),q(Ub))}function Rc(a){for(var b=a;null!==b;){if(13===b.tag){var c=b.memoizedState;if(null!==c&&(c=c.dehydrated,null===c||c.data===$d||c.data===Zd))return b}else if(19===b.tag&&void 0!==b.memoizedProps.revealOrder){if(0!==(b.effectTag&64))return b}else if(null!==b.child){b.child.return=b;b=b.child;continue}if(b===a)break;for(;null===b.sibling;){if(null===b.return||b.return===a)return null;b=b.return}b.sibling.return=b.return;b=b.sibling}return null}function ue(a,b){return{responder:a,props:b}}
function S(){throw Error(k(321));}function ve(a,b){if(null===b)return!1;for(var c=0;c<b.length&&c<a.length;c++)if(!Qa(a[c],b[c]))return!1;return!0}function we(a,b,c,d,e,f){Ia=f;z=b;b.memoizedState=null;b.updateQueue=null;b.expirationTime=0;Sc.current=null===a||null===a.memoizedState?dj:ej;a=c(d,e);if(b.expirationTime===Ia){f=0;do{b.expirationTime=0;if(!(25>f))throw Error(k(301));f+=1;J=K=null;b.updateQueue=null;Sc.current=fj;a=c(d,e)}while(b.expirationTime===Ia)}Sc.current=Tc;b=null!==K&&null!==K.next;
Ia=0;J=K=z=null;Uc=!1;if(b)throw Error(k(300));return a}function ub(){var a={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};null===J?z.memoizedState=J=a:J=J.next=a;return J}function vb(){if(null===K){var a=z.alternate;a=null!==a?a.memoizedState:null}else a=K.next;var b=null===J?z.memoizedState:J.next;if(null!==b)J=b,K=a;else{if(null===a)throw Error(k(310));K=a;a={memoizedState:K.memoizedState,baseState:K.baseState,baseQueue:K.baseQueue,queue:K.queue,next:null};null===J?z.memoizedState=
J=a:J=J.next=a}return J}function Ua(a,b){return"function"===typeof b?b(a):b}function Vc(a,b,c){b=vb();c=b.queue;if(null===c)throw Error(k(311));c.lastRenderedReducer=a;var d=K,e=d.baseQueue,f=c.pending;if(null!==f){if(null!==e){var g=e.next;e.next=f.next;f.next=g}d.baseQueue=e=f;c.pending=null}if(null!==e){e=e.next;d=d.baseState;var h=g=f=null,m=e;do{var n=m.expirationTime;if(n<Ia){var l={expirationTime:m.expirationTime,suspenseConfig:m.suspenseConfig,action:m.action,eagerReducer:m.eagerReducer,eagerState:m.eagerState,
next:null};null===h?(g=h=l,f=d):h=h.next=l;n>z.expirationTime&&(z.expirationTime=n,Kc(n))}else null!==h&&(h=h.next={expirationTime:1073741823,suspenseConfig:m.suspenseConfig,action:m.action,eagerReducer:m.eagerReducer,eagerState:m.eagerState,next:null}),Vg(n,m.suspenseConfig),d=m.eagerReducer===a?m.eagerState:a(d,m.action);m=m.next}while(null!==m&&m!==e);null===h?f=d:h.next=g;Qa(d,b.memoizedState)||(ia=!0);b.memoizedState=d;b.baseState=f;b.baseQueue=h;c.lastRenderedState=d}return[b.memoizedState,
c.dispatch]}function Wc(a,b,c){b=vb();c=b.queue;if(null===c)throw Error(k(311));c.lastRenderedReducer=a;var d=c.dispatch,e=c.pending,f=b.memoizedState;if(null!==e){c.pending=null;var g=e=e.next;do f=a(f,g.action),g=g.next;while(g!==e);Qa(f,b.memoizedState)||(ia=!0);b.memoizedState=f;null===b.baseQueue&&(b.baseState=f);c.lastRenderedState=f}return[f,d]}function xe(a){var b=ub();"function"===typeof a&&(a=a());b.memoizedState=b.baseState=a;a=b.queue={pending:null,dispatch:null,lastRenderedReducer:Ua,
lastRenderedState:a};a=a.dispatch=ch.bind(null,z,a);return[b.memoizedState,a]}function ye(a,b,c,d){a={tag:a,create:b,destroy:c,deps:d,next:null};b=z.updateQueue;null===b?(b={lastEffect:null},z.updateQueue=b,b.lastEffect=a.next=a):(c=b.lastEffect,null===c?b.lastEffect=a.next=a:(d=c.next,c.next=a,a.next=d,b.lastEffect=a));return a}function dh(a){return vb().memoizedState}function ze(a,b,c,d){var e=ub();z.effectTag|=a;e.memoizedState=ye(1|b,c,void 0,void 0===d?null:d)}function Ae(a,b,c,d){var e=vb();
d=void 0===d?null:d;var f=void 0;if(null!==K){var g=K.memoizedState;f=g.destroy;if(null!==d&&ve(d,g.deps)){ye(b,c,f,d);return}}z.effectTag|=a;e.memoizedState=ye(1|b,c,f,d)}function eh(a,b){return ze(516,4,a,b)}function Xc(a,b){return Ae(516,4,a,b)}function fh(a,b){return Ae(4,2,a,b)}function gh(a,b){if("function"===typeof b)return a=a(),b(a),function(){b(null)};if(null!==b&&void 0!==b)return a=a(),b.current=a,function(){b.current=null}}function hh(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;
return Ae(4,2,gh.bind(null,b,a),c)}function Be(a,b){}function ih(a,b){ub().memoizedState=[a,void 0===b?null:b];return a}function Yc(a,b){var c=vb();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&ve(b,d[1]))return d[0];c.memoizedState=[a,b];return a}function jh(a,b){var c=vb();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&ve(b,d[1]))return d[0];a=a();c.memoizedState=[a,b];return a}function Ce(a,b,c){var d=Cc();Da(98>d?98:d,function(){a(!0)});Da(97<d?97:d,function(){var d=
X.suspense;X.suspense=void 0===b?null:b;try{a(!1),c()}finally{X.suspense=d}})}function ch(a,b,c){var d=ka(),e=Vb.suspense;d=Va(d,a,e);e={expirationTime:d,suspenseConfig:e,action:c,eagerReducer:null,eagerState:null,next:null};var f=b.pending;null===f?e.next=e:(e.next=f.next,f.next=e);b.pending=e;f=a.alternate;if(a===z||null!==f&&f===z)Uc=!0,e.expirationTime=Ia,z.expirationTime=Ia;else{if(0===a.expirationTime&&(null===f||0===f.expirationTime)&&(f=b.lastRenderedReducer,null!==f))try{var g=b.lastRenderedState,
h=f(g,c);e.eagerReducer=f;e.eagerState=h;if(Qa(h,g))return}catch(m){}finally{}Ja(a,d)}}function kh(a,b){var c=la(5,null,null,0);c.elementType="DELETED";c.type="DELETED";c.stateNode=b;c.return=a;c.effectTag=8;null!==a.lastEffect?(a.lastEffect.nextEffect=c,a.lastEffect=c):a.firstEffect=a.lastEffect=c}function lh(a,b){switch(a.tag){case 5:var c=a.type;b=1!==b.nodeType||c.toLowerCase()!==b.nodeName.toLowerCase()?null:b;return null!==b?(a.stateNode=b,!0):!1;case 6:return b=""===a.pendingProps||3!==b.nodeType?
null:b,null!==b?(a.stateNode=b,!0):!1;case 13:return!1;default:return!1}}function De(a){if(Wa){var b=Ka;if(b){var c=b;if(!lh(a,b)){b=kb(c.nextSibling);if(!b||!lh(a,b)){a.effectTag=a.effectTag&-1025|2;Wa=!1;ra=a;return}kh(ra,c)}ra=a;Ka=kb(b.firstChild)}else a.effectTag=a.effectTag&-1025|2,Wa=!1,ra=a}}function mh(a){for(a=a.return;null!==a&&5!==a.tag&&3!==a.tag&&13!==a.tag;)a=a.return;ra=a}function Zc(a){if(a!==ra)return!1;if(!Wa)return mh(a),Wa=!0,!1;var b=a.type;if(5!==a.tag||"head"!==b&&"body"!==
b&&!Yd(b,a.memoizedProps))for(b=Ka;b;)kh(a,b),b=kb(b.nextSibling);mh(a);if(13===a.tag){a=a.memoizedState;a=null!==a?a.dehydrated:null;if(!a)throw Error(k(317));a:{a=a.nextSibling;for(b=0;a;){if(8===a.nodeType){var c=a.data;if(c===og){if(0===b){Ka=kb(a.nextSibling);break a}b--}else c!==ng&&c!==Zd&&c!==$d||b++}a=a.nextSibling}Ka=null}}else Ka=ra?kb(a.stateNode.nextSibling):null;return!0}function Ee(){Ka=ra=null;Wa=!1}function T(a,b,c,d){b.child=null===a?Fe(b,null,c,d):wb(b,a.child,c,d)}function nh(a,
b,c,d,e){c=c.render;var f=b.ref;rb(b,e);d=we(a,b,c,d,f,e);if(null!==a&&!ia)return b.updateQueue=a.updateQueue,b.effectTag&=-517,a.expirationTime<=e&&(a.expirationTime=0),sa(a,b,e);b.effectTag|=1;T(a,b,d,e);return b.child}function oh(a,b,c,d,e,f){if(null===a){var g=c.type;if("function"===typeof g&&!Ge(g)&&void 0===g.defaultProps&&null===c.compare&&void 0===c.defaultProps)return b.tag=15,b.type=g,ph(a,b,g,d,e,f);a=Oc(c.type,null,d,null,b.mode,f);a.ref=b.ref;a.return=b;return b.child=a}g=a.child;if(e<
f&&(e=g.memoizedProps,c=c.compare,c=null!==c?c:Ob,c(e,d)&&a.ref===b.ref))return sa(a,b,f);b.effectTag|=1;a=Sa(g,d);a.ref=b.ref;a.return=b;return b.child=a}function ph(a,b,c,d,e,f){return null!==a&&Ob(a.memoizedProps,d)&&a.ref===b.ref&&(ia=!1,e<f)?(b.expirationTime=a.expirationTime,sa(a,b,f)):He(a,b,c,d,f)}function qh(a,b){var c=b.ref;if(null===a&&null!==c||null!==a&&a.ref!==c)b.effectTag|=128}function He(a,b,c,d,e){var f=N(c)?Ra:B.current;f=pb(b,f);rb(b,e);c=we(a,b,c,d,f,e);if(null!==a&&!ia)return b.updateQueue=
a.updateQueue,b.effectTag&=-517,a.expirationTime<=e&&(a.expirationTime=0),sa(a,b,e);b.effectTag|=1;T(a,b,c,e);return b.child}function rh(a,b,c,d,e){if(N(c)){var f=!0;Bc(b)}else f=!1;rb(b,e);if(null===b.stateNode)null!==a&&(a.alternate=null,b.alternate=null,b.effectTag|=2),Yg(b,c,d),pe(b,c,d,e),d=!0;else if(null===a){var g=b.stateNode,h=b.memoizedProps;g.props=h;var m=g.context,n=c.contextType;"object"===typeof n&&null!==n?n=W(n):(n=N(c)?Ra:B.current,n=pb(b,n));var l=c.getDerivedStateFromProps,k="function"===
typeof l||"function"===typeof g.getSnapshotBeforeUpdate;k||"function"!==typeof g.UNSAFE_componentWillReceiveProps&&"function"!==typeof g.componentWillReceiveProps||(h!==d||m!==n)&&Zg(b,g,d,n);Ga=!1;var p=b.memoizedState;g.state=p;Qb(b,d,g,e);m=b.memoizedState;h!==d||p!==m||G.current||Ga?("function"===typeof l&&(Lc(b,c,l,d),m=b.memoizedState),(h=Ga||Xg(b,c,h,d,p,m,n))?(k||"function"!==typeof g.UNSAFE_componentWillMount&&"function"!==typeof g.componentWillMount||("function"===typeof g.componentWillMount&&
g.componentWillMount(),"function"===typeof g.UNSAFE_componentWillMount&&g.UNSAFE_componentWillMount()),"function"===typeof g.componentDidMount&&(b.effectTag|=4)):("function"===typeof g.componentDidMount&&(b.effectTag|=4),b.memoizedProps=d,b.memoizedState=m),g.props=d,g.state=m,g.context=n,d=h):("function"===typeof g.componentDidMount&&(b.effectTag|=4),d=!1)}else g=b.stateNode,oe(a,b),h=b.memoizedProps,g.props=b.type===b.elementType?h:aa(b.type,h),m=g.context,n=c.contextType,"object"===typeof n&&null!==
n?n=W(n):(n=N(c)?Ra:B.current,n=pb(b,n)),l=c.getDerivedStateFromProps,(k="function"===typeof l||"function"===typeof g.getSnapshotBeforeUpdate)||"function"!==typeof g.UNSAFE_componentWillReceiveProps&&"function"!==typeof g.componentWillReceiveProps||(h!==d||m!==n)&&Zg(b,g,d,n),Ga=!1,m=b.memoizedState,g.state=m,Qb(b,d,g,e),p=b.memoizedState,h!==d||m!==p||G.current||Ga?("function"===typeof l&&(Lc(b,c,l,d),p=b.memoizedState),(l=Ga||Xg(b,c,h,d,m,p,n))?(k||"function"!==typeof g.UNSAFE_componentWillUpdate&&
"function"!==typeof g.componentWillUpdate||("function"===typeof g.componentWillUpdate&&g.componentWillUpdate(d,p,n),"function"===typeof g.UNSAFE_componentWillUpdate&&g.UNSAFE_componentWillUpdate(d,p,n)),"function"===typeof g.componentDidUpdate&&(b.effectTag|=4),"function"===typeof g.getSnapshotBeforeUpdate&&(b.effectTag|=256)):("function"!==typeof g.componentDidUpdate||h===a.memoizedProps&&m===a.memoizedState||(b.effectTag|=4),"function"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&m===
a.memoizedState||(b.effectTag|=256),b.memoizedProps=d,b.memoizedState=p),g.props=d,g.state=p,g.context=n,d=l):("function"!==typeof g.componentDidUpdate||h===a.memoizedProps&&m===a.memoizedState||(b.effectTag|=4),"function"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&m===a.memoizedState||(b.effectTag|=256),d=!1);return Ie(a,b,c,d,f,e)}function Ie(a,b,c,d,e,f){qh(a,b);var g=0!==(b.effectTag&64);if(!d&&!g)return e&&Hg(b,c,!1),sa(a,b,f);d=b.stateNode;gj.current=b;var h=g&&"function"!==typeof c.getDerivedStateFromError?
null:d.render();b.effectTag|=1;null!==a&&g?(b.child=wb(b,a.child,null,f),b.child=wb(b,null,h,f)):T(a,b,h,f);b.memoizedState=d.state;e&&Hg(b,c,!0);return b.child}function sh(a){var b=a.stateNode;b.pendingContext?Fg(a,b.pendingContext,b.pendingContext!==b.context):b.context&&Fg(a,b.context,!1);se(a,b.containerInfo)}function th(a,b,c){var d=b.mode,e=b.pendingProps,f=D.current,g=!1,h;(h=0!==(b.effectTag&64))||(h=0!==(f&2)&&(null===a||null!==a.memoizedState));h?(g=!0,b.effectTag&=-65):null!==a&&null===
a.memoizedState||void 0===e.fallback||!0===e.unstable_avoidThisFallback||(f|=1);y(D,f&1);if(null===a){void 0!==e.fallback&&De(b);if(g){g=e.fallback;e=Ha(null,d,0,null);e.return=b;if(0===(b.mode&2))for(a=null!==b.memoizedState?b.child.child:b.child,e.child=a;null!==a;)a.return=e,a=a.sibling;c=Ha(g,d,c,null);c.return=b;e.sibling=c;b.memoizedState=Je;b.child=e;return c}d=e.children;b.memoizedState=null;return b.child=Fe(b,null,d,c)}if(null!==a.memoizedState){a=a.child;d=a.sibling;if(g){e=e.fallback;
c=Sa(a,a.pendingProps);c.return=b;if(0===(b.mode&2)&&(g=null!==b.memoizedState?b.child.child:b.child,g!==a.child))for(c.child=g;null!==g;)g.return=c,g=g.sibling;d=Sa(d,e);d.return=b;c.sibling=d;c.childExpirationTime=0;b.memoizedState=Je;b.child=c;return d}c=wb(b,a.child,e.children,c);b.memoizedState=null;return b.child=c}a=a.child;if(g){g=e.fallback;e=Ha(null,d,0,null);e.return=b;e.child=a;null!==a&&(a.return=e);if(0===(b.mode&2))for(a=null!==b.memoizedState?b.child.child:b.child,e.child=a;null!==
a;)a.return=e,a=a.sibling;c=Ha(g,d,c,null);c.return=b;e.sibling=c;c.effectTag|=2;e.childExpirationTime=0;b.memoizedState=Je;b.child=e;return c}b.memoizedState=null;return b.child=wb(b,a,e.children,c)}function uh(a,b){a.expirationTime<b&&(a.expirationTime=b);var c=a.alternate;null!==c&&c.expirationTime<b&&(c.expirationTime=b);Sg(a.return,b)}function Ke(a,b,c,d,e,f){var g=a.memoizedState;null===g?a.memoizedState={isBackwards:b,rendering:null,renderingStartTime:0,last:d,tail:c,tailExpiration:0,tailMode:e,
lastEffect:f}:(g.isBackwards=b,g.rendering=null,g.renderingStartTime=0,g.last=d,g.tail=c,g.tailExpiration=0,g.tailMode=e,g.lastEffect=f)}function vh(a,b,c){var d=b.pendingProps,e=d.revealOrder,f=d.tail;T(a,b,d.children,c);d=D.current;if(0!==(d&2))d=d&1|2,b.effectTag|=64;else{if(null!==a&&0!==(a.effectTag&64))a:for(a=b.child;null!==a;){if(13===a.tag)null!==a.memoizedState&&uh(a,c);else if(19===a.tag)uh(a,c);else if(null!==a.child){a.child.return=a;a=a.child;continue}if(a===b)break a;for(;null===a.sibling;){if(null===
a.return||a.return===b)break a;a=a.return}a.sibling.return=a.return;a=a.sibling}d&=1}y(D,d);if(0===(b.mode&2))b.memoizedState=null;else switch(e){case "forwards":c=b.child;for(e=null;null!==c;)a=c.alternate,null!==a&&null===Rc(a)&&(e=c),c=c.sibling;c=e;null===c?(e=b.child,b.child=null):(e=c.sibling,c.sibling=null);Ke(b,!1,e,c,f,b.lastEffect);break;case "backwards":c=null;e=b.child;for(b.child=null;null!==e;){a=e.alternate;if(null!==a&&null===Rc(a)){b.child=e;break}a=e.sibling;e.sibling=c;c=e;e=a}Ke(b,
!0,c,null,f,b.lastEffect);break;case "together":Ke(b,!1,null,null,void 0,b.lastEffect);break;default:b.memoizedState=null}return b.child}function sa(a,b,c){null!==a&&(b.dependencies=a.dependencies);var d=b.expirationTime;0!==d&&Kc(d);if(b.childExpirationTime<c)return null;if(null!==a&&b.child!==a.child)throw Error(k(153));if(null!==b.child){a=b.child;c=Sa(a,a.pendingProps);b.child=c;for(c.return=b;null!==a.sibling;)a=a.sibling,c=c.sibling=Sa(a,a.pendingProps),c.return=b;c.sibling=null}return b.child}
function $c(a,b){switch(a.tailMode){case "hidden":b=a.tail;for(var c=null;null!==b;)null!==b.alternate&&(c=b),b=b.sibling;null===c?a.tail=null:c.sibling=null;break;case "collapsed":c=a.tail;for(var d=null;null!==c;)null!==c.alternate&&(d=c),c=c.sibling;null===d?b||null===a.tail?a.tail=null:a.tail.sibling=null:d.sibling=null}}function hj(a,b,c){var d=b.pendingProps;switch(b.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return N(b.type)&&(q(G),q(B)),
null;case 3:return tb(),q(G),q(B),c=b.stateNode,c.pendingContext&&(c.context=c.pendingContext,c.pendingContext=null),null!==a&&null!==a.child||!Zc(b)||(b.effectTag|=4),wh(b),null;case 5:te(b);c=Ta(Tb.current);var e=b.type;if(null!==a&&null!=b.stateNode)ij(a,b,e,d,c),a.ref!==b.ref&&(b.effectTag|=128);else{if(!d){if(null===b.stateNode)throw Error(k(166));return null}a=Ta(ja.current);if(Zc(b)){d=b.stateNode;e=b.type;var f=b.memoizedProps;d[Aa]=b;d[vc]=f;switch(e){case "iframe":case "object":case "embed":w("load",
d);break;case "video":case "audio":for(a=0;a<Db.length;a++)w(Db[a],d);break;case "source":w("error",d);break;case "img":case "image":case "link":w("error",d);w("load",d);break;case "form":w("reset",d);w("submit",d);break;case "details":w("toggle",d);break;case "input":Hf(d,f);w("invalid",d);oa(c,"onChange");break;case "select":d._wrapperState={wasMultiple:!!f.multiple};w("invalid",d);oa(c,"onChange");break;case "textarea":Kf(d,f),w("invalid",d),oa(c,"onChange")}Ud(e,f);a=null;for(var g in f)if(f.hasOwnProperty(g)){var h=
f[g];"children"===g?"string"===typeof h?d.textContent!==h&&(a=["children",h]):"number"===typeof h&&d.textContent!==""+h&&(a=["children",""+h]):db.hasOwnProperty(g)&&null!=h&&oa(c,g)}switch(e){case "input":mc(d);Jf(d,f,!0);break;case "textarea":mc(d);Mf(d);break;case "select":case "option":break;default:"function"===typeof f.onClick&&(d.onclick=uc)}c=a;b.updateQueue=c;null!==c&&(b.effectTag|=4)}else{g=9===c.nodeType?c:c.ownerDocument;"http://www.w3.org/1999/xhtml"===a&&(a=Nf(e));"http://www.w3.org/1999/xhtml"===
a?"script"===e?(a=g.createElement("div"),a.innerHTML="<script>\x3c/script>",a=a.removeChild(a.firstChild)):"string"===typeof d.is?a=g.createElement(e,{is:d.is}):(a=g.createElement(e),"select"===e&&(g=a,d.multiple?g.multiple=!0:d.size&&(g.size=d.size))):a=g.createElementNS(a,e);a[Aa]=b;a[vc]=d;jj(a,b,!1,!1);b.stateNode=a;g=Vd(e,d);switch(e){case "iframe":case "object":case "embed":w("load",a);h=d;break;case "video":case "audio":for(h=0;h<Db.length;h++)w(Db[h],a);h=d;break;case "source":w("error",a);
h=d;break;case "img":case "image":case "link":w("error",a);w("load",a);h=d;break;case "form":w("reset",a);w("submit",a);h=d;break;case "details":w("toggle",a);h=d;break;case "input":Hf(a,d);h=Cd(a,d);w("invalid",a);oa(c,"onChange");break;case "option":h=Fd(a,d);break;case "select":a._wrapperState={wasMultiple:!!d.multiple};h=M({},d,{value:void 0});w("invalid",a);oa(c,"onChange");break;case "textarea":Kf(a,d);h=Gd(a,d);w("invalid",a);oa(c,"onChange");break;default:h=d}Ud(e,h);var m=h;for(f in m)if(m.hasOwnProperty(f)){var n=
m[f];"style"===f?gg(a,n):"dangerouslySetInnerHTML"===f?(n=n?n.__html:void 0,null!=n&&xh(a,n)):"children"===f?"string"===typeof n?("textarea"!==e||""!==n)&&Wb(a,n):"number"===typeof n&&Wb(a,""+n):"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&"autoFocus"!==f&&(db.hasOwnProperty(f)?null!=n&&oa(c,f):null!=n&&xd(a,f,n,g))}switch(e){case "input":mc(a);Jf(a,d,!1);break;case "textarea":mc(a);Mf(a);break;case "option":null!=d.value&&a.setAttribute("value",""+va(d.value));break;case "select":a.multiple=
!!d.multiple;c=d.value;null!=c?hb(a,!!d.multiple,c,!1):null!=d.defaultValue&&hb(a,!!d.multiple,d.defaultValue,!0);break;default:"function"===typeof h.onClick&&(a.onclick=uc)}lg(e,d)&&(b.effectTag|=4)}null!==b.ref&&(b.effectTag|=128)}return null;case 6:if(a&&null!=b.stateNode)kj(a,b,a.memoizedProps,d);else{if("string"!==typeof d&&null===b.stateNode)throw Error(k(166));c=Ta(Tb.current);Ta(ja.current);Zc(b)?(c=b.stateNode,d=b.memoizedProps,c[Aa]=b,c.nodeValue!==d&&(b.effectTag|=4)):(c=(9===c.nodeType?
c:c.ownerDocument).createTextNode(d),c[Aa]=b,b.stateNode=c)}return null;case 13:q(D);d=b.memoizedState;if(0!==(b.effectTag&64))return b.expirationTime=c,b;c=null!==d;d=!1;null===a?void 0!==b.memoizedProps.fallback&&Zc(b):(e=a.memoizedState,d=null!==e,c||null===e||(e=a.child.sibling,null!==e&&(f=b.firstEffect,null!==f?(b.firstEffect=e,e.nextEffect=f):(b.firstEffect=b.lastEffect=e,e.nextEffect=null),e.effectTag=8)));if(c&&!d&&0!==(b.mode&2))if(null===a&&!0!==b.memoizedProps.unstable_avoidThisFallback||
0!==(D.current&1))F===Xa&&(F=ad);else{if(F===Xa||F===ad)F=bd;0!==Xb&&null!==U&&(Ya(U,P),yh(U,Xb))}if(c||d)b.effectTag|=4;return null;case 4:return tb(),wh(b),null;case 10:return me(b),null;case 17:return N(b.type)&&(q(G),q(B)),null;case 19:q(D);d=b.memoizedState;if(null===d)return null;e=0!==(b.effectTag&64);f=d.rendering;if(null===f)if(e)$c(d,!1);else{if(F!==Xa||null!==a&&0!==(a.effectTag&64))for(f=b.child;null!==f;){a=Rc(f);if(null!==a){b.effectTag|=64;$c(d,!1);e=a.updateQueue;null!==e&&(b.updateQueue=
e,b.effectTag|=4);null===d.lastEffect&&(b.firstEffect=null);b.lastEffect=d.lastEffect;for(d=b.child;null!==d;)e=d,f=c,e.effectTag&=2,e.nextEffect=null,e.firstEffect=null,e.lastEffect=null,a=e.alternate,null===a?(e.childExpirationTime=0,e.expirationTime=f,e.child=null,e.memoizedProps=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null):(e.childExpirationTime=a.childExpirationTime,e.expirationTime=a.expirationTime,e.child=a.child,e.memoizedProps=a.memoizedProps,e.memoizedState=a.memoizedState,
e.updateQueue=a.updateQueue,f=a.dependencies,e.dependencies=null===f?null:{expirationTime:f.expirationTime,firstContext:f.firstContext,responders:f.responders}),d=d.sibling;y(D,D.current&1|2);return b.child}f=f.sibling}}else{if(!e)if(a=Rc(f),null!==a){if(b.effectTag|=64,e=!0,c=a.updateQueue,null!==c&&(b.updateQueue=c,b.effectTag|=4),$c(d,!0),null===d.tail&&"hidden"===d.tailMode&&!f.alternate)return b=b.lastEffect=d.lastEffect,null!==b&&(b.nextEffect=null),null}else 2*Y()-d.renderingStartTime>d.tailExpiration&&
1<c&&(b.effectTag|=64,e=!0,$c(d,!1),b.expirationTime=b.childExpirationTime=c-1);d.isBackwards?(f.sibling=b.child,b.child=f):(c=d.last,null!==c?c.sibling=f:b.child=f,d.last=f)}return null!==d.tail?(0===d.tailExpiration&&(d.tailExpiration=Y()+500),c=d.tail,d.rendering=c,d.tail=c.sibling,d.lastEffect=b.lastEffect,d.renderingStartTime=Y(),c.sibling=null,b=D.current,y(D,e?b&1|2:b&1),c):null}throw Error(k(156,b.tag));}function lj(a,b){switch(a.tag){case 1:return N(a.type)&&(q(G),q(B)),b=a.effectTag,b&4096?
(a.effectTag=b&-4097|64,a):null;case 3:tb();q(G);q(B);b=a.effectTag;if(0!==(b&64))throw Error(k(285));a.effectTag=b&-4097|64;return a;case 5:return te(a),null;case 13:return q(D),b=a.effectTag,b&4096?(a.effectTag=b&-4097|64,a):null;case 19:return q(D),null;case 4:return tb(),null;case 10:return me(a),null;default:return null}}function Le(a,b){return{value:a,source:b,stack:Bd(b)}}function Me(a,b){var c=b.source,d=b.stack;null===d&&null!==c&&(d=Bd(c));null!==c&&na(c.type);b=b.value;null!==a&&1===a.tag&&
na(a.type);try{console.error(b)}catch(e){setTimeout(function(){throw e;})}}function mj(a,b){try{b.props=a.memoizedProps,b.state=a.memoizedState,b.componentWillUnmount()}catch(c){Za(a,c)}}function zh(a){var b=a.ref;if(null!==b)if("function"===typeof b)try{b(null)}catch(c){Za(a,c)}else b.current=null}function nj(a,b){switch(b.tag){case 0:case 11:case 15:case 22:return;case 1:if(b.effectTag&256&&null!==a){var c=a.memoizedProps,d=a.memoizedState;a=b.stateNode;b=a.getSnapshotBeforeUpdate(b.elementType===
b.type?c:aa(b.type,c),d);a.__reactInternalSnapshotBeforeUpdate=b}return;case 3:case 5:case 6:case 4:case 17:return}throw Error(k(163));}function Ah(a,b){b=b.updateQueue;b=null!==b?b.lastEffect:null;if(null!==b){var c=b=b.next;do{if((c.tag&a)===a){var d=c.destroy;c.destroy=void 0;void 0!==d&&d()}c=c.next}while(c!==b)}}function Bh(a,b){b=b.updateQueue;b=null!==b?b.lastEffect:null;if(null!==b){var c=b=b.next;do{if((c.tag&a)===a){var d=c.create;c.destroy=d()}c=c.next}while(c!==b)}}function oj(a,b,c,d){switch(c.tag){case 0:case 11:case 15:case 22:Bh(3,
c);return;case 1:a=c.stateNode;c.effectTag&4&&(null===b?a.componentDidMount():(d=c.elementType===c.type?b.memoizedProps:aa(c.type,b.memoizedProps),a.componentDidUpdate(d,b.memoizedState,a.__reactInternalSnapshotBeforeUpdate)));b=c.updateQueue;null!==b&&Wg(c,b,a);return;case 3:b=c.updateQueue;if(null!==b){a=null;if(null!==c.child)switch(c.child.tag){case 5:a=c.child.stateNode;break;case 1:a=c.child.stateNode}Wg(c,b,a)}return;case 5:a=c.stateNode;null===b&&c.effectTag&4&&lg(c.type,c.memoizedProps)&&
a.focus();return;case 6:return;case 4:return;case 12:return;case 13:null===c.memoizedState&&(c=c.alternate,null!==c&&(c=c.memoizedState,null!==c&&(c=c.dehydrated,null!==c&&bg(c))));return;case 19:case 17:case 20:case 21:return}throw Error(k(163));}function Ch(a,b,c){"function"===typeof Ne&&Ne(b);switch(b.tag){case 0:case 11:case 14:case 15:case 22:a=b.updateQueue;if(null!==a&&(a=a.lastEffect,null!==a)){var d=a.next;Da(97<c?97:c,function(){var a=d;do{var c=a.destroy;if(void 0!==c){var g=b;try{c()}catch(h){Za(g,
h)}}a=a.next}while(a!==d)})}break;case 1:zh(b);c=b.stateNode;"function"===typeof c.componentWillUnmount&&mj(b,c);break;case 5:zh(b);break;case 4:Dh(a,b,c)}}function Eh(a){var b=a.alternate;a.return=null;a.child=null;a.memoizedState=null;a.updateQueue=null;a.dependencies=null;a.alternate=null;a.firstEffect=null;a.lastEffect=null;a.pendingProps=null;a.memoizedProps=null;a.stateNode=null;null!==b&&Eh(b)}function Fh(a){return 5===a.tag||3===a.tag||4===a.tag}function Gh(a){a:{for(var b=a.return;null!==
b;){if(Fh(b)){var c=b;break a}b=b.return}throw Error(k(160));}b=c.stateNode;switch(c.tag){case 5:var d=!1;break;case 3:b=b.containerInfo;d=!0;break;case 4:b=b.containerInfo;d=!0;break;default:throw Error(k(161));}c.effectTag&16&&(Wb(b,""),c.effectTag&=-17);a:b:for(c=a;;){for(;null===c.sibling;){if(null===c.return||Fh(c.return)){c=null;break a}c=c.return}c.sibling.return=c.return;for(c=c.sibling;5!==c.tag&&6!==c.tag&&18!==c.tag;){if(c.effectTag&2)continue b;if(null===c.child||4===c.tag)continue b;
else c.child.return=c,c=c.child}if(!(c.effectTag&2)){c=c.stateNode;break a}}d?Oe(a,c,b):Pe(a,c,b)}function Oe(a,b,c){var d=a.tag,e=5===d||6===d;if(e)a=e?a.stateNode:a.stateNode.instance,b?8===c.nodeType?c.parentNode.insertBefore(a,b):c.insertBefore(a,b):(8===c.nodeType?(b=c.parentNode,b.insertBefore(a,c)):(b=c,b.appendChild(a)),c=c._reactRootContainer,null!==c&&void 0!==c||null!==b.onclick||(b.onclick=uc));else if(4!==d&&(a=a.child,null!==a))for(Oe(a,b,c),a=a.sibling;null!==a;)Oe(a,b,c),a=a.sibling}
function Pe(a,b,c){var d=a.tag,e=5===d||6===d;if(e)a=e?a.stateNode:a.stateNode.instance,b?c.insertBefore(a,b):c.appendChild(a);else if(4!==d&&(a=a.child,null!==a))for(Pe(a,b,c),a=a.sibling;null!==a;)Pe(a,b,c),a=a.sibling}function Dh(a,b,c){for(var d=b,e=!1,f,g;;){if(!e){e=d.return;a:for(;;){if(null===e)throw Error(k(160));f=e.stateNode;switch(e.tag){case 5:g=!1;break a;case 3:f=f.containerInfo;g=!0;break a;case 4:f=f.containerInfo;g=!0;break a}e=e.return}e=!0}if(5===d.tag||6===d.tag){a:for(var h=
a,m=d,n=c,l=m;;)if(Ch(h,l,n),null!==l.child&&4!==l.tag)l.child.return=l,l=l.child;else{if(l===m)break a;for(;null===l.sibling;){if(null===l.return||l.return===m)break a;l=l.return}l.sibling.return=l.return;l=l.sibling}g?(h=f,m=d.stateNode,8===h.nodeType?h.parentNode.removeChild(m):h.removeChild(m)):f.removeChild(d.stateNode)}else if(4===d.tag){if(null!==d.child){f=d.stateNode.containerInfo;g=!0;d.child.return=d;d=d.child;continue}}else if(Ch(a,d,c),null!==d.child){d.child.return=d;d=d.child;continue}if(d===
b)break;for(;null===d.sibling;){if(null===d.return||d.return===b)return;d=d.return;4===d.tag&&(e=!1)}d.sibling.return=d.return;d=d.sibling}}function Qe(a,b){switch(b.tag){case 0:case 11:case 14:case 15:case 22:Ah(3,b);return;case 1:return;case 5:var c=b.stateNode;if(null!=c){var d=b.memoizedProps,e=null!==a?a.memoizedProps:d;a=b.type;var f=b.updateQueue;b.updateQueue=null;if(null!==f){c[vc]=d;"input"===a&&"radio"===d.type&&null!=d.name&&If(c,d);Vd(a,e);b=Vd(a,d);for(e=0;e<f.length;e+=2){var g=f[e],
h=f[e+1];"style"===g?gg(c,h):"dangerouslySetInnerHTML"===g?xh(c,h):"children"===g?Wb(c,h):xd(c,g,h,b)}switch(a){case "input":Dd(c,d);break;case "textarea":Lf(c,d);break;case "select":b=c._wrapperState.wasMultiple,c._wrapperState.wasMultiple=!!d.multiple,a=d.value,null!=a?hb(c,!!d.multiple,a,!1):b!==!!d.multiple&&(null!=d.defaultValue?hb(c,!!d.multiple,d.defaultValue,!0):hb(c,!!d.multiple,d.multiple?[]:"",!1))}}}return;case 6:if(null===b.stateNode)throw Error(k(162));b.stateNode.nodeValue=b.memoizedProps;
return;case 3:b=b.stateNode;b.hydrate&&(b.hydrate=!1,bg(b.containerInfo));return;case 12:return;case 13:c=b;null===b.memoizedState?d=!1:(d=!0,c=b.child,Re=Y());if(null!==c)a:for(a=c;;){if(5===a.tag)f=a.stateNode,d?(f=f.style,"function"===typeof f.setProperty?f.setProperty("display","none","important"):f.display="none"):(f=a.stateNode,e=a.memoizedProps.style,e=void 0!==e&&null!==e&&e.hasOwnProperty("display")?e.display:null,f.style.display=fg("display",e));else if(6===a.tag)a.stateNode.nodeValue=d?
"":a.memoizedProps;else if(13===a.tag&&null!==a.memoizedState&&null===a.memoizedState.dehydrated){f=a.child.sibling;f.return=a;a=f;continue}else if(null!==a.child){a.child.return=a;a=a.child;continue}if(a===c)break;for(;null===a.sibling;){if(null===a.return||a.return===c)break a;a=a.return}a.sibling.return=a.return;a=a.sibling}Hh(b);return;case 19:Hh(b);return;case 17:return}throw Error(k(163));}function Hh(a){var b=a.updateQueue;if(null!==b){a.updateQueue=null;var c=a.stateNode;null===c&&(c=a.stateNode=
new pj);b.forEach(function(b){var d=qj.bind(null,a,b);c.has(b)||(c.add(b),b.then(d,d))})}}function Ih(a,b,c){c=Ea(c,null);c.tag=3;c.payload={element:null};var d=b.value;c.callback=function(){cd||(cd=!0,Se=d);Me(a,b)};return c}function Jh(a,b,c){c=Ea(c,null);c.tag=3;var d=a.type.getDerivedStateFromError;if("function"===typeof d){var e=b.value;c.payload=function(){Me(a,b);return d(e)}}var f=a.stateNode;null!==f&&"function"===typeof f.componentDidCatch&&(c.callback=function(){"function"!==typeof d&&
(null===La?La=new Set([this]):La.add(this),Me(a,b));var c=b.stack;this.componentDidCatch(b.value,{componentStack:null!==c?c:""})});return c}function ka(){return(p&(ca|ma))!==H?1073741821-(Y()/10|0):0!==dd?dd:dd=1073741821-(Y()/10|0)}function Va(a,b,c){b=b.mode;if(0===(b&2))return 1073741823;var d=Cc();if(0===(b&4))return 99===d?1073741823:1073741822;if((p&ca)!==H)return P;if(null!==c)a=Fc(a,c.timeoutMs|0||5E3,250);else switch(d){case 99:a=1073741823;break;case 98:a=Fc(a,150,100);break;case 97:case 96:a=
Fc(a,5E3,250);break;case 95:a=2;break;default:throw Error(k(326));}null!==U&&a===P&&--a;return a}function ed(a,b){a.expirationTime<b&&(a.expirationTime=b);var c=a.alternate;null!==c&&c.expirationTime<b&&(c.expirationTime=b);var d=a.return,e=null;if(null===d&&3===a.tag)e=a.stateNode;else for(;null!==d;){c=d.alternate;d.childExpirationTime<b&&(d.childExpirationTime=b);null!==c&&c.childExpirationTime<b&&(c.childExpirationTime=b);if(null===d.return&&3===d.tag){e=d.stateNode;break}d=d.return}null!==e&&
(U===e&&(Kc(b),F===bd&&Ya(e,P)),yh(e,b));return e}function fd(a){var b=a.lastExpiredTime;if(0!==b)return b;b=a.firstPendingTime;if(!Kh(a,b))return b;var c=a.lastPingedTime;a=a.nextKnownPendingLevel;a=c>a?c:a;return 2>=a&&b!==a?0:a}function V(a){if(0!==a.lastExpiredTime)a.callbackExpirationTime=1073741823,a.callbackPriority=99,a.callbackNode=Og(Te.bind(null,a));else{var b=fd(a),c=a.callbackNode;if(0===b)null!==c&&(a.callbackNode=null,a.callbackExpirationTime=0,a.callbackPriority=90);else{var d=ka();
1073741823===b?d=99:1===b||2===b?d=95:(d=10*(1073741821-b)-10*(1073741821-d),d=0>=d?99:250>=d?98:5250>=d?97:95);if(null!==c){var e=a.callbackPriority;if(a.callbackExpirationTime===b&&e>=d)return;c!==Qg&&Rg(c)}a.callbackExpirationTime=b;a.callbackPriority=d;b=1073741823===b?Og(Te.bind(null,a)):Ng(d,Lh.bind(null,a),{timeout:10*(1073741821-b)-Y()});a.callbackNode=b}}}function Lh(a,b){dd=0;if(b)return b=ka(),Ue(a,b),V(a),null;var c=fd(a);if(0!==c){b=a.callbackNode;if((p&(ca|ma))!==H)throw Error(k(327));
xb();a===U&&c===P||$a(a,c);if(null!==t){var d=p;p|=ca;var e=Mh();do try{rj();break}catch(h){Nh(a,h)}while(1);le();p=d;gd.current=e;if(F===hd)throw b=id,$a(a,c),Ya(a,c),V(a),b;if(null===t)switch(e=a.finishedWork=a.current.alternate,a.finishedExpirationTime=c,d=F,U=null,d){case Xa:case hd:throw Error(k(345));case Oh:Ue(a,2<c?2:c);break;case ad:Ya(a,c);d=a.lastSuspendedTime;c===d&&(a.nextKnownPendingLevel=Ve(e));if(1073741823===ta&&(e=Re+Ph-Y(),10<e)){if(jd){var f=a.lastPingedTime;if(0===f||f>=c){a.lastPingedTime=
c;$a(a,c);break}}f=fd(a);if(0!==f&&f!==c)break;if(0!==d&&d!==c){a.lastPingedTime=d;break}a.timeoutHandle=We(ab.bind(null,a),e);break}ab(a);break;case bd:Ya(a,c);d=a.lastSuspendedTime;c===d&&(a.nextKnownPendingLevel=Ve(e));if(jd&&(e=a.lastPingedTime,0===e||e>=c)){a.lastPingedTime=c;$a(a,c);break}e=fd(a);if(0!==e&&e!==c)break;if(0!==d&&d!==c){a.lastPingedTime=d;break}1073741823!==Yb?d=10*(1073741821-Yb)-Y():1073741823===ta?d=0:(d=10*(1073741821-ta)-5E3,e=Y(),c=10*(1073741821-c)-e,d=e-d,0>d&&(d=0),d=
(120>d?120:480>d?480:1080>d?1080:1920>d?1920:3E3>d?3E3:4320>d?4320:1960*sj(d/1960))-d,c<d&&(d=c));if(10<d){a.timeoutHandle=We(ab.bind(null,a),d);break}ab(a);break;case Xe:if(1073741823!==ta&&null!==kd){f=ta;var g=kd;d=g.busyMinDurationMs|0;0>=d?d=0:(e=g.busyDelayMs|0,f=Y()-(10*(1073741821-f)-(g.timeoutMs|0||5E3)),d=f<=e?0:e+d-f);if(10<d){Ya(a,c);a.timeoutHandle=We(ab.bind(null,a),d);break}}ab(a);break;default:throw Error(k(329));}V(a);if(a.callbackNode===b)return Lh.bind(null,a)}}return null}function Te(a){var b=
a.lastExpiredTime;b=0!==b?b:1073741823;if((p&(ca|ma))!==H)throw Error(k(327));xb();a===U&&b===P||$a(a,b);if(null!==t){var c=p;p|=ca;var d=Mh();do try{tj();break}catch(e){Nh(a,e)}while(1);le();p=c;gd.current=d;if(F===hd)throw c=id,$a(a,b),Ya(a,b),V(a),c;if(null!==t)throw Error(k(261));a.finishedWork=a.current.alternate;a.finishedExpirationTime=b;U=null;ab(a);V(a)}return null}function uj(){if(null!==bb){var a=bb;bb=null;a.forEach(function(a,c){Ue(c,a);V(c)});ha()}}function Qh(a,b){var c=p;p|=1;try{return a(b)}finally{p=
c,p===H&&ha()}}function Rh(a,b){var c=p;p&=-2;p|=Ye;try{return a(b)}finally{p=c,p===H&&ha()}}function $a(a,b){a.finishedWork=null;a.finishedExpirationTime=0;var c=a.timeoutHandle;-1!==c&&(a.timeoutHandle=-1,vj(c));if(null!==t)for(c=t.return;null!==c;){var d=c;switch(d.tag){case 1:d=d.type.childContextTypes;null!==d&&void 0!==d&&(q(G),q(B));break;case 3:tb();q(G);q(B);break;case 5:te(d);break;case 4:tb();break;case 13:q(D);break;case 19:q(D);break;case 10:me(d)}c=c.return}U=a;t=Sa(a.current,null);
P=b;F=Xa;id=null;Yb=ta=1073741823;kd=null;Xb=0;jd=!1}function Nh(a,b){do{try{le();Sc.current=Tc;if(Uc)for(var c=z.memoizedState;null!==c;){var d=c.queue;null!==d&&(d.pending=null);c=c.next}Ia=0;J=K=z=null;Uc=!1;if(null===t||null===t.return)return F=hd,id=b,t=null;a:{var e=a,f=t.return,g=t,h=b;b=P;g.effectTag|=2048;g.firstEffect=g.lastEffect=null;if(null!==h&&"object"===typeof h&&"function"===typeof h.then){var m=h;if(0===(g.mode&2)){var n=g.alternate;n?(g.updateQueue=n.updateQueue,g.memoizedState=
n.memoizedState,g.expirationTime=n.expirationTime):(g.updateQueue=null,g.memoizedState=null)}var l=0!==(D.current&1),k=f;do{var p;if(p=13===k.tag){var q=k.memoizedState;if(null!==q)p=null!==q.dehydrated?!0:!1;else{var w=k.memoizedProps;p=void 0===w.fallback?!1:!0!==w.unstable_avoidThisFallback?!0:l?!1:!0}}if(p){var y=k.updateQueue;if(null===y){var r=new Set;r.add(m);k.updateQueue=r}else y.add(m);if(0===(k.mode&2)){k.effectTag|=64;g.effectTag&=-2981;if(1===g.tag)if(null===g.alternate)g.tag=17;else{var O=
Ea(1073741823,null);O.tag=Jc;Fa(g,O)}g.expirationTime=1073741823;break a}h=void 0;g=b;var v=e.pingCache;null===v?(v=e.pingCache=new wj,h=new Set,v.set(m,h)):(h=v.get(m),void 0===h&&(h=new Set,v.set(m,h)));if(!h.has(g)){h.add(g);var x=xj.bind(null,e,m,g);m.then(x,x)}k.effectTag|=4096;k.expirationTime=b;break a}k=k.return}while(null!==k);h=Error((na(g.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+
Bd(g))}F!==Xe&&(F=Oh);h=Le(h,g);k=f;do{switch(k.tag){case 3:m=h;k.effectTag|=4096;k.expirationTime=b;var A=Ih(k,m,b);Ug(k,A);break a;case 1:m=h;var u=k.type,B=k.stateNode;if(0===(k.effectTag&64)&&("function"===typeof u.getDerivedStateFromError||null!==B&&"function"===typeof B.componentDidCatch&&(null===La||!La.has(B)))){k.effectTag|=4096;k.expirationTime=b;var H=Jh(k,m,b);Ug(k,H);break a}}k=k.return}while(null!==k)}t=Sh(t)}catch(cj){b=cj;continue}break}while(1)}function Mh(a){a=gd.current;gd.current=
Tc;return null===a?Tc:a}function Vg(a,b){a<ta&&2<a&&(ta=a);null!==b&&a<Yb&&2<a&&(Yb=a,kd=b)}function Kc(a){a>Xb&&(Xb=a)}function tj(){for(;null!==t;)t=Th(t)}function rj(){for(;null!==t&&!yj();)t=Th(t)}function Th(a){var b=zj(a.alternate,a,P);a.memoizedProps=a.pendingProps;null===b&&(b=Sh(a));Uh.current=null;return b}function Sh(a){t=a;do{var b=t.alternate;a=t.return;if(0===(t.effectTag&2048)){b=hj(b,t,P);if(1===P||1!==t.childExpirationTime){for(var c=0,d=t.child;null!==d;){var e=d.expirationTime,
f=d.childExpirationTime;e>c&&(c=e);f>c&&(c=f);d=d.sibling}t.childExpirationTime=c}if(null!==b)return b;null!==a&&0===(a.effectTag&2048)&&(null===a.firstEffect&&(a.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==a.lastEffect&&(a.lastEffect.nextEffect=t.firstEffect),a.lastEffect=t.lastEffect),1<t.effectTag&&(null!==a.lastEffect?a.lastEffect.nextEffect=t:a.firstEffect=t,a.lastEffect=t))}else{b=lj(t);if(null!==b)return b.effectTag&=2047,b;null!==a&&(a.firstEffect=a.lastEffect=null,a.effectTag|=
2048)}b=t.sibling;if(null!==b)return b;t=a}while(null!==t);F===Xa&&(F=Xe);return null}function Ve(a){var b=a.expirationTime;a=a.childExpirationTime;return b>a?b:a}function ab(a){var b=Cc();Da(99,Aj.bind(null,a,b));return null}function Aj(a,b){do xb();while(null!==Zb);if((p&(ca|ma))!==H)throw Error(k(327));var c=a.finishedWork,d=a.finishedExpirationTime;if(null===c)return null;a.finishedWork=null;a.finishedExpirationTime=0;if(c===a.current)throw Error(k(177));a.callbackNode=null;a.callbackExpirationTime=
0;a.callbackPriority=90;a.nextKnownPendingLevel=0;var e=Ve(c);a.firstPendingTime=e;d<=a.lastSuspendedTime?a.firstSuspendedTime=a.lastSuspendedTime=a.nextKnownPendingLevel=0:d<=a.firstSuspendedTime&&(a.firstSuspendedTime=d-1);d<=a.lastPingedTime&&(a.lastPingedTime=0);d<=a.lastExpiredTime&&(a.lastExpiredTime=0);a===U&&(t=U=null,P=0);1<c.effectTag?null!==c.lastEffect?(c.lastEffect.nextEffect=c,e=c.firstEffect):e=c:e=c.firstEffect;if(null!==e){var f=p;p|=ma;Uh.current=null;Ze=tc;var g=kg();if(Xd(g)){if("selectionStart"in
g)var h={start:g.selectionStart,end:g.selectionEnd};else a:{h=(h=g.ownerDocument)&&h.defaultView||window;var m=h.getSelection&&h.getSelection();if(m&&0!==m.rangeCount){h=m.anchorNode;var n=m.anchorOffset,q=m.focusNode;m=m.focusOffset;try{h.nodeType,q.nodeType}catch(sb){h=null;break a}var ba=0,w=-1,y=-1,B=0,D=0,r=g,z=null;b:for(;;){for(var v;;){r!==h||0!==n&&3!==r.nodeType||(w=ba+n);r!==q||0!==m&&3!==r.nodeType||(y=ba+m);3===r.nodeType&&(ba+=r.nodeValue.length);if(null===(v=r.firstChild))break;z=r;
r=v}for(;;){if(r===g)break b;z===h&&++B===n&&(w=ba);z===q&&++D===m&&(y=ba);if(null!==(v=r.nextSibling))break;r=z;z=r.parentNode}r=v}h=-1===w||-1===y?null:{start:w,end:y}}else h=null}h=h||{start:0,end:0}}else h=null;$e={activeElementDetached:null,focusedElem:g,selectionRange:h};tc=!1;l=e;do try{Bj()}catch(sb){if(null===l)throw Error(k(330));Za(l,sb);l=l.nextEffect}while(null!==l);l=e;do try{for(g=a,h=b;null!==l;){var x=l.effectTag;x&16&&Wb(l.stateNode,"");if(x&128){var A=l.alternate;if(null!==A){var u=
A.ref;null!==u&&("function"===typeof u?u(null):u.current=null)}}switch(x&1038){case 2:Gh(l);l.effectTag&=-3;break;case 6:Gh(l);l.effectTag&=-3;Qe(l.alternate,l);break;case 1024:l.effectTag&=-1025;break;case 1028:l.effectTag&=-1025;Qe(l.alternate,l);break;case 4:Qe(l.alternate,l);break;case 8:n=l,Dh(g,n,h),Eh(n)}l=l.nextEffect}}catch(sb){if(null===l)throw Error(k(330));Za(l,sb);l=l.nextEffect}while(null!==l);u=$e;A=kg();x=u.focusedElem;h=u.selectionRange;if(A!==x&&x&&x.ownerDocument&&jg(x.ownerDocument.documentElement,
x)){null!==h&&Xd(x)&&(A=h.start,u=h.end,void 0===u&&(u=A),"selectionStart"in x?(x.selectionStart=A,x.selectionEnd=Math.min(u,x.value.length)):(u=(A=x.ownerDocument||document)&&A.defaultView||window,u.getSelection&&(u=u.getSelection(),n=x.textContent.length,g=Math.min(h.start,n),h=void 0===h.end?g:Math.min(h.end,n),!u.extend&&g>h&&(n=h,h=g,g=n),n=ig(x,g),q=ig(x,h),n&&q&&(1!==u.rangeCount||u.anchorNode!==n.node||u.anchorOffset!==n.offset||u.focusNode!==q.node||u.focusOffset!==q.offset)&&(A=A.createRange(),
A.setStart(n.node,n.offset),u.removeAllRanges(),g>h?(u.addRange(A),u.extend(q.node,q.offset)):(A.setEnd(q.node,q.offset),u.addRange(A))))));A=[];for(u=x;u=u.parentNode;)1===u.nodeType&&A.push({element:u,left:u.scrollLeft,top:u.scrollTop});"function"===typeof x.focus&&x.focus();for(x=0;x<A.length;x++)u=A[x],u.element.scrollLeft=u.left,u.element.scrollTop=u.top}tc=!!Ze;$e=Ze=null;a.current=c;l=e;do try{for(x=a;null!==l;){var F=l.effectTag;F&36&&oj(x,l.alternate,l);if(F&128){A=void 0;var E=l.ref;if(null!==
E){var G=l.stateNode;switch(l.tag){case 5:A=G;break;default:A=G}"function"===typeof E?E(A):E.current=A}}l=l.nextEffect}}catch(sb){if(null===l)throw Error(k(330));Za(l,sb);l=l.nextEffect}while(null!==l);l=null;Cj();p=f}else a.current=c;if(ld)ld=!1,Zb=a,$b=b;else for(l=e;null!==l;)b=l.nextEffect,l.nextEffect=null,l=b;b=a.firstPendingTime;0===b&&(La=null);1073741823===b?a===af?ac++:(ac=0,af=a):ac=0;"function"===typeof bf&&bf(c.stateNode,d);V(a);if(cd)throw cd=!1,a=Se,Se=null,a;if((p&Ye)!==H)return null;
ha();return null}function Bj(){for(;null!==l;){var a=l.effectTag;0!==(a&256)&&nj(l.alternate,l);0===(a&512)||ld||(ld=!0,Ng(97,function(){xb();return null}));l=l.nextEffect}}function xb(){if(90!==$b){var a=97<$b?97:$b;$b=90;return Da(a,Dj)}}function Dj(){if(null===Zb)return!1;var a=Zb;Zb=null;if((p&(ca|ma))!==H)throw Error(k(331));var b=p;p|=ma;for(a=a.current.firstEffect;null!==a;){try{var c=a;if(0!==(c.effectTag&512))switch(c.tag){case 0:case 11:case 15:case 22:Ah(5,c),Bh(5,c)}}catch(d){if(null===
a)throw Error(k(330));Za(a,d)}c=a.nextEffect;a.nextEffect=null;a=c}p=b;ha();return!0}function Vh(a,b,c){b=Le(c,b);b=Ih(a,b,1073741823);Fa(a,b);a=ed(a,1073741823);null!==a&&V(a)}function Za(a,b){if(3===a.tag)Vh(a,a,b);else for(var c=a.return;null!==c;){if(3===c.tag){Vh(c,a,b);break}else if(1===c.tag){var d=c.stateNode;if("function"===typeof c.type.getDerivedStateFromError||"function"===typeof d.componentDidCatch&&(null===La||!La.has(d))){a=Le(b,a);a=Jh(c,a,1073741823);Fa(c,a);c=ed(c,1073741823);null!==
c&&V(c);break}}c=c.return}}function xj(a,b,c){var d=a.pingCache;null!==d&&d.delete(b);U===a&&P===c?F===bd||F===ad&&1073741823===ta&&Y()-Re<Ph?$a(a,P):jd=!0:Kh(a,c)&&(b=a.lastPingedTime,0!==b&&b<c||(a.lastPingedTime=c,V(a)))}function qj(a,b){var c=a.stateNode;null!==c&&c.delete(b);b=0;0===b&&(b=ka(),b=Va(b,a,null));a=ed(a,b);null!==a&&V(a)}function Ej(a){if("undefined"===typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var b=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(b.isDisabled||!b.supportsFiber)return!0;try{var c=
b.inject(a);bf=function(a,e){try{b.onCommitFiberRoot(c,a,void 0,64===(a.current.effectTag&64))}catch(f){}};Ne=function(a){try{b.onCommitFiberUnmount(c,a)}catch(e){}}}catch(d){}return!0}function Fj(a,b,c,d){this.tag=a;this.key=c;this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null;this.index=0;this.ref=null;this.pendingProps=b;this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null;this.mode=d;this.effectTag=0;this.lastEffect=this.firstEffect=this.nextEffect=
null;this.childExpirationTime=this.expirationTime=0;this.alternate=null}function Ge(a){a=a.prototype;return!(!a||!a.isReactComponent)}function Gj(a){if("function"===typeof a)return Ge(a)?1:0;if(void 0!==a&&null!==a){a=a.$$typeof;if(a===zd)return 11;if(a===Ad)return 14}return 2}function Sa(a,b){var c=a.alternate;null===c?(c=la(a.tag,b,a.key,a.mode),c.elementType=a.elementType,c.type=a.type,c.stateNode=a.stateNode,c.alternate=a,a.alternate=c):(c.pendingProps=b,c.effectTag=0,c.nextEffect=null,c.firstEffect=
null,c.lastEffect=null);c.childExpirationTime=a.childExpirationTime;c.expirationTime=a.expirationTime;c.child=a.child;c.memoizedProps=a.memoizedProps;c.memoizedState=a.memoizedState;c.updateQueue=a.updateQueue;b=a.dependencies;c.dependencies=null===b?null:{expirationTime:b.expirationTime,firstContext:b.firstContext,responders:b.responders};c.sibling=a.sibling;c.index=a.index;c.ref=a.ref;return c}function Oc(a,b,c,d,e,f){var g=2;d=a;if("function"===typeof a)Ge(a)&&(g=1);else if("string"===typeof a)g=
5;else a:switch(a){case Ma:return Ha(c.children,e,f,b);case Hj:g=8;e|=7;break;case Af:g=8;e|=1;break;case kc:return a=la(12,c,b,e|8),a.elementType=kc,a.type=kc,a.expirationTime=f,a;case lc:return a=la(13,c,b,e),a.type=lc,a.elementType=lc,a.expirationTime=f,a;case yd:return a=la(19,c,b,e),a.elementType=yd,a.expirationTime=f,a;default:if("object"===typeof a&&null!==a)switch(a.$$typeof){case Cf:g=10;break a;case Bf:g=9;break a;case zd:g=11;break a;case Ad:g=14;break a;case Ef:g=16;d=null;break a;case Df:g=
22;break a}throw Error(k(130,null==a?a:typeof a,""));}b=la(g,c,b,e);b.elementType=a;b.type=d;b.expirationTime=f;return b}function Ha(a,b,c,d){a=la(7,a,d,b);a.expirationTime=c;return a}function qe(a,b,c){a=la(6,a,null,b);a.expirationTime=c;return a}function re(a,b,c){b=la(4,null!==a.children?a.children:[],a.key,b);b.expirationTime=c;b.stateNode={containerInfo:a.containerInfo,pendingChildren:null,implementation:a.implementation};return b}function Ij(a,b,c){this.tag=b;this.current=null;this.containerInfo=
a;this.pingCache=this.pendingChildren=null;this.finishedExpirationTime=0;this.finishedWork=null;this.timeoutHandle=-1;this.pendingContext=this.context=null;this.hydrate=c;this.callbackNode=null;this.callbackPriority=90;this.lastExpiredTime=this.lastPingedTime=this.nextKnownPendingLevel=this.lastSuspendedTime=this.firstSuspendedTime=this.firstPendingTime=0}function Kh(a,b){var c=a.firstSuspendedTime;a=a.lastSuspendedTime;return 0!==c&&c>=b&&a<=b}function Ya(a,b){var c=a.firstSuspendedTime,d=a.lastSuspendedTime;
c<b&&(a.firstSuspendedTime=b);if(d>b||0===c)a.lastSuspendedTime=b;b<=a.lastPingedTime&&(a.lastPingedTime=0);b<=a.lastExpiredTime&&(a.lastExpiredTime=0)}function yh(a,b){b>a.firstPendingTime&&(a.firstPendingTime=b);var c=a.firstSuspendedTime;0!==c&&(b>=c?a.firstSuspendedTime=a.lastSuspendedTime=a.nextKnownPendingLevel=0:b>=a.lastSuspendedTime&&(a.lastSuspendedTime=b+1),b>a.nextKnownPendingLevel&&(a.nextKnownPendingLevel=b))}function Ue(a,b){var c=a.lastExpiredTime;if(0===c||c>b)a.lastExpiredTime=b}
function md(a,b,c,d){var e=b.current,f=ka(),g=Vb.suspense;f=Va(f,e,g);a:if(c){c=c._reactInternalFiber;b:{if(Na(c)!==c||1!==c.tag)throw Error(k(170));var h=c;do{switch(h.tag){case 3:h=h.stateNode.context;break b;case 1:if(N(h.type)){h=h.stateNode.__reactInternalMemoizedMergedChildContext;break b}}h=h.return}while(null!==h);throw Error(k(171));}if(1===c.tag){var m=c.type;if(N(m)){c=Gg(c,m,h);break a}}c=h}else c=Ca;null===b.context?b.context=c:b.pendingContext=c;b=Ea(f,g);b.payload={element:a};d=void 0===
d?null:d;null!==d&&(b.callback=d);Fa(e,b);Ja(e,f);return f}function cf(a){a=a.current;if(!a.child)return null;switch(a.child.tag){case 5:return a.child.stateNode;default:return a.child.stateNode}}function Wh(a,b){a=a.memoizedState;null!==a&&null!==a.dehydrated&&a.retryTime<b&&(a.retryTime=b)}function df(a,b){Wh(a,b);(a=a.alternate)&&Wh(a,b)}function ef(a,b,c){c=null!=c&&!0===c.hydrate;var d=new Ij(a,b,c),e=la(3,null,null,2===b?7:1===b?3:0);d.current=e;e.stateNode=d;ne(e);a[Lb]=d.current;c&&0!==b&&
xi(a,9===a.nodeType?a:a.ownerDocument);this._internalRoot=d}function bc(a){return!(!a||1!==a.nodeType&&9!==a.nodeType&&11!==a.nodeType&&(8!==a.nodeType||" react-mount-point-unstable "!==a.nodeValue))}function Jj(a,b){b||(b=a?9===a.nodeType?a.documentElement:a.firstChild:null,b=!(!b||1!==b.nodeType||!b.hasAttribute("data-reactroot")));if(!b)for(var c;c=a.lastChild;)a.removeChild(c);return new ef(a,0,b?{hydrate:!0}:void 0)}function nd(a,b,c,d,e){var f=c._reactRootContainer;if(f){var g=f._internalRoot;
if("function"===typeof e){var h=e;e=function(){var a=cf(g);h.call(a)}}md(b,g,a,e)}else{f=c._reactRootContainer=Jj(c,d);g=f._internalRoot;if("function"===typeof e){var m=e;e=function(){var a=cf(g);m.call(a)}}Rh(function(){md(b,g,a,e)})}return cf(g)}function Kj(a,b,c){var d=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:gb,key:null==d?null:""+d,children:a,containerInfo:b,implementation:c}}function Xh(a,b){var c=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;
if(!bc(b))throw Error(k(200));return Kj(a,b,null,c)}if(!ea)throw Error(k(227));var ki=function(a,b,c,d,e,f,g,h,m){var n=Array.prototype.slice.call(arguments,3);try{b.apply(c,n)}catch(C){this.onError(C)}},yb=!1,gc=null,hc=!1,pd=null,li={onError:function(a){yb=!0;gc=a}},td=null,rf=null,mf=null,ic=null,cb={},jc=[],qd={},db={},rd={},wa=!("undefined"===typeof window||"undefined"===typeof window.document||"undefined"===typeof window.document.createElement),M=ea.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.assign,
sd=null,eb=null,fb=null,ee=function(a,b){return a(b)},eg=function(a,b,c,d,e){return a(b,c,d,e)},vd=function(){},vf=ee,Oa=!1,wd=!1,Z=ea.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.Scheduler,Lj=Z.unstable_cancelCallback,ff=Z.unstable_now,$f=Z.unstable_scheduleCallback,Mj=Z.unstable_shouldYield,Yh=Z.unstable_requestPaint,Pd=Z.unstable_runWithPriority,Nj=Z.unstable_getCurrentPriorityLevel,Oj=Z.unstable_ImmediatePriority,Zh=Z.unstable_UserBlockingPriority,ag=Z.unstable_NormalPriority,Pj=Z.unstable_LowPriority,
Qj=Z.unstable_IdlePriority,oi=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,wf=Object.prototype.hasOwnProperty,yf={},xf={},E={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(a){E[a]=
new L(a,0,!1,a,null,!1)});[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(a){var b=a[0];E[b]=new L(b,1,!1,a[1],null,!1)});["contentEditable","draggable","spellCheck","value"].forEach(function(a){E[a]=new L(a,2,!1,a.toLowerCase(),null,!1)});["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(a){E[a]=new L(a,2,!1,a,null,!1)});"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a){E[a]=
new L(a,3,!1,a.toLowerCase(),null,!1)});["checked","multiple","muted","selected"].forEach(function(a){E[a]=new L(a,3,!0,a,null,!1)});["capture","download"].forEach(function(a){E[a]=new L(a,4,!1,a,null,!1)});["cols","rows","size","span"].forEach(function(a){E[a]=new L(a,6,!1,a,null,!1)});["rowSpan","start"].forEach(function(a){E[a]=new L(a,5,!1,a.toLowerCase(),null,!1)});var gf=/[\-:]([a-z])/g,hf=function(a){return a[1].toUpperCase()};"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a){var b=
a.replace(gf,hf);E[b]=new L(b,1,!1,a,null,!1)});"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a){var b=a.replace(gf,hf);E[b]=new L(b,1,!1,a,"http://www.w3.org/1999/xlink",!1)});["xml:base","xml:lang","xml:space"].forEach(function(a){var b=a.replace(gf,hf);E[b]=new L(b,1,!1,a,"http://www.w3.org/XML/1998/namespace",!1)});["tabIndex","crossOrigin"].forEach(function(a){E[a]=new L(a,1,!1,a.toLowerCase(),null,!1)});E.xlinkHref=new L("xlinkHref",1,
!1,"xlink:href","http://www.w3.org/1999/xlink",!0);["src","href","action","formAction"].forEach(function(a){E[a]=new L(a,1,!1,a.toLowerCase(),null,!0)});var da=ea.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;da.hasOwnProperty("ReactCurrentDispatcher")||(da.ReactCurrentDispatcher={current:null});da.hasOwnProperty("ReactCurrentBatchConfig")||(da.ReactCurrentBatchConfig={suspense:null});var si=/^(.*)[\\\/]/,Q="function"===typeof Symbol&&Symbol.for,Pc=Q?Symbol.for("react.element"):60103,gb=Q?Symbol.for("react.portal"):
60106,Ma=Q?Symbol.for("react.fragment"):60107,Af=Q?Symbol.for("react.strict_mode"):60108,kc=Q?Symbol.for("react.profiler"):60114,Cf=Q?Symbol.for("react.provider"):60109,Bf=Q?Symbol.for("react.context"):60110,Hj=Q?Symbol.for("react.concurrent_mode"):60111,zd=Q?Symbol.for("react.forward_ref"):60112,lc=Q?Symbol.for("react.suspense"):60113,yd=Q?Symbol.for("react.suspense_list"):60120,Ad=Q?Symbol.for("react.memo"):60115,Ef=Q?Symbol.for("react.lazy"):60116,Df=Q?Symbol.for("react.block"):60121,zf="function"===
typeof Symbol&&Symbol.iterator,od,xh=function(a){return"undefined"!==typeof MSApp&&MSApp.execUnsafeLocalFunction?function(b,c,d,e){MSApp.execUnsafeLocalFunction(function(){return a(b,c,d,e)})}:a}(function(a,b){if("http://www.w3.org/2000/svg"!==a.namespaceURI||"innerHTML"in a)a.innerHTML=b;else{od=od||document.createElement("div");od.innerHTML="<svg>"+b.valueOf().toString()+"</svg>";for(b=od.firstChild;a.firstChild;)a.removeChild(a.firstChild);for(;b.firstChild;)a.appendChild(b.firstChild)}}),Wb=function(a,
b){if(b){var c=a.firstChild;if(c&&c===a.lastChild&&3===c.nodeType){c.nodeValue=b;return}}a.textContent=b},ib={animationend:nc("Animation","AnimationEnd"),animationiteration:nc("Animation","AnimationIteration"),animationstart:nc("Animation","AnimationStart"),transitionend:nc("Transition","TransitionEnd")},Id={},Of={};wa&&(Of=document.createElement("div").style,"AnimationEvent"in window||(delete ib.animationend.animation,delete ib.animationiteration.animation,delete ib.animationstart.animation),"TransitionEvent"in
window||delete ib.transitionend.transition);var $h=oc("animationend"),ai=oc("animationiteration"),bi=oc("animationstart"),ci=oc("transitionend"),Db="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Pf=new ("function"===typeof WeakMap?WeakMap:Map),Ab=null,wi=function(a){if(a){var b=a._dispatchListeners,c=a._dispatchInstances;
if(Array.isArray(b))for(var d=0;d<b.length&&!a.isPropagationStopped();d++)lf(a,b[d],c[d]);else b&&lf(a,b,c);a._dispatchListeners=null;a._dispatchInstances=null;a.isPersistent()||a.constructor.release(a)}},qc=[],Rd=!1,fa=[],xa=null,ya=null,za=null,Eb=new Map,Fb=new Map,Jb=[],Nd="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput close cancel copy cut paste click change contextmenu reset submit".split(" "),
yi="focus blur dragenter dragleave mouseover mouseout pointerover pointerout gotpointercapture lostpointercapture".split(" "),dg={},cg=new Map,Td=new Map,Rj=["abort","abort",$h,"animationEnd",ai,"animationIteration",bi,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata",
"loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",ci,"transitionEnd","waiting","waiting"];Sd("blur blur cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focus focus input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),
0);Sd("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1);Sd(Rj,2);(function(a,b){for(var c=0;c<a.length;c++)Td.set(a[c],b)})("change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),0);var Hi=Zh,Gi=Pd,tc=!0,Kb={animationIterationCount:!0,
borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,
strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},Sj=["Webkit","ms","Moz","O"];Object.keys(Kb).forEach(function(a){Sj.forEach(function(b){b=b+a.charAt(0).toUpperCase()+a.substring(1);Kb[b]=Kb[a]})});var Ii=M({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0}),ng="$",og="/$",$d="$?",Zd="$!",Ze=null,$e=null,We="function"===typeof setTimeout?setTimeout:void 0,vj="function"===
typeof clearTimeout?clearTimeout:void 0,jf=Math.random().toString(36).slice(2),Aa="__reactInternalInstance$"+jf,vc="__reactEventHandlers$"+jf,Lb="__reactContainere$"+jf,Ba=null,ce=null,wc=null;M(R.prototype,{preventDefault:function(){this.defaultPrevented=!0;var a=this.nativeEvent;a&&(a.preventDefault?a.preventDefault():"unknown"!==typeof a.returnValue&&(a.returnValue=!1),this.isDefaultPrevented=xc)},stopPropagation:function(){var a=this.nativeEvent;a&&(a.stopPropagation?a.stopPropagation():"unknown"!==
typeof a.cancelBubble&&(a.cancelBubble=!0),this.isPropagationStopped=xc)},persist:function(){this.isPersistent=xc},isPersistent:yc,destructor:function(){var a=this.constructor.Interface,b;for(b in a)this[b]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null;this.isPropagationStopped=this.isDefaultPrevented=yc;this._dispatchInstances=this._dispatchListeners=null}});R.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(a){return a.timeStamp||
Date.now()},defaultPrevented:null,isTrusted:null};R.extend=function(a){function b(){return c.apply(this,arguments)}var c=this,d=function(){};d.prototype=c.prototype;d=new d;M(d,b.prototype);b.prototype=d;b.prototype.constructor=b;b.Interface=M({},c.Interface,a);b.extend=c.extend;sg(b);return b};sg(R);var Tj=R.extend({data:null}),Uj=R.extend({data:null}),Ni=[9,13,27,32],de=wa&&"CompositionEvent"in window,cc=null;wa&&"documentMode"in document&&(cc=document.documentMode);var Vj=wa&&"TextEvent"in window&&
!cc,xg=wa&&(!de||cc&&8<cc&&11>=cc),wg=String.fromCharCode(32),ua={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},
dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},vg=!1,mb=!1,Wj={eventTypes:ua,extractEvents:function(a,b,c,d,e){var f;if(de)b:{switch(a){case "compositionstart":var g=ua.compositionStart;break b;case "compositionend":g=ua.compositionEnd;break b;case "compositionupdate":g=
ua.compositionUpdate;break b}g=void 0}else mb?tg(a,c)&&(g=ua.compositionEnd):"keydown"===a&&229===c.keyCode&&(g=ua.compositionStart);g?(xg&&"ko"!==c.locale&&(mb||g!==ua.compositionStart?g===ua.compositionEnd&&mb&&(f=rg()):(Ba=d,ce="value"in Ba?Ba.value:Ba.textContent,mb=!0)),e=Tj.getPooled(g,b,c,d),f?e.data=f:(f=ug(c),null!==f&&(e.data=f)),lb(e),f=e):f=null;(a=Vj?Oi(a,c):Pi(a,c))?(b=Uj.getPooled(ua.beforeInput,b,c,d),b.data=a,lb(b)):b=null;return null===f?b:null===b?f:[f,b]}},Qi={color:!0,date:!0,
datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0},Ag={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}},Mb=null,Nb=null,kf=!1;wa&&(kf=Tf("input")&&(!document.documentMode||9<document.documentMode));var Xj={eventTypes:Ag,_isInputEventSupported:kf,extractEvents:function(a,b,c,d,e){e=b?Pa(b):window;var f=
e.nodeName&&e.nodeName.toLowerCase();if("select"===f||"input"===f&&"file"===e.type)var g=Si;else if(yg(e))if(kf)g=Wi;else{g=Ui;var h=Ti}else(f=e.nodeName)&&"input"===f.toLowerCase()&&("checkbox"===e.type||"radio"===e.type)&&(g=Vi);if(g&&(g=g(a,b)))return zg(g,c,d);h&&h(a,e,b);"blur"===a&&(a=e._wrapperState)&&a.controlled&&"number"===e.type&&Ed(e,"number",e.value)}},dc=R.extend({view:null,detail:null}),Yi={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"},di=0,ei=0,fi=!1,gi=!1,ec=dc.extend({screenX:null,
screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:fe,button:null,buttons:null,relatedTarget:function(a){return a.relatedTarget||(a.fromElement===a.srcElement?a.toElement:a.fromElement)},movementX:function(a){if("movementX"in a)return a.movementX;var b=di;di=a.screenX;return fi?"mousemove"===a.type?a.screenX-b:0:(fi=!0,0)},movementY:function(a){if("movementY"in a)return a.movementY;var b=ei;ei=a.screenY;return gi?"mousemove"===
a.type?a.screenY-b:0:(gi=!0,0)}}),hi=ec.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),fc={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout",
"pointerover"]}},Yj={eventTypes:fc,extractEvents:function(a,b,c,d,e){var f="mouseover"===a||"pointerover"===a,g="mouseout"===a||"pointerout"===a;if(f&&0===(e&32)&&(c.relatedTarget||c.fromElement)||!g&&!f)return null;f=d.window===d?d:(f=d.ownerDocument)?f.defaultView||f.parentWindow:window;if(g){if(g=b,b=(b=c.relatedTarget||c.toElement)?Bb(b):null,null!==b){var h=Na(b);if(b!==h||5!==b.tag&&6!==b.tag)b=null}}else g=null;if(g===b)return null;if("mouseout"===a||"mouseover"===a){var m=ec;var n=fc.mouseLeave;
var l=fc.mouseEnter;var k="mouse"}else if("pointerout"===a||"pointerover"===a)m=hi,n=fc.pointerLeave,l=fc.pointerEnter,k="pointer";a=null==g?f:Pa(g);f=null==b?f:Pa(b);n=m.getPooled(n,g,c,d);n.type=k+"leave";n.target=a;n.relatedTarget=f;c=m.getPooled(l,b,c,d);c.type=k+"enter";c.target=f;c.relatedTarget=a;d=g;k=b;if(d&&k)a:{m=d;l=k;g=0;for(a=m;a;a=pa(a))g++;a=0;for(b=l;b;b=pa(b))a++;for(;0<g-a;)m=pa(m),g--;for(;0<a-g;)l=pa(l),a--;for(;g--;){if(m===l||m===l.alternate)break a;m=pa(m);l=pa(l)}m=null}else m=
null;l=m;for(m=[];d&&d!==l;){g=d.alternate;if(null!==g&&g===l)break;m.push(d);d=pa(d)}for(d=[];k&&k!==l;){g=k.alternate;if(null!==g&&g===l)break;d.push(k);k=pa(k)}for(k=0;k<m.length;k++)be(m[k],"bubbled",n);for(k=d.length;0<k--;)be(d[k],"captured",c);return 0===(e&64)?[n]:[n,c]}},Qa="function"===typeof Object.is?Object.is:Zi,$i=Object.prototype.hasOwnProperty,Zj=wa&&"documentMode"in document&&11>=document.documentMode,Eg={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},
dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},nb=null,he=null,Pb=null,ge=!1,ak={eventTypes:Eg,extractEvents:function(a,b,c,d,e,f){e=f||(d.window===d?d.document:9===d.nodeType?d:d.ownerDocument);if(!(f=!e)){a:{e=Jd(e);f=rd.onSelect;for(var g=0;g<f.length;g++)if(!e.has(f[g])){e=!1;break a}e=!0}f=!e}if(f)return null;e=b?Pa(b):window;switch(a){case "focus":if(yg(e)||"true"===e.contentEditable)nb=e,he=b,Pb=null;break;case "blur":Pb=he=nb=null;
break;case "mousedown":ge=!0;break;case "contextmenu":case "mouseup":case "dragend":return ge=!1,Dg(c,d);case "selectionchange":if(Zj)break;case "keydown":case "keyup":return Dg(c,d)}return null}},bk=R.extend({animationName:null,elapsedTime:null,pseudoElement:null}),ck=R.extend({clipboardData:function(a){return"clipboardData"in a?a.clipboardData:window.clipboardData}}),dk=dc.extend({relatedTarget:null}),ek={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",
Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},fk={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",
224:"Meta"},gk=dc.extend({key:function(a){if(a.key){var b=ek[a.key]||a.key;if("Unidentified"!==b)return b}return"keypress"===a.type?(a=Ac(a),13===a?"Enter":String.fromCharCode(a)):"keydown"===a.type||"keyup"===a.type?fk[a.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:fe,charCode:function(a){return"keypress"===a.type?Ac(a):0},keyCode:function(a){return"keydown"===a.type||"keyup"===a.type?a.keyCode:0},which:function(a){return"keypress"===
a.type?Ac(a):"keydown"===a.type||"keyup"===a.type?a.keyCode:0}}),hk=ec.extend({dataTransfer:null}),ik=dc.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:fe}),jk=R.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),kk=ec.extend({deltaX:function(a){return"deltaX"in a?a.deltaX:"wheelDeltaX"in a?-a.wheelDeltaX:0},deltaY:function(a){return"deltaY"in a?a.deltaY:"wheelDeltaY"in a?-a.wheelDeltaY:"wheelDelta"in a?
-a.wheelDelta:0},deltaZ:null,deltaMode:null}),lk={eventTypes:dg,extractEvents:function(a,b,c,d,e){e=cg.get(a);if(!e)return null;switch(a){case "keypress":if(0===Ac(c))return null;case "keydown":case "keyup":a=gk;break;case "blur":case "focus":a=dk;break;case "click":if(2===c.button)return null;case "auxclick":case "dblclick":case "mousedown":case "mousemove":case "mouseup":case "mouseout":case "mouseover":case "contextmenu":a=ec;break;case "drag":case "dragend":case "dragenter":case "dragexit":case "dragleave":case "dragover":case "dragstart":case "drop":a=
hk;break;case "touchcancel":case "touchend":case "touchmove":case "touchstart":a=ik;break;case $h:case ai:case bi:a=bk;break;case ci:a=jk;break;case "scroll":a=dc;break;case "wheel":a=kk;break;case "copy":case "cut":case "paste":a=ck;break;case "gotpointercapture":case "lostpointercapture":case "pointercancel":case "pointerdown":case "pointermove":case "pointerout":case "pointerover":case "pointerup":a=hi;break;default:a=R}b=a.getPooled(e,b,c,d);lb(b);return b}};(function(a){if(ic)throw Error(k(101));
ic=Array.prototype.slice.call(a);nf()})("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" "));(function(a,b,c){td=a;rf=b;mf=c})(ae,Hb,Pa);pf({SimpleEventPlugin:lk,EnterLeaveEventPlugin:Yj,ChangeEventPlugin:Xj,SelectEventPlugin:ak,BeforeInputEventPlugin:Wj});var ie=[],ob=-1,Ca={},B={current:Ca},G={current:!1},Ra=Ca,bj=Pd,je=$f,Rg=Lj,aj=Nj,Dc=Oj,Ig=Zh,Jg=ag,Kg=Pj,Lg=Qj,Qg={},yj=Mj,Cj=void 0!==Yh?Yh:function(){},qa=null,
Ec=null,ke=!1,ii=ff(),Y=1E4>ii?ff:function(){return ff()-ii},Ic={current:null},Hc=null,qb=null,Gc=null,Tg=0,Jc=2,Ga=!1,Vb=da.ReactCurrentBatchConfig,$g=(new ea.Component).refs,Mc={isMounted:function(a){return(a=a._reactInternalFiber)?Na(a)===a:!1},enqueueSetState:function(a,b,c){a=a._reactInternalFiber;var d=ka(),e=Vb.suspense;d=Va(d,a,e);e=Ea(d,e);e.payload=b;void 0!==c&&null!==c&&(e.callback=c);Fa(a,e);Ja(a,d)},enqueueReplaceState:function(a,b,c){a=a._reactInternalFiber;var d=ka(),e=Vb.suspense;
d=Va(d,a,e);e=Ea(d,e);e.tag=1;e.payload=b;void 0!==c&&null!==c&&(e.callback=c);Fa(a,e);Ja(a,d)},enqueueForceUpdate:function(a,b){a=a._reactInternalFiber;var c=ka(),d=Vb.suspense;c=Va(c,a,d);d=Ea(c,d);d.tag=Jc;void 0!==b&&null!==b&&(d.callback=b);Fa(a,d);Ja(a,c)}},Qc=Array.isArray,wb=ah(!0),Fe=ah(!1),Sb={},ja={current:Sb},Ub={current:Sb},Tb={current:Sb},D={current:0},Sc=da.ReactCurrentDispatcher,X=da.ReactCurrentBatchConfig,Ia=0,z=null,K=null,J=null,Uc=!1,Tc={readContext:W,useCallback:S,useContext:S,
useEffect:S,useImperativeHandle:S,useLayoutEffect:S,useMemo:S,useReducer:S,useRef:S,useState:S,useDebugValue:S,useResponder:S,useDeferredValue:S,useTransition:S},dj={readContext:W,useCallback:ih,useContext:W,useEffect:eh,useImperativeHandle:function(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return ze(4,2,gh.bind(null,b,a),c)},useLayoutEffect:function(a,b){return ze(4,2,a,b)},useMemo:function(a,b){var c=ub();b=void 0===b?null:b;a=a();c.memoizedState=[a,b];return a},useReducer:function(a,b,c){var d=
ub();b=void 0!==c?c(b):b;d.memoizedState=d.baseState=b;a=d.queue={pending:null,dispatch:null,lastRenderedReducer:a,lastRenderedState:b};a=a.dispatch=ch.bind(null,z,a);return[d.memoizedState,a]},useRef:function(a){var b=ub();a={current:a};return b.memoizedState=a},useState:xe,useDebugValue:Be,useResponder:ue,useDeferredValue:function(a,b){var c=xe(a),d=c[0],e=c[1];eh(function(){var c=X.suspense;X.suspense=void 0===b?null:b;try{e(a)}finally{X.suspense=c}},[a,b]);return d},useTransition:function(a){var b=
xe(!1),c=b[0];b=b[1];return[ih(Ce.bind(null,b,a),[b,a]),c]}},ej={readContext:W,useCallback:Yc,useContext:W,useEffect:Xc,useImperativeHandle:hh,useLayoutEffect:fh,useMemo:jh,useReducer:Vc,useRef:dh,useState:function(a){return Vc(Ua)},useDebugValue:Be,useResponder:ue,useDeferredValue:function(a,b){var c=Vc(Ua),d=c[0],e=c[1];Xc(function(){var c=X.suspense;X.suspense=void 0===b?null:b;try{e(a)}finally{X.suspense=c}},[a,b]);return d},useTransition:function(a){var b=Vc(Ua),c=b[0];b=b[1];return[Yc(Ce.bind(null,
b,a),[b,a]),c]}},fj={readContext:W,useCallback:Yc,useContext:W,useEffect:Xc,useImperativeHandle:hh,useLayoutEffect:fh,useMemo:jh,useReducer:Wc,useRef:dh,useState:function(a){return Wc(Ua)},useDebugValue:Be,useResponder:ue,useDeferredValue:function(a,b){var c=Wc(Ua),d=c[0],e=c[1];Xc(function(){var c=X.suspense;X.suspense=void 0===b?null:b;try{e(a)}finally{X.suspense=c}},[a,b]);return d},useTransition:function(a){var b=Wc(Ua),c=b[0];b=b[1];return[Yc(Ce.bind(null,b,a),[b,a]),c]}},ra=null,Ka=null,Wa=
!1,gj=da.ReactCurrentOwner,ia=!1,Je={dehydrated:null,retryTime:0};var jj=function(a,b,c,d){for(c=b.child;null!==c;){if(5===c.tag||6===c.tag)a.appendChild(c.stateNode);else if(4!==c.tag&&null!==c.child){c.child.return=c;c=c.child;continue}if(c===b)break;for(;null===c.sibling;){if(null===c.return||c.return===b)return;c=c.return}c.sibling.return=c.return;c=c.sibling}};var wh=function(a){};var ij=function(a,b,c,d,e){var f=a.memoizedProps;if(f!==d){var g=b.stateNode;Ta(ja.current);a=null;switch(c){case "input":f=
Cd(g,f);d=Cd(g,d);a=[];break;case "option":f=Fd(g,f);d=Fd(g,d);a=[];break;case "select":f=M({},f,{value:void 0});d=M({},d,{value:void 0});a=[];break;case "textarea":f=Gd(g,f);d=Gd(g,d);a=[];break;default:"function"!==typeof f.onClick&&"function"===typeof d.onClick&&(g.onclick=uc)}Ud(c,d);var h,m;c=null;for(h in f)if(!d.hasOwnProperty(h)&&f.hasOwnProperty(h)&&null!=f[h])if("style"===h)for(m in g=f[h],g)g.hasOwnProperty(m)&&(c||(c={}),c[m]="");else"dangerouslySetInnerHTML"!==h&&"children"!==h&&"suppressContentEditableWarning"!==
h&&"suppressHydrationWarning"!==h&&"autoFocus"!==h&&(db.hasOwnProperty(h)?a||(a=[]):(a=a||[]).push(h,null));for(h in d){var k=d[h];g=null!=f?f[h]:void 0;if(d.hasOwnProperty(h)&&k!==g&&(null!=k||null!=g))if("style"===h)if(g){for(m in g)!g.hasOwnProperty(m)||k&&k.hasOwnProperty(m)||(c||(c={}),c[m]="");for(m in k)k.hasOwnProperty(m)&&g[m]!==k[m]&&(c||(c={}),c[m]=k[m])}else c||(a||(a=[]),a.push(h,c)),c=k;else"dangerouslySetInnerHTML"===h?(k=k?k.__html:void 0,g=g?g.__html:void 0,null!=k&&g!==k&&(a=a||
[]).push(h,k)):"children"===h?g===k||"string"!==typeof k&&"number"!==typeof k||(a=a||[]).push(h,""+k):"suppressContentEditableWarning"!==h&&"suppressHydrationWarning"!==h&&(db.hasOwnProperty(h)?(null!=k&&oa(e,h),a||g===k||(a=[])):(a=a||[]).push(h,k))}c&&(a=a||[]).push("style",c);e=a;if(b.updateQueue=e)b.effectTag|=4}};var kj=function(a,b,c,d){c!==d&&(b.effectTag|=4)};var pj="function"===typeof WeakSet?WeakSet:Set,wj="function"===typeof WeakMap?WeakMap:Map,sj=Math.ceil,gd=da.ReactCurrentDispatcher,
Uh=da.ReactCurrentOwner,H=0,Ye=8,ca=16,ma=32,Xa=0,hd=1,Oh=2,ad=3,bd=4,Xe=5,p=H,U=null,t=null,P=0,F=Xa,id=null,ta=1073741823,Yb=1073741823,kd=null,Xb=0,jd=!1,Re=0,Ph=500,l=null,cd=!1,Se=null,La=null,ld=!1,Zb=null,$b=90,bb=null,ac=0,af=null,dd=0,Ja=function(a,b){if(50<ac)throw ac=0,af=null,Error(k(185));a=ed(a,b);if(null!==a){var c=Cc();1073741823===b?(p&Ye)!==H&&(p&(ca|ma))===H?Te(a):(V(a),p===H&&ha()):V(a);(p&4)===H||98!==c&&99!==c||(null===bb?bb=new Map([[a,b]]):(c=bb.get(a),(void 0===c||c>b)&&bb.set(a,
b)))}};var zj=function(a,b,c){var d=b.expirationTime;if(null!==a){var e=b.pendingProps;if(a.memoizedProps!==e||G.current)ia=!0;else{if(d<c){ia=!1;switch(b.tag){case 3:sh(b);Ee();break;case 5:bh(b);if(b.mode&4&&1!==c&&e.hidden)return b.expirationTime=b.childExpirationTime=1,null;break;case 1:N(b.type)&&Bc(b);break;case 4:se(b,b.stateNode.containerInfo);break;case 10:d=b.memoizedProps.value;e=b.type._context;y(Ic,e._currentValue);e._currentValue=d;break;case 13:if(null!==b.memoizedState){d=b.child.childExpirationTime;
if(0!==d&&d>=c)return th(a,b,c);y(D,D.current&1);b=sa(a,b,c);return null!==b?b.sibling:null}y(D,D.current&1);break;case 19:d=b.childExpirationTime>=c;if(0!==(a.effectTag&64)){if(d)return vh(a,b,c);b.effectTag|=64}e=b.memoizedState;null!==e&&(e.rendering=null,e.tail=null);y(D,D.current);if(!d)return null}return sa(a,b,c)}ia=!1}}else ia=!1;b.expirationTime=0;switch(b.tag){case 2:d=b.type;null!==a&&(a.alternate=null,b.alternate=null,b.effectTag|=2);a=b.pendingProps;e=pb(b,B.current);rb(b,c);e=we(null,
b,d,a,e,c);b.effectTag|=1;if("object"===typeof e&&null!==e&&"function"===typeof e.render&&void 0===e.$$typeof){b.tag=1;b.memoizedState=null;b.updateQueue=null;if(N(d)){var f=!0;Bc(b)}else f=!1;b.memoizedState=null!==e.state&&void 0!==e.state?e.state:null;ne(b);var g=d.getDerivedStateFromProps;"function"===typeof g&&Lc(b,d,g,a);e.updater=Mc;b.stateNode=e;e._reactInternalFiber=b;pe(b,d,a,c);b=Ie(null,b,d,!0,f,c)}else b.tag=0,T(null,b,e,c),b=b.child;return b;case 16:a:{e=b.elementType;null!==a&&(a.alternate=
null,b.alternate=null,b.effectTag|=2);a=b.pendingProps;ri(e);if(1!==e._status)throw e._result;e=e._result;b.type=e;f=b.tag=Gj(e);a=aa(e,a);switch(f){case 0:b=He(null,b,e,a,c);break a;case 1:b=rh(null,b,e,a,c);break a;case 11:b=nh(null,b,e,a,c);break a;case 14:b=oh(null,b,e,aa(e.type,a),d,c);break a}throw Error(k(306,e,""));}return b;case 0:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:aa(d,e),He(a,b,d,e,c);case 1:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:aa(d,e),rh(a,b,d,e,c);
case 3:sh(b);d=b.updateQueue;if(null===a||null===d)throw Error(k(282));d=b.pendingProps;e=b.memoizedState;e=null!==e?e.element:null;oe(a,b);Qb(b,d,null,c);d=b.memoizedState.element;if(d===e)Ee(),b=sa(a,b,c);else{if(e=b.stateNode.hydrate)Ka=kb(b.stateNode.containerInfo.firstChild),ra=b,e=Wa=!0;if(e)for(c=Fe(b,null,d,c),b.child=c;c;)c.effectTag=c.effectTag&-3|1024,c=c.sibling;else T(a,b,d,c),Ee();b=b.child}return b;case 5:return bh(b),null===a&&De(b),d=b.type,e=b.pendingProps,f=null!==a?a.memoizedProps:
null,g=e.children,Yd(d,e)?g=null:null!==f&&Yd(d,f)&&(b.effectTag|=16),qh(a,b),b.mode&4&&1!==c&&e.hidden?(b.expirationTime=b.childExpirationTime=1,b=null):(T(a,b,g,c),b=b.child),b;case 6:return null===a&&De(b),null;case 13:return th(a,b,c);case 4:return se(b,b.stateNode.containerInfo),d=b.pendingProps,null===a?b.child=wb(b,null,d,c):T(a,b,d,c),b.child;case 11:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:aa(d,e),nh(a,b,d,e,c);case 7:return T(a,b,b.pendingProps,c),b.child;case 8:return T(a,
b,b.pendingProps.children,c),b.child;case 12:return T(a,b,b.pendingProps.children,c),b.child;case 10:a:{d=b.type._context;e=b.pendingProps;g=b.memoizedProps;f=e.value;var h=b.type._context;y(Ic,h._currentValue);h._currentValue=f;if(null!==g)if(h=g.value,f=Qa(h,f)?0:("function"===typeof d._calculateChangedBits?d._calculateChangedBits(h,f):1073741823)|0,0===f){if(g.children===e.children&&!G.current){b=sa(a,b,c);break a}}else for(h=b.child,null!==h&&(h.return=b);null!==h;){var m=h.dependencies;if(null!==
m){g=h.child;for(var l=m.firstContext;null!==l;){if(l.context===d&&0!==(l.observedBits&f)){1===h.tag&&(l=Ea(c,null),l.tag=Jc,Fa(h,l));h.expirationTime<c&&(h.expirationTime=c);l=h.alternate;null!==l&&l.expirationTime<c&&(l.expirationTime=c);Sg(h.return,c);m.expirationTime<c&&(m.expirationTime=c);break}l=l.next}}else g=10===h.tag?h.type===b.type?null:h.child:h.child;if(null!==g)g.return=h;else for(g=h;null!==g;){if(g===b){g=null;break}h=g.sibling;if(null!==h){h.return=g.return;g=h;break}g=g.return}h=
g}T(a,b,e.children,c);b=b.child}return b;case 9:return e=b.type,f=b.pendingProps,d=f.children,rb(b,c),e=W(e,f.unstable_observedBits),d=d(e),b.effectTag|=1,T(a,b,d,c),b.child;case 14:return e=b.type,f=aa(e,b.pendingProps),f=aa(e.type,f),oh(a,b,e,f,d,c);case 15:return ph(a,b,b.type,b.pendingProps,d,c);case 17:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:aa(d,e),null!==a&&(a.alternate=null,b.alternate=null,b.effectTag|=2),b.tag=1,N(d)?(a=!0,Bc(b)):a=!1,rb(b,c),Yg(b,d,e),pe(b,d,e,c),Ie(null,
b,d,!0,a,c);case 19:return vh(a,b,c)}throw Error(k(156,b.tag));};var bf=null,Ne=null,la=function(a,b,c,d){return new Fj(a,b,c,d)};ef.prototype.render=function(a){md(a,this._internalRoot,null,null)};ef.prototype.unmount=function(){var a=this._internalRoot,b=a.containerInfo;md(null,a,null,function(){b[Lb]=null})};var Di=function(a){if(13===a.tag){var b=Fc(ka(),150,100);Ja(a,b);df(a,b)}};var Yf=function(a){13===a.tag&&(Ja(a,3),df(a,3))};var Bi=function(a){if(13===a.tag){var b=ka();b=Va(b,a,null);Ja(a,
b);df(a,b)}};sd=function(a,b,c){switch(b){case "input":Dd(a,c);b=c.name;if("radio"===c.type&&null!=b){for(c=a;c.parentNode;)c=c.parentNode;c=c.querySelectorAll("input[name="+JSON.stringify(""+b)+'][type="radio"]');for(b=0;b<c.length;b++){var d=c[b];if(d!==a&&d.form===a.form){var e=ae(d);if(!e)throw Error(k(90));Gf(d);Dd(d,e)}}}break;case "textarea":Lf(a,c);break;case "select":b=c.value,null!=b&&hb(a,!!c.multiple,b,!1)}};(function(a,b,c,d){ee=a;eg=b;vd=c;vf=d})(Qh,function(a,b,c,d,e){var f=p;p|=4;
try{return Da(98,a.bind(null,b,c,d,e))}finally{p=f,p===H&&ha()}},function(){(p&(1|ca|ma))===H&&(uj(),xb())},function(a,b){var c=p;p|=2;try{return a(b)}finally{p=c,p===H&&ha()}});var mk={Events:[Hb,Pa,ae,pf,qd,lb,function(a){Kd(a,Ki)},sf,tf,sc,pc,xb,{current:!1}]};(function(a){var b=a.findFiberByHostInstance;return Ej(M({},a,{overrideHookState:null,overrideProps:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:da.ReactCurrentDispatcher,findHostInstanceByFiber:function(a){a=Sf(a);
return null===a?null:a.stateNode},findFiberByHostInstance:function(a){return b?b(a):null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null}))})({findFiberByHostInstance:Bb,bundleType:0,version:"16.13.1",rendererPackageName:"react-dom"});I.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=mk;I.createPortal=Xh;I.findDOMNode=function(a){if(null==a)return null;if(1===a.nodeType)return a;var b=a._reactInternalFiber;if(void 0===
b){if("function"===typeof a.render)throw Error(k(188));throw Error(k(268,Object.keys(a)));}a=Sf(b);a=null===a?null:a.stateNode;return a};I.flushSync=function(a,b){if((p&(ca|ma))!==H)throw Error(k(187));var c=p;p|=1;try{return Da(99,a.bind(null,b))}finally{p=c,ha()}};I.hydrate=function(a,b,c){if(!bc(b))throw Error(k(200));return nd(null,a,b,!0,c)};I.render=function(a,b,c){if(!bc(b))throw Error(k(200));return nd(null,a,b,!1,c)};I.unmountComponentAtNode=function(a){if(!bc(a))throw Error(k(40));return a._reactRootContainer?
(Rh(function(){nd(null,null,a,!1,function(){a._reactRootContainer=null;a[Lb]=null})}),!0):!1};I.unstable_batchedUpdates=Qh;I.unstable_createPortal=function(a,b){return Xh(a,b,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)};I.unstable_renderSubtreeIntoContainer=function(a,b,c,d){if(!bc(c))throw Error(k(200));if(null==a||void 0===a._reactInternalFiber)throw Error(k(38));return nd(a,b,c,!1,d)};I.version="16.13.1"});
</script>
    <script>const e = React.createElement;

function pathToString(path) {
  if (path[0] === '/') {
    return '/' + path.slice(1).join('/');
  } else {
    return path.join('/');
  }
}

function findCommonPath(files) {
  if (!files || !files.length) {
    return [];
  }

  function isPrefix(arr, prefix) {
    if (arr.length < prefix.length) {
      return false;
    }
    for (let i = prefix.length - 1; i >= 0; --i) {
      if (arr[i] !== prefix[i]) {
        return false;
      }
    }
    return true;
  }

  let commonPath = files[0].path.slice(0, -1);
  while (commonPath.length) {
    if (files.every(file => isPrefix(file.path, commonPath))) {
      break;
    }
    commonPath.pop();
  }
  return commonPath;
}

function findFolders(files) {
  if (!files || !files.length) {
    return [];
  }

  let folders = files.filter(file => file.path.length > 1).map(file => file.path[0]);
  folders = [...new Set(folders)]; // unique
  folders.sort();

  folders = folders.map(folder => {
    let filesInFolder = files
      .filter(file => file.path[0] === folder)
      .map(file => ({
        ...file,
        path: file.path.slice(1),
        parent: [...file.parent, file.path[0]],
      }));

    const children = findFolders(filesInFolder); // recursion

    return {
      is_folder: true,
      path: [folder],
      parent: files[0].parent,
      children,
      covered: children.reduce((sum, file) => sum + file.covered, 0),
      coverable: children.reduce((sum, file) => sum + file.coverable, 0),
      prevRun: {
        covered: children.reduce((sum, file) => sum + file.prevRun.covered, 0),
        coverable: children.reduce((sum, file) => sum + file.prevRun.coverable, 0),
      }
    };
  });

  return [
    ...folders,
    ...files.filter(file => file.path.length === 1),
  ];
}

class App extends React.Component {
  constructor(...args) {
    super(...args);

    this.state = {
      current: [],
    };
  }

  componentDidMount() {
    this.updateStateFromLocation();
    window.addEventListener("hashchange", () => this.updateStateFromLocation(), false);
  }

  updateStateFromLocation() {
    if (window.location.hash.length > 1) {
      const current = window.location.hash.substr(1).split('/');
      this.setState({current});
    } else {
      this.setState({current: []});
    }
  }

  getCurrentPath() {
    let file = this.props.root;
    let path = [file];
    for (let p of this.state.current) {
      file = file.children.find(file => file.path[0] === p);
      if (!file) {
        return path;
      }
      path.push(file);
    }
    return path;
  }

  render() {
    const path = this.getCurrentPath();
    const file = path[path.length - 1];

    let w = null;
    if (file.is_folder) {
      w = e(FilesList, {
        folder: file,
        onSelectFile: this.selectFile.bind(this),
        onBack: path.length > 1 ? this.back.bind(this) : null,
      });
    } else {
      w = e(DisplayFile, {
        file,
        onBack: this.back.bind(this),
      });
    }

    return e('div', {className: 'app'}, w);
  }

  selectFile(file) {
    this.setState(({current}) => {
      return {current: [...current, file.path[0]]};
    }, () => this.updateHash());
  }

  back(file) {
    this.setState(({current}) => {
      return {current: current.slice(0, current.length - 1)};
    }, () => this.updateHash());
  }

  updateHash() {
    if (!this.state.current || !this.state.current.length) {
      window.location = '#';
    } else {
      window.location = '#' + this.state.current.join('/');
    }
  }
}

function FilesList({folder, onSelectFile, onBack}) {
  let files = folder.children;
  return e('div', {className: 'display-folder'},
    e(FileHeader, {file: folder, onBack}),
    e('table', {className: 'files-list'},
      e('thead', {className: 'files-list__head'},
        e('tr', null,
          e('th', null, "Path"),
          e('th', null, "Coverage")
        )
      ),
      e('tbody', {className: 'files-list__body'},
        files.map(file => e(File, {file, onClick: onSelectFile}))
      )
    )
  );
}

function File({file, onClick}) {
  const coverage = file.coverable ? file.covered / file.coverable * 100 : -1;
  const coverageDelta = file.prevRun &&
    (file.covered / file.coverable * 100 - file.prevRun.covered / file.prevRun.coverable * 100);

  return e('tr', {
      className: 'files-list__file'
        + (coverage >= 0 && coverage < 50 ? ' files-list__file_low': '')
        + (coverage >= 50 && coverage < 80 ? ' files-list__file_medium': '')
        + (coverage >= 80 ? ' files-list__file_high': '')
        + (file.is_folder ? ' files-list__file_folder': ''),
      onClick: () => onClick(file),
    },
    e('td', null, e('a', null, pathToString(file.path))),
    e('td', null,
      file.covered + ' / ' + file.coverable +
      (coverage >= 0 ? ' (' + coverage.toFixed(2) + '%)' : ''),
      e('span', {title: 'Change from the previous run'},
        (coverageDelta ? ` (${coverageDelta > 0 ? '+' : ''}${coverageDelta.toFixed(2)}%)` : ''))
    )
  );
}

function DisplayFile({file, onBack}) {
  return e('div', {className: 'display-file'},
    e(FileHeader, {file, onBack}),
    e(FileContent, {file})
  );
}

function FileHeader({file, onBack}) {
  const coverage = file.covered / file.coverable * 100;
  const coverageDelta = file.prevRun && (coverage - file.prevRun.covered / file.prevRun.coverable * 100);

  return e('div', {className: 'file-header'},
    onBack ? e('a', {className: 'file-header__back', onClick: onBack}, 'Back') : null,
    e('div', {className: 'file-header__name'}, pathToString([...file.parent, ...file.path])),
    e('div', {className: 'file-header__stat'},
      'Covered: ' + file.covered + ' of ' + file.coverable +
      (file.coverable ? ' (' + coverage.toFixed(2) + '%)' : ''),
      e('span', {title: 'Change from the previous run'},
        (coverageDelta ? ` (${coverageDelta > 0 ? '+' : ''}${coverageDelta.toFixed(2)}%)` : ''))
    )
  );
}

function FileContent({file}) {
  return e('pre', {className: 'file-content'},
    file.content.split(/\r?\n/).map((line, index) => {
      const trace = file.traces.find(trace => trace.line === index + 1);
      const covered = trace && trace.stats.Line;
      const uncovered = trace && !trace.stats.Line;
      return e('code', {
          className: 'code-line'
            + (covered ? ' code-line_covered' : '')
            + (uncovered ? ' code-line_uncovered' : ''),
          title: trace ? JSON.stringify(trace.stats, null, 2) : null,
        }, line);
    })
  );
}

(function(){
  const commonPath = findCommonPath(data.files);
  const prevFilesMap = new Map();

  previousData && previousData.files.forEach((file) => {
    const path = file.path.slice(commonPath.length).join('/');
    prevFilesMap.set(path, file);
  });

  const files = data.files.map((file) => {
    const path = file.path.slice(commonPath.length);
    const { covered = 0, coverable = 0 } = prevFilesMap.get(path.join('/')) || {};
    return {
      ...file,
      path,
      parent: commonPath,
      prevRun: { covered, coverable },
    };
  });

  const children = findFolders(files);

  const root = {
    is_folder: true,
    children,
    path: commonPath,
    parent: [],
    covered: children.reduce((sum, file) => sum + file.covered, 0),
    coverable: children.reduce((sum, file) => sum + file.coverable, 0),
    prevRun: {
      covered: children.reduce((sum, file) => sum + file.prevRun.covered, 0),
      coverable: children.reduce((sum, file) => sum + file.prevRun.coverable, 0),
    }
  };

  ReactDOM.render(e(App, {root, prevFilesMap}), document.getElementById('root'));
}());
</script>
</body>
</html>


================================================
File: .pre-commit-config.yaml
================================================
repos:
  - repo: local
    hooks:
      - id: rustfmt-check
        name: rustfmt (check)
        entry: cargo fmt --all -- --check
        language: system
        types: [rust]
        pass_filenames: false
        verbose: true
      - id: clippy-check
        name: clippy (check)
        entry: cargo clippy --all-targets -- -D warnings
        language: system
        types: [rust]
        pass_filenames: false
        verbose: true
  - repo: https://github.com/gitleaks/gitleaks
    rev: v8.16.3
    hooks:
      - id: gitleaks
  - repo: https://github.com/pylint-dev/pylint
    rev: v2.17.2
    hooks:
      - id: pylint



================================================
File: docs/PRD.md
================================================
# codesprout - Product Requirements Document (Prototype)

## 1. Introduction

- **Project Idea:** `codesprout` is a project to develop a command-line interface (CLI) utility named `sprout`. The `sprout` tool's primary function is to parse a single, consolidated text file (referred to as a "bundle file," formatted like the provided `digest.txt` example) and "sprout" its contents into an organized directory structure with corresponding files.
- **Problem/Need:** Developers, educators, and technical writers often need to share or archive sets of code files or project snippets. Traditional methods like zip archives are not always convenient, especially for embedding into documents, wikis, or systems that primarily accept plain text. A single-file representation simplifies copy-pasting, sharing in restrictive environments, and creating self-contained examples.
- **Prototype Goal:** To build a functional `sprout` CLI in Rust that can reliably parse a `digest.txt`-style bundle file, validate its format, and recreate the described directory structure and files in a specified output location. The prototype must include clear error reporting for format issues and abort on any potential file collisions in the output directory.

## 2. Core Features / User Stories

- **Feature 1: Sprout from Bundle**
    - Description: The `sprout` CLI will read a specified bundle file (formatted like `digest.txt`), parse its content to identify individual files and their target paths, and then create these files and any necessary parent directories in the designated output location.
    - User Action(s): The user executes the `sprout` command, providing the path to the bundle file and an optional output directory.
    - Outcome(s):
        - If the bundle file is valid and no file collisions are detected in the output path, the specified directory structure and files are created as per the bundle file's content. A success message is displayed.
        - If the bundle file contains format errors, all errors are reported to the user, and no file system modifications are made.
        - If creating any file would overwrite an existing file or directory in the output path, the operation is aborted before any files are written, and an error message is displayed.
    - Command: `sprout`
    - Key Inputs:
        - Bundle File Path (required): Provided as a positional argument or via `-i <path>` / `--input <path>`.
        - Output Directory Path (optional): Provided as a positional argument or via `-o <path>` / `--output <path>`. Defaults to the current working directory.
    - Expected Output:
        - Console messages indicating files being processed (optional, perhaps under a verbose flag in the future, but basic status for prototype).
        - Clear success message upon completion.
        - Detailed error messages if bundle file validation fails or if file collisions are detected.
        - The recreated files and directories in the specified output location.

## 3. Technical Specifications

- **Primary Language(s):** Rust (latest stable version available at the time of development, e.g., 1.7X.X).
- **Key Frameworks/Libraries:**
    - `clap`: For parsing CLI arguments.
    - `anyhow`: (Recommended) For application-level error handling and reporting.
- **Database (if any):** None for this prototype.
- **Key APIs/Integrations (if any):** None.
- **Deployment Target (if applicable for prototype):** Local native executable for common desktop platforms (Linux, macOS, Windows).
- **High-Level Architectural Approach:**
    - A CLI application built in Rust.
    - Core logic will be separated into modules:
        - One module for parsing the `digest.txt`-style bundle file.
        - One module for handling file system operations (directory creation, file writing, collision detection).
        - Error handling will be centralized, potentially using custom error types or `anyhow` for context.
    - The process flow will be: 1. Parse arguments. 2. Read and fully validate the input bundle file. 3. Check for output collisions. 4. If all checks pass, create directories and files.
- **Critical Technical Decisions/Constraints:**
    - The input bundle file format is strictly the `digest.txt` style (multi-file concatenation with `================================================\nFile: path/to/file.ext\n================================================\n...content...` delimiters).
    - The `sprout` tool will perform a full analysis of the input bundle file for any format errors before attempting any file system modifications. If errors are found, they will be reported, and the tool will exit.
    - The tool will check for potential file/directory collisions in the target output directory before writing any files. If any collision is detected, the operation will be aborted with an error message, and no files will be written.

## 4. Project Structure (Optional)

A standard Rust binary (application) project structure will be used, generated initially by `cargo new sprout --bin`.

```
/codesprout_project_root
  â”œâ”€â”€ .git/
  â”œâ”€â”€ .github/              # For GitHub Actions, issue templates, etc.
  â”œâ”€â”€ docs/
  â”‚   â”œâ”€â”€ PRD.md            # This document
  â”‚   â””â”€â”€ TASKS.md          # Task list
  â”œâ”€â”€ src/
  â”‚   â”œâ”€â”€ main.rs           # CLI entry point, argument parsing (clap), main logic flow
  â”‚   â”œâ”€â”€ parser.rs         # Module for parsing the bundle file
  â”‚   â”œâ”€â”€ bundler.rs        # Module for file/directory creation and output logic (renamed from sprouter for clarity)
  â”‚   â””â”€â”€ error.rs          # (Optional) Module for custom error types if not solely relying on anyhow
  â”œâ”€â”€ Cargo.toml            # Rust project manifest, dependencies
  â”œâ”€â”€ Cargo.lock            # Generated lockfile
  â”œâ”€â”€ README.md             # Project README
  â””â”€â”€ target/               # Build artifacts (ignored by git)
```

- `src/`: Contains all Rust source code.
    - `main.rs`: Handles CLI argument parsing using `clap` and orchestrates the overall process.
    - `parser.rs`: Responsible for reading and validating the `digest.txt`-style bundle file format.
    - `bundler.rs`: Handles the creation of directories and files based on the parsed bundle, including collision checks.
- `docs/`: Contains project documentation.
- `Cargo.toml`: Defines project metadata, dependencies (like `clap`, `anyhow`), and profiles (e.g., for release optimization).

## 5. File Descriptions (If applicable)

- **Input Bundle File (e.g., `my_bundle.txt`, `project.digest`)**:
    - Purpose: A single text file containing the content of multiple source files or text-based project structures, along with their intended relative paths.
    - Format: Plain text. Each embedded file is demarcated by a header `================================================\nFile: path/to/file.ext\n================================================\n` followed by its content. The `path/to/file.ext` specifies the relative path where the file should be created in the output directory.
    - Key Contents: A sequence of file path specifications and their corresponding multi-line text content.

## 6. Future Considerations / Out of Scope (for this prototype)

- **Out of Scope for Prototype:**
    - **Reverse Operation ("Bundling"):** Creating a bundle file from an existing directory structure.
    - **Advanced Overwrite Options:** No `--force` flag or interactive prompts to overwrite files. The prototype will only abort on collision.
    - **Configuration File:** No external configuration for `sprout` (e.g., to customize delimiters or behavior).
    - **Ignore Patterns:** No functionality to ignore specific files or patterns during a (future) bundling operation.
    - **Complex Format Validation Beyond Basic Structure:** While basic structural validation (presence of delimiters, parsable paths) is in scope, deep semantic analysis of the content within files is not.
    - **Watching files or live updates.**
- **Potential Future Enhancements (Post-Prototype):**
    - Implement the reverse "bundling" operation.
    - Add file overwrite protection options (`--force`, skip, prompt).
    - Introduce a configuration file for `sprout`.
    - Support for ignore patterns (like `.gitignore`) during bundling.
    - Stricter validation options for bundle files.
    - Support for different bundle formats or custom delimiters via configuration.

## 7. Project-Specific Coding Rules (Optional)

- **Language Version:** Rust (latest stable version at the time of development).
- **Formatting:** `rustfmt` is mandatory. Code should be formatted using `cargo fmt` before committing.
- **Linting:** `clippy` is mandatory. Code should pass `cargo clippy --all-targets -- -D warnings` (fail on warnings).
- **Error Handling:**
    - Use Rust's standard `Result<T, E>` for all functions that can produce an error.
    - Utilize the `?` operator for concise error propagation.
    - Employ the `anyhow` crate for creating and managing application-level errors, providing context, and simplifying error returns from `main()`.
- **Dependencies (`Cargo.toml`):**
    - `clap` will be used for CLI argument parsing.
    - `anyhow` will be used for error handling.
    - Other external crate dependencies should be minimized and require justification for inclusion in the prototype.
- **Testing:**
    - Unit tests for the `parser.rs` module to ensure correct parsing of various valid and invalid bundle file scenarios.
    - Unit tests for the `bundler.rs` module to ensure correct file/directory creation, path handling, and collision detection logic.
    - Integration-style tests (CLI tests) to verify the overall behavior of `sprout` with sample bundle files and output directory states.
- **Naming Conventions:** Adhere to standard Rust naming conventions:
    - `snake_case` for functions, methods, variables, and modules.
    - `PascalCase` (or `CamelCase`) for types, structs, enums, and traits.
    - `UPPER_SNAKE_CASE` for constants.
- **Binary Size:** Strive for a reasonably small binary size for the release executable by configuring the release profile in `Cargo.toml` (e.g., `opt-level = "z"`, `lto = true`, `codegen-units = 1`, `panic = "abort"`, `strip = true`) and/or using `strip` utility post-compilation.
- **Comments:** Write clear comments for complex logic, public API functions, and any non-obvious decisions. Doc comments (`///`) for public items are encouraged.
- **Modularity:** Keep functions small and focused. Modules should have clear responsibilities.



================================================
File: docs/RELEASING.md
================================================
# Releasing `codesprout`

This document outlines the process for creating official releases and pre-releases for the `codesprout` project.

## Automated Release Process Overview

This project uses `release-please-action` to automate releases. When commits adhering to the [Conventional Commits](https://www.conventionalcommits.org/) specification are merged into the `main` branch, `release-please` will:

1.  **Determine the next semantic version** based on the commit messages (e.g., `fix:` triggers a patch, `feat:` triggers a minor).
2.  **Generate a changelog** from these commit messages.
3.  **Create a pull request** (or directly create a release, depending on configuration) proposing these changes.
    *   If a pull request is created, it will update `Cargo.toml` with the new version and include the generated changelog.
    *   Merging this pull request will trigger the actual release.
4.  **Create a Git tag** for the new version (e.g., `v0.2.0`).
5.  **Publish a GitHub Release** with the generated changelog and compiled binaries for Linux, macOS (x86_64 and aarch64), and Windows.

This process is documented in the main [README.md](../README.md#ë¦´ë¦¬ìŠ¤-í”„ë¡œì„¸ìŠ¤-release-process-ðŸ“¦).

## Creating Pre-Releases (e.g., Alpha, Beta)

To create a specific pre-release version (e.g., `0.1.0-alpha.1`), you need to use a special commit message footer.

### Steps:

1.  **Prepare Your Code:**
    *   Ensure all code changes intended for the pre-release are committed to your local `main` branch (or the feature branch you will merge into `main`).

2.  **Craft a Special Commit:**
    *   Create a new commit (or amend an existing one if it's the last commit and not yet pushed).
    *   The commit message **must** follow the [Conventional Commits](https://www.conventionalcommits.org/) standard.
    *   Include a `Release-As:` footer in the commit message body, specifying the exact pre-release version.

    **Example Commit Message for `0.1.0-alpha.1`:**
    ```
    feat: Implement initial features for alpha release

    This commit includes the core functionality planned for the first alpha
    version of 0.1.0. It's ready for preliminary testing.

    Release-As: 0.1.0-alpha.1
    ```
    *   The `feat:` prefix (or `fix:`, `chore:`, etc.) is important for `release-please` to categorize the changes in the changelog.
    *   The `Release-As: 0.1.0-alpha.1` line explicitly tells `release-please` to create this specific version, overriding its normal version calculation for this instance.

3.  **Push to `main`:**
    *   Push this commit to the `main` branch on GitHub.
    ```bash
    git push origin main
    ```

4.  **`release-please` Takes Over:**
    *   The push to `main` will trigger the [`.github/workflows/release.yml`](../.github/workflows/release.yml) workflow.
    *   `release-please-action` will read the commit history and detect the `Release-As:` footer.
    *   It will then proceed to:
        *   Update the version in `Cargo.toml` to the specified pre-release version (e.g., `0.1.0-alpha.1`).
        *   Generate or update a `CHANGELOG.md` file.
        *   Commit these file changes directly to the `main` branch.
        *   Create a Git tag (e.g., `v0.1.0-alpha.1`).
        *   Create a GitHub Release with the corresponding title and changelog notes.
        *   The `build-and-upload-assets` job in the workflow will then build the binaries and upload them to this GitHub Release.

### Important Considerations for Pre-Releases:

*   **Base Version in `Cargo.toml`:** `release-please` uses the version in your `Cargo.toml` as a starting point. Ensure it's at a suitable base (e.g., `0.1.0` if you're creating `0.1.0-alpha.1`) before `release-please` runs.
*   **Subsequent Pre-Releases:** To release `0.1.0-alpha.2`, make further commits and then create another commit with the footer `Release-As: 0.1.0-alpha.2`.
*   **Exiting Pre-Release to Stable:** When you're ready to release the stable version (e.g., `0.1.0` after a series of alphas/betas), make a commit with the footer `Release-As: 0.1.0`. For example:
    ```
    feat: Finalize features for 0.1.0

    All planned features for the 0.1.0 release are complete and tested.
    This version is ready for stable release.

    Release-As: 0.1.0
    ```

This `Release-As` footer provides precise control over the version number, which is essential for managing pre-release cycles.



================================================
File: docs/SECURITY.md
================================================
# Security Policy

The Codesprout team and community take the security of our software seriously. We appreciate your efforts to responsibly disclose your findings, and we will make every effort to acknowledge your contributions.

## Reporting a Vulnerability

If you believe you have found a security vulnerability in Codesprout, please report it to us as soon as possible. We ask that you do not disclose the vulnerability publicly until we have had a chance to address it.

Please report vulnerabilities via one of the following methods:

* **Email:** Send an email to `[dark@nightconcept.net](mailto:dark@nightconcept.net)` with a detailed description of the vulnerability, steps to reproduce it, and any potential impact.
* **Issue Tracker (Private):** If you prefer, you can report the vulnerability through our private issue tracker `[here](https://github.com/nightconcept/codesprout/security/advisories)`.

We aim to acknowledge receipt of your vulnerability report within **3 business days**.

## Disclosure Policy

Our goal is to address and fix any reported security vulnerability in a timely manner. Here is our general process:

1. **Confirmation:** We will confirm the vulnerability and determine its impact. We may contact you for more information during this phase. This typically takes up to **7 days**.
2. **Remediation:** Our team will work on a fix for the vulnerability. The timeline for this can vary depending on the complexity of the vulnerability, but we aim to have a patch ready within **30 days** of confirmation. For more complex issues, this might extend up to **90 days**.
3. **Disclosure:** Once the vulnerability is fixed and a new version is released, we will make a public disclosure. This disclosure will typically include a description of the vulnerability and credit to the reporter, unless you request to remain anonymous. We believe in transparent disclosure practices.

We are committed to a coordinated vulnerability disclosure process. We expect to work closely with the reporter throughout the lifecycle of the vulnerability.

## Scope

This policy applies to the latest stable release of Codesprout. If you are using an older version, please consider upgrading before reporting a vulnerability, as it may have already been addressed.

## Out of Scope

The following are generally considered out of scope for our vulnerability disclosure program:

* Denial of service attacks that require significant volumetric resources.
* Social engineering or phishing attacks.
* Vulnerabilities in third-party dependencies (please report those to the respective projects, though we appreciate a heads-up if it impacts Codesprout).

Thank you for helping keep Codesprout secure. Your efforts in responsible disclosure are highly valued.



================================================
File: docs/TASKS.md
================================================
# codesprout - Task List

## Milestone 0: Development Environment & Workflow Setup

**Goal:** Establish a consistent Rust development environment using `mise` and define commands/scripts for essential development tasks such as formatting, linting, building, and testing the `sprout` CLI.

- [x] **Task 0.1: Setup `mise` for Rust Version Management**
  - [x] Create a `mise.toml` file in the project root.
  - [x] Specify the Rust version to be used for the project (e.g., `rust = "latest"` or a specific version like `rust = "1.87"` to align with PRD).
  - [x] Verification: After navigating to the project directory in a new terminal, `mise current rust` (or `mise which rustc`) shows the correct Rust compiler path and version as specified in `.mise.toml`. Running `rustc --version` confirms the active version.

- [x] **Task 0.2: Define Code Formatting Task & Integration**
  - [x] Document the command for checking formatting: `cargo fmt --all --check`.
  - [x] Document the command for applying formatting: `cargo fmt --all`.
  - [x] (Optional) Consider integrating `cargo fmt --all --check` into a pre-commit hook or CI step later.
    - [x] Verification: `cargo fmt --all --check` passes on a cleanly formatted codebase. `cargo fmt --all` correctly formats any misformatted Rust files.
- [x] **Task 0.3: Define Code Linting Task & Integration**
  - [x] Document the command for linting: `cargo clippy --all-targets -- -D warnings` (treat all warnings as errors).
  - [x] (Optional) Consider integrating this lint check into a pre-commit hook or CI step later.
  - [x] Verification: `cargo clippy --all-targets -- -D warnings` passes on a lint-free codebase.
- [ ] **Task 0.4: Define Building Tasks**
  - [x] Document command for debug builds: `cargo build`.
  - [ ] Document command for optimized release builds: `cargo build --release`.
  - [x] Note: `Cargo.toml` should be configured with release profile optimizations as per PRD (e.g., `opt-level = "z"`, `lto = true`, `panic = "abort"`, `strip = true`).
  - [x] Verification: `cargo build` successfully compiles the project. `cargo build --release` successfully compiles the project and produces an optimized binary.
- [x] **Task 0.5: Define Testing Task**  
    - [x] Document command for running all tests: `cargo test`.
    - [x] Document command for running tests with more output: `cargo test -- --nocapture` (if needed for debugging).
    - [x] Verification: `cargo test` runs all available tests and reports pass/fail status (initially, this might be an empty test suite or auto-generated tests).

## Milestone 1: Project Initialization & CLI Argument Parsing

**Goal:** Initialize the Rust project structure for `sprout` (if not fully covered by Milestone 0 tasks related to `cargo new`), implement robust command-line argument parsing using `clap`, and set up the basic application structure to handle the main processing flow.

- [x] **Task 1.1: Complete Rust Project Initialization**
    
    - [x] Run `cargo new sprout --bin` (if not done as part of `mise` setup or if a fresh start is preferred).
    - [x] Ensure `Cargo.toml` is correctly configured:
        - Set `name = "sprout"` (as the binary will be `sprout`), `description = "A CLI tool to sprout files from a bundle."`, `authors = ["Your Name <you@example.com>"]`, `edition = "2024"`, `version = "0.1.0"`.
        - Add `clap` as a dependency with the "derive" feature (e.g., `clap = { version = "4.x", features = ["derive"] }`).
        - Add `anyhow` as a dependency (e.g., `anyhow = "1.x"`).
    - [x] Verification: Project compiles successfully (`cargo build`). `Cargo.toml` reflects the specified settings and dependencies. `sprout --version` (once version is integrated with `clap`'s `App::version`) works.
- [x] **Task 1.2: Implement CLI Argument Parsing with `clap`**
    
    - [x] In `src/main.rs`, define a struct (e.g., `CliArgs`) using `clap::Parser` to manage command-line arguments.
    - [x] Implement parsing for:
        - `bundle_file_path` (positional, `PathBuf`, required unless `-i` is used).
        - `output_directory_path` (positional, `PathBuf`, optional, defaults to current directory unless `-o` is used).
        - `-i, --input <PATH>`: Optional flag for bundle file path (`Option<PathBuf>`).
        - `-o, --output <PATH>`: Optional flag for output directory path (`Option<PathBuf>`).
    - [x] Logic to determine effective input and output paths (handling defaults and overrides).
    - [x] Ensure input path is effectively mandatory.
    - [x] In `main()`, parse the arguments using `CliArgs::parse()`.
    - [x] Verification:
        - `sprout --help` displays correctly formatted help message with all arguments and options.
        - `sprout valid_bundle.txt` correctly identifies `valid_bundle.txt` as input and uses `.` as default output.
        - `sprout -i valid_bundle.txt -o ./my_output` correctly parses input and output paths.
        - `sprout ./my_output_dir` (assuming `my_output_dir` is not the bundle file) is handled by clap for positional args.
        - `sprout` (with no input arguments) shows an error message from `clap` indicating missing required input.
- [x] **Task 1.3: Establish Main Application Logic Flow & Error Handling**
    
    - [x] In `src/main.rs`, ensure `main` function returns `anyhow::Result<()>`.
    - [x] Define the high-level steps based on parsed arguments:
        1. Resolve final input and output paths.
        2. (Stub) Call `parser::process_bundle_file(input_path)`.
        3. (Stub) If parsing/validation successful, call `bundler::create_files(parsed_data, output_path)`.
    - [x] Implement basic stubs for these functions in their respective (future) modules (`parser.rs`, `bundler.rs`).
    - [x] Ensure `main` propagates errors from these calls using `?`.
    - [x] Verification: The `sprout` command runs, prints placeholder messages for each stubbed step based on parsed arguments, and exits gracefully (or with a placeholder error from a stub).

## Milestone 2: Bundle File Parsing and Validation

**Goal:** Implement the complete logic for reading, parsing, and validating the `digest.txt`-style bundle file. The tool should be able to identify all format errors in the bundle file before any file system operations are attempted.

- [x] **Task 2.1: Develop Bundle File Parser (`src/parser.rs`)**
    
    - [x] Create the `src/parser.rs` module. (Covered by previous tasks or implicitly by creating the file)
    - [x] Define a public function, e.g., `parse_bundle(bundle_path: &Path) -> anyhow::Result<Vec<ParsedEntry>>`.
    - [x] Implement logic to read the content of the bundle file.
    - [x] Implement parsing logic to iterate through the file content, recognizing the `================================================\nFile: path/to/file.ext\n================================================\n...content...` structure.
    - [x] Extract the relative file path (`String` or `PathBuf`) and the multi-line content (`String`) for each entry.
    - [x] Store the parsed data in a struct, e.g., `pub struct ParsedEntry { pub path: PathBuf, pub content: String }`.
    - [x] Verification: Unit tests for the `parser::parse_bundle` function covering:
        - [x] Empty bundle file (should return empty Vec or appropriate error).
        - [x] Bundle file with one entry.
        - [x] Bundle file with multiple entries.
        - [x] Entries with empty content.
        - [x] Entries with complex multi-line content.
        - [x] Correct path extraction (including paths with subdirectories).
- [x] **Task 2.2: Implement Bundle File Format Validation**
    
    - [x] Within `src/parser.rs`, enhance the parsing or add a distinct validation step for the parsed entries and the overall bundle structure. This validation should occur before returning successfully from `parse_bundle`.
    - [x] Validation checks should include:
        - Each `File:` header line must be properly formed and contain a non-empty, valid relative path.
        - No duplicate paths within the bundle.
        - Consider edge cases: premature EOF, missing headers, content before the first header (should it be ignored or an error?). (Implemented: content before first header is an error; other structural errors handled)
    - [x] The validation should collect _all_ format errors found in the bundle and return them as a single `anyhow::Error` (possibly by formatting a list of specific error details).
    - [x] In `src/main.rs`, call `parse_bundle`. If it returns `Err`, print the error (which should now include all validation issues) and exit. (Handled by `anyhow` and `?` operator).
    - [x] Verification:
        - Update unit tests for `parser::parse_bundle` to cover various invalid bundle file scenarios (e.g., malformed `File:` line, duplicate paths, EOF within a file block).
        - Test the `sprout` CLI with sample malformed bundle files; ensure all relevant errors are reported clearly and the program exits without attempting to write files.

## Milestone 3: File System Operations, Collision Detection, and Final Integration

**Goal:** Implement the logic to create the directory structure and files as specified in the parsed bundle. This includes robust collision detection in the output directory. This milestone will result in a fully functional `sprout` CLI for its core purpose.

- [x] **Task 3.1: Implement Output Path Collision Detection (`src/bundler.rs`)**
    
    - [x] Create the `src/bundler.rs` module.
    - [x] Implement a function, e.g., `check_for_collisions(entries: &[ParsedEntry], output_dir: &Path) -> anyhow::Result<()>`.
    - [x] For each `ParsedEntry` in the list:
        - Construct the full target path by joining `output_dir` and `entry.path`.
        - Check if this full target path already exists using `std::path::Path::exists()`.
    - [x] If any path collision is detected, this function should return an `anyhow::Error` detailing all collisions found.
    - [x] In `src/main.rs`, call this collision check function after successful bundle parsing. If it returns `Err`, print the error and exit.
    - [x] Verification:
        - Unit tests for `bundler::check_for_collisions` with scenarios: no collisions, one collision, multiple collisions, collision with a file where a directory is needed, collision with a directory where a file is needed.
        - CLI Test: `sprout` aborts with an informative error if a target file path already exists.
        - CLI Test: `sprout` aborts if a parent directory to be created (e.g., `new_dir/`) conflicts with an existing file named `new_dir`.
- [x] **Task 3.2: Implement Directory and File Creation (`src/bundler.rs`)**
    
    - [x] Implement a function, e.g., `create_files_from_bundle(entries: &[ParsedEntry], output_dir: &Path) -> anyhow::Result<()>`.
    - [x] This function is called only if bundle parsing and collision checks pass.
    - [x] For each `ParsedEntry`:
        - [x] Resolve the full absolute path for the new file.
        - [x] Ensure its parent directory exists using `std::fs::create_dir_all(parent_path)`.
        - [x] Write the `entry.content` to the file path using `std::fs::write`.
    - [x] Handle potential I/O errors during directory/file creation gracefully, returning an `anyhow::Error`.
    - [x] Verification:
        - [x] Unit tests for `bundler::create_files_from_bundle` to verify:
            - [x] Creation of a single file in the output directory.
            - [x] Creation of multiple files.
            - [x] Creation of files within newly created nested subdirectories.
            - [x] Correct writing of file content.
        - (Covered by integration tests in next task mostly)
- [x] **Task 3.3: Final Integration, User Feedback, and Testing**
    
    - [x] Integrate all components in `src/main.rs`: CLI parsing (`clap`), bundle file reading/validation (`parser.rs`), collision detection, and file/directory creation (`bundler.rs`).
    - [x] Implement clear success messages (e.g., "Successfully sprouted N files to <output_directory>.").
    - [x] Ensure all error paths (bundle format errors, I/O errors, collision errors) provide user-friendly messages propagated by `anyhow`.
    - [x] Write integration tests for the `sprout` CLI (e.g., using a test runner or simple shell scripts that invoke the compiled binary):
        - [x] Test with a valid bundle file creating a simple structure.
        - [x] Test with a valid bundle file creating a nested structure.
        - [x] Test failure with a malformed bundle file (ensure all errors are printed).
        - [x] Test failure due to output file collision (ensure specific collision is reported).
        - [x] Test with empty bundle file.
        - [x] Test output to current directory (default) and to a specified directory.
    - [x] Verification: The `sprout` command works end-to-end for valid scenarios and fails gracefully with correct, comprehensive error messages for all defined error conditions. Code coverage for core logic (parsing, bundling) is reasonable.

## Additional Tasks / Backlog

(Items from the PRD's "Future Considerations" that are out of scope for this initial prototype but good to keep in mind for future development)

- [ ] Implement Reverse Operation ("Bundling" a directory into a `digest.txt` style file).
- [x] **Implement `--force` flag for overwriting files** (2025-05-21) - Add a `--force` CLI flag to allow `sprout` to overwrite existing files in the output directory without prompting.
  - [x] Update CLI argument parsing in `src/main.rs` to include the `--force` flag.
  - [x] Modify `src/bundler.rs` to bypass collision checks and overwrite files if `--force` is active.
  - [x] Add/update unit tests for `bundler.rs` to cover overwrite logic.
  - [x] Add/update integration tests to verify `--force` flag behavior.
  - [x] Update `README.md` to document the new `--force` flag.
- [ ] Add other file overwrite protection options (skip, prompt).
- [ ] Introduce a configuration file for `sprout` (e.g., custom delimiters, default output dir).
- [ ] Add more comprehensive test cases for file system edge cases (permissions, symlinks, etc.).
- [ ] Refine and add more detailed verbose logging options (e.g., using `log` and `env_logger` crates).
- [ ] Research and implement packaging/distribution methods for the Rust binary (e.g., `cargo-dist`, GitHub Releases assets, AUR, Homebrew).
- [ ] Performance benchmarking and optimization for very large bundle files or a high number of files.
- [x] **Task 4.1: Create Project README** (2025-05-20) - Create a cool README.md with emojis, project description, usage, build, and test instructions.

- [ ] **Task 3.4: Setup and Document Code Coverage** (2025-05-21)
  - [ ] Choose and document a code coverage tool (e.g., `cargo-tarpaulin`).
  - [ ] Add installation instructions for the chosen tool.
  - [ ] Document the command(s) to generate coverage reports (e.g., HTML, LCOV).
  - [ ] Integrate coverage check into CI if feasible/desired.
  - [ ] Verification: Coverage reports can be successfully generated and provide meaningful insights.
## Milestone 4: Release Process & Automation

**Goal:** Define and implement an automated release process using Conventional Commits and GitHub Actions to streamline versioning, changelog generation, and GitHub Release creation.

- [x] **Task 4.2: Define and Implement Release Process using Conventional Commits** (2025-05-20)
  - [x] Research and select appropriate tooling for semantic versioning and changelog generation based on Conventional Commits (e.g., `release-please-action`).
  - [x] Create/update GitHub Actions workflow to:
    - Trigger on pushes/merges to the main branch.
    - Automatically determine the next version.
    - Generate a changelog.
    - Create a Git tag.
    - Create a GitHub Release with the changelog and release assets.
  - [x] Configure the workflow to build release binaries for common platforms (Linux, macOS, Windows).
  - [x] Document the release process and how to trigger it.
- [x] **Task 4.3: Fix GitHub Actions Workflow Permission Warnings** (2025-05-21)
  - [x] Review and address permission warnings reported for GitHub Actions workflows.
  - [x] Ensure workflows use the principle of least privilege.
  - [x] Explicitly pass `GITHUB_TOKEN` to `release-please-action` in `.github/workflows/release.yml` to address PR creation permission error. (2025-05-21)
  - [ ] Target warnings:
    - `Warn: topLevel 'security-events' permission set to 'write': .github/workflows/ci.yml:5`
    - `Warn: topLevel 'contents' permission set to 'write': .github/workflows/release.yml:9`
    - `Info: topLevel permissions set to 'read-all': .github/workflows/scorecards.yml:18`
  - [ ] Verify other 'Info' level read permissions are appropriate.
## Milestone 5: Code Coverage Improvement

**Goal:** Increase test coverage for core modules based on the `tarpaulin-report.html`.

- [x] **Task 5.1: Improve test coverage for `src/bundler.rs`** (2025-05-21)
  - [x] Analyze `tarpaulin-report.html` for uncovered lines in `src/bundler.rs`.
  - [x] Write new unit tests or modify existing ones in `src/bundler.rs` (tests module) to cover these lines.
  - [x] Target lines: 34, 74.
  - [x] Aim for 100% coverage for `src/bundler.rs`.
- [ ] **Task 5.2: Improve test coverage for `src/main.rs`** (2025-05-21)
  - [ ] Analyze `tarpaulin-report.html` for uncovered lines in `src/main.rs`.
  - [ ] Write new tests (likely integration tests in `tests/integration_tests.rs` as `main.rs` handles CLI logic) to cover these lines/scenarios.
  - [ ] Target lines: 44, 51, 76.
  - [ ] Aim for 100% coverage for `src/main.rs`.
- [ ] **Task 5.3: Improve test coverage for `src/parser.rs`** (2025-05-21)
  - [ ] Analyze `tarpaulin-report.html` for the many uncovered lines in `src/parser.rs`.
  - [ ] Write new unit tests or modify existing ones in `src/parser.rs` (tests module) to cover these lines.
  - [ ] Prioritize covering error handling paths and complex logic branches.
  - [ ] Aim for significantly improved coverage, targeting 100% for `src/parser.rs`.


================================================
File: scripts/README.md
================================================
# Release Signing Script (`sign_releases.py`)

This Python script automates the process of cryptographically signing GitHub release artifacts for a specified repository and re-uploading them along with their `.asc` signature files. This helps meet the OpenSSF "Signed-Releases" criteria by attesting to the provenance of the artifacts.

## Prerequisites

1.  **Python 3:** Ensure you have Python 3 installed on your system.
2.  **GnuPG (GPG):** GPG must be installed, and you need to have a GPG key pair generated and configured. The script will attempt to use the first available secret key suitable for signing.
3.  **Python Libraries:** Install the necessary Python libraries using pip:
    ```bash
    pip install requests python-gnupg
    ```
4.  **GitHub Personal Access Token:** You will need a GitHub Personal Access Token.
    *   **Permissions:** The token requires the `repo` scope (or `public_repo` if your repository is public and you only need to access/modify public releases).
    *   **Usage:** The script will prompt for this token if it's not provided via the `--github-token` command-line argument or the `GITHUB_TOKEN` environment variable.

## How to Run

1.  Navigate to the `scripts` directory within your project (e.g., `cd /path/to/your/project/scripts`).
2.  Execute the script from your terminal:

    ```bash
    python sign_releases.py OWNER/REPOSITORY_NAME
    ```
    Replace `OWNER/REPOSITORY_NAME` with the target repository (e.g., `nightconcept/almandine`).

### Command-Line Arguments

*   `repo` (Required): The repository name in `owner/repo` format (e.g., `nightconcept/almandine`).
*   `--github-token YOUR_GITHUB_TOKEN` (Optional): Your GitHub Personal Access Token. If not provided, the script will try to read it from the `GITHUB_TOKEN` environment variable or prompt you to enter it.
*   `--gpg-program /path/to/gpg` (Optional): Specify the full path to your GPG executable if it's not in your system's PATH (default is `gpg`).
*   `--num-releases N` (Optional): The number of recent releases to process. Defaults to `5`. The maximum is 30 (a GitHub API limit for some queries, and the OpenSSF check looks at the 30 most recent).
*   `--skip-already-signed` (Optional): If this flag is present, the script will skip processing an asset if a corresponding `.asc` signature file already exists in the release assets.
*   `--yes` (Optional): If this flag is present, the script will automatically confirm actions (like signing and uploading) without prompting the user. Use with caution.

### Script Behavior

When executed, the script will:
1.  Prompt for your GitHub Personal Access Token if not provided via argument or environment variable.
2.  Prompt for your GPG key passphrase (if your key is passphrase-protected).
3.  Identify the first available GPG secret key suitable for signing.
4.  Fetch the specified number of recent releases from the target GitHub repository.
5.  For each release:
    a.  Iterate through its assets.
    b.  Skip any files that appear to be existing signature files (e.g., `.asc`, `.sig`).
    c.  If `--skip-already-signed` is used, skip assets that already have a corresponding `.asc` signature uploaded.
    d.  Prompt for confirmation to sign and re-upload each eligible asset (unless `--yes` is used).
    e.  Download the asset to a temporary local directory.
    f.  Sign the downloaded asset using the identified GPG key, creating a detached signature file (`.asc`).
    g.  Upload the newly created `.asc` signature file to the GitHub release.
    h.  Clean up the temporary downloaded asset and signature file.
6.  Provide logging output for all actions and any errors encountered.

## Important Considerations

*   **GPG Key Selection:** The script automatically selects the first GPG secret key it finds that is suitable for signing. Ensure the desired key is available to GPG.
*   **Idempotency:** The `--skip-already-signed` flag helps prevent re-processing assets that have already been signed and had their signatures uploaded.
*   **Error Handling:** The script includes logging and attempts to handle common errors related to GitHub API interactions, GPG operations, and file system actions.
*   **Security:**
    *   Be cautious when entering your GitHub token and GPG passphrase.
    *   Avoid hardcoding sensitive credentials directly into scripts or committing them to version control. Using environment variables or interactive prompts (as the script does) is preferred.
*   **API Rate Limits:** While the script processes releases and assets one by one, be mindful of GitHub API rate limits if you are processing a very large number of releases or assets frequently.
*   **Manual Testing:** It is highly recommended to first test this script on a fork or a test repository with a few sample releases to ensure it behaves as expected with your GPG setup and GitHub token before running it on your main project repository.


================================================
File: scripts/sign_releases.py
================================================
import os
import requests
import gnupg
import getpass
import json
import argparse
import logging

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Constants
GITHUB_API_URL = "https://api.github.com"
RELEASES_PER_PAGE = 30 # Max allowed by GitHub API for releases, check looks for 30 most recent
SIGNATURE_EXTENSIONS = [".minisig", ".asc", ".sig", ".sign", ".sigstore", ".intoto.jsonl"]

def get_github_releases(repo_owner, repo_name, token, num_releases_to_check):
    """Fetches the specified number of releases from GitHub."""
    releases = []
    page = 1
    while len(releases) < num_releases_to_check:
        url = f"{GITHUB_API_URL}/repos/{repo_owner}/{repo_name}/releases?per_page={RELEASES_PER_PAGE}&page={page}"
        headers = {"Authorization": f"token {token}"}
        try:
            response = requests.get(url, headers=headers)
            response.raise_for_status()
            current_page_releases = response.json()
            if not current_page_releases:
                break # No more releases
            releases.extend(current_page_releases)
            if len(current_page_releases) < RELEASES_PER_PAGE:
                break # Last page
            page += 1
        except requests.exceptions.RequestException as e:
            logging.error(f"Error fetching releases: {e}")
            return None
        if len(releases) >= num_releases_to_check:
            break
    return releases[:num_releases_to_check]

def download_asset(asset_url, asset_name, token):
    """Downloads a release asset."""
    headers = {"Authorization": f"token {token}", "Accept": "application/octet-stream"}
    try:
        logging.info(f"Downloading asset: {asset_name} from {asset_url}")
        response = requests.get(asset_url, headers=headers, stream=True)
        response.raise_for_status()
        with open(asset_name, 'wb') as f:
            for chunk in response.iter_content(chunk_size=8192):
                f.write(chunk)
        logging.info(f"Successfully downloaded {asset_name}")
        return asset_name
    except requests.exceptions.RequestException as e:
        logging.error(f"Error downloading asset {asset_name}: {e}")
        return None

def sign_file(gpg, filepath, keyid, passphrase):
    """Signs a file using GPG and creates a detached signature."""
    signature_file = f"{filepath}.asc"
    try:
        logging.info(f"Signing file: {filepath} with key ID {keyid}")
        with open(filepath, 'rb') as f:
            status = gpg.sign_file(f, keyid=keyid, detach=True, output=signature_file, passphrase=passphrase)

        # Check if the signing was successful.
        # The 'status' object from python-gnupg has a 'status' attribute (string)
        # and 'stderr'. Success is typically indicated by status.status == 'signature created'.
        if status and hasattr(status, 'status') and status.status == 'signature created':
            logging.info(f"Successfully signed {filepath}, signature: {signature_file}")
            return signature_file
        else:
            # Log GPG's actual status and stderr for diagnostics
            gpg_status_msg = getattr(status, 'status', 'N/A (status object might be None or lack status attribute)')
            gpg_stderr_msg = getattr(status, 'stderr', 'N/A (status object might be None or lack stderr attribute)')
            logging.error(f"Error signing file {filepath}: GPG status '{gpg_status_msg}', stderr: '{gpg_stderr_msg}'")
            if os.path.exists(signature_file): # Clean up partial signature
                os.remove(signature_file)
            return None
    except Exception as e:
        logging.error(f"Exception during signing of {filepath}: {e}")
        if os.path.exists(signature_file):
            os.remove(signature_file)
        return None

def upload_asset(upload_url_template, filepath, token):
    """Uploads an asset to a GitHub release."""
    asset_name = os.path.basename(filepath)
    # GitHub's upload_url includes path parameters like {?name,label}, remove them.
    upload_url = upload_url_template.split('{')[0] + f"?name={asset_name}"
    headers = {
        "Authorization": f"token {token}",
        "Content-Type": "application/octet-stream"
    }
    try:
        logging.info(f"Uploading asset: {asset_name} to {upload_url}")
        with open(filepath, 'rb') as f:
            response = requests.post(upload_url, headers=headers, data=f)
        response.raise_for_status()
        logging.info(f"Successfully uploaded {asset_name}")
        return response.json()
    except requests.exceptions.RequestException as e:
        logging.error(f"Error uploading asset {asset_name}: {e}")
        if response:
            logging.error(f"Response content: {response.text}")
        return None
    except Exception as e:
        logging.error(f"An unexpected error occurred during upload of {asset_name}: {e}")
        return None

def main():
    parser = argparse.ArgumentParser(description="Sign GitHub release artifacts and re-upload them with signatures.")
    parser.add_argument("repo", help="Repository name in 'owner/repo' format (e.g., nightconcept/almandine).")
    parser.add_argument("--github-token", help="GitHub Personal Access Token. If not provided, will try to read from GITHUB_TOKEN env var or prompt.")
    parser.add_argument("--gpg-program", default="gpg", help="Path to GPG executable (if not in PATH).")
    parser.add_argument("--num-releases", type=int, default=5, help="Number of recent releases to process (max 30).")
    parser.add_argument("--skip-already-signed", action='store_true', help="Skip assets if a corresponding signature file already exists in the release.")
    parser.add_argument("--yes", action='store_true', help="Automatically confirm actions without prompting.")

    args = parser.parse_args()

    repo_owner, repo_name = args.repo.split('/')
    num_releases_to_check = min(args.num_releases, 30) # Cap at 30

    github_token = args.github_token or os.environ.get("GITHUB_TOKEN")
    if not github_token:
        github_token = getpass.getpass("Enter GitHub Personal Access Token: ")

    gpg = gnupg.GPG(gpgbinary=args.gpg_program)

    # Find the first available GPG secret key suitable for signing
    secret_keys = gpg.list_keys(secret=True)
    signing_key = None
    for key in secret_keys:
        for uid_details in key.get('uids', []):
            # A simple check, might need refinement based on GPG key capabilities
            if 'S' in key.get('cap', ''): # Check if key has signing capability
                signing_key = key
                break
        if signing_key:
            break

    if not signing_key:
        logging.error("No suitable GPG secret key found for signing. Please ensure you have a GPG key with signing capability.")
        logging.info("Available secret keys (if any):")
        for skey in secret_keys:
             logging.info(f"  KeyID: {skey['keyid']}, UIDs: {skey.get('uids', 'N/A')}, Capabilities: {skey.get('cap', 'N/A')}")
        return

    gpg_key_id = signing_key['keyid']
    logging.info(f"Using GPG Key ID: {gpg_key_id} ({signing_key.get('uids', ['No UID'])[0]}) for signing.")

    gpg_passphrase = getpass.getpass(f"Enter GPG passphrase for key {gpg_key_id} (leave blank if none): ")

    logging.info(f"Fetching last {num_releases_to_check} releases for {repo_owner}/{repo_name}...")
    releases = get_github_releases(repo_owner, repo_name, github_token, num_releases_to_check)

    if not releases:
        logging.info("No releases found or error fetching releases.")
        return

    for release in releases:
        release_name = release.get('name', release['tag_name'])
        logging.info(f"\nProcessing release: {release_name} (ID: {release['id']}, Tag: {release['tag_name']})")

        if 'assets' not in release or not release['assets']:
            logging.info(f"No assets found for release {release_name}.")
            continue

        upload_url_template = release['upload_url']
        existing_asset_names = {asset['name'] for asset in release['assets']}

        for asset in release['assets']:
            asset_name = asset['name']
            asset_url = asset['browser_download_url'] # This is the public URL, need API URL for download
            asset_api_url = asset['url'] # API URL for asset details and download

            # Skip if it's already a signature file
            if any(asset_name.endswith(ext) for ext in SIGNATURE_EXTENSIONS):
                logging.info(f"Skipping signature file: {asset_name}")
                continue

            # Skip if --skip-already-signed and signature exists
            signature_filename_asc = f"{asset_name}.asc"
            if args.skip_already_signed and signature_filename_asc in existing_asset_names:
                logging.info(f"Signature {signature_filename_asc} already exists for {asset_name}. Skipping.")
                continue

            if not args.yes:
                confirm = input(f"Sign and re-upload asset '{asset_name}' for release '{release_name}'? (y/N): ")
                if confirm.lower() != 'y':
                    logging.info(f"Skipping asset {asset_name} by user choice.")
                    continue

            downloaded_file_path = None
            signed_file_path = None
            temp_dir = f"temp_release_assets_{release['id']}"
            os.makedirs(temp_dir, exist_ok=True)

            original_asset_path_in_temp = os.path.join(temp_dir, asset_name)

            try:
                downloaded_file_path = download_asset(asset_api_url, original_asset_path_in_temp, github_token)
                if not downloaded_file_path:
                    continue

                signed_file_path = sign_file(gpg, downloaded_file_path, gpg_key_id, gpg_passphrase)
                if not signed_file_path:
                    continue

                # Upload original asset (if it was somehow modified or to ensure it's there)
                # This is generally not needed if we are just adding signatures,
                # but could be part of a "refresh" flow. For now, we assume original is fine.
                # If the workflow is to replace, then we'd upload downloaded_file_path.
                # For now, we only upload the signature.

                # Upload signature
                logging.info(f"Uploading signature {os.path.basename(signed_file_path)}...")
                upload_asset(upload_url_template, signed_file_path, github_token)

            finally:
                # Clean up temporary files
                if downloaded_file_path and os.path.exists(downloaded_file_path):
                    os.remove(downloaded_file_path)
                if signed_file_path and os.path.exists(signed_file_path):
                    os.remove(signed_file_path)
                if os.path.exists(temp_dir) and not os.listdir(temp_dir): # Remove dir if empty
                    os.rmdir(temp_dir)
                elif os.path.exists(temp_dir) and os.listdir(temp_dir):
                    logging.warning(f"Temporary directory {temp_dir} is not empty after processing asset {asset_name}. Manual cleanup may be required.")


    logging.info("\nScript finished.")

if __name__ == "__main__":
    main()



================================================
File: src/bundler.rs
================================================
// src/bundler.rs
// Module for file/directory creation and output logic

use crate::parser::ParsedEntry;
use anyhow::{Context, Result};
use std::{
    fs,
    path::{Path, PathBuf},
};

/// Creates directories and files based on the parsed bundle entries.
///
/// This function is called only if bundle parsing and collision checks pass.
/// For each `ParsedEntry`:
///   - Resolves the full absolute path for the new file.
///   - Ensures its parent directory exists using `std::fs::create_dir_all(parent_path)`.
///   - Writes the `entry.content` to the file path using `std::fs::write`.
///
/// Handles potential I/O errors during directory/file creation gracefully, returning an `anyhow::Error`.
/// If `force` is true, existing files will be overwritten.
pub fn create_files_from_bundle(
    entries: &[ParsedEntry],
    output_dir: &Path,
    _force: bool, // Indicate unused variable, logic is handled by skipping collision check
) -> Result<()> {
    for entry in entries {
        let full_target_path = output_dir.join(&entry.path);

        // If forcing, we don't care if the file exists, but we still need to ensure parent dirs are there.
        // If not forcing, collision check should have already happened.
        if let Some(parent_path) = full_target_path.parent() {
            if !parent_path.exists() {
                fs::create_dir_all(parent_path).with_context(|| {
                    format!("Failed to create parent directory: {:?}", parent_path)
                })?;
            } else if parent_path.is_file() {
                // This case should ideally be caught by check_for_collisions if not forcing.
                // If forcing, and a parent path component is a file, fs::write will fail later.
                // This is a safeguard or clarity, fs::write would fail anyway.
                return Err(anyhow::anyhow!(
                    "Cannot create file {:?}, its parent {:?} is an existing file.",
                    full_target_path,
                    parent_path
                ));
            }
        }

        // fs::write will overwrite if the path exists and is a file.
        // If path is a directory, fs::write will fail, which is correct.
        fs::write(&full_target_path, &entry.content)
            .with_context(|| format!("Failed to write file: {:?}", full_target_path))?;
    }
    Ok(())
}

/// Checks for path collisions in the output directory.
///
/// For each `ParsedEntry`, it constructs the full target path by joining
/// `output_dir` and `entry.path`. It then checks if this full target path
/// already exists. If any collisions are detected, it returns an `anyhow::Error`
/// detailing all collisions.
pub fn check_for_collisions(entries: &[ParsedEntry], output_dir: &Path) -> Result<()> {
    let mut collisions = Vec::new();

    for entry in entries {
        let target_path = output_dir.join(&entry.path);
        if target_path.exists() {
            collisions.push(target_path);
        } else {
            let mut current_check_path = PathBuf::new();
            for component in entry
                .path
                .parent()
                .unwrap_or_else(|| Path::new(""))
                .components()
            {
                current_check_path.push(component);
                let full_component_path = output_dir.join(&current_check_path);
                if full_component_path.is_file()
                    && entry
                        .path
                        .strip_prefix(&current_check_path)
                        .is_ok_and(|p| !p.as_os_str().is_empty())
                {
                    collisions.push(full_component_path);
                    break;
                }
            }
        }
    }

    if !collisions.is_empty() {
        let collision_details = collisions
            .iter()
            .map(|p| format!("  - {}", p.display()))
            .collect::<Vec<String>>()
            .join("\n");
        return Err(anyhow::anyhow!(
            "Output path collision detected. The following paths already exist or conflict with directory creation:\n{}",
            collision_details
        ));
    }

    Ok(())
}

#[cfg(test)]
mod tests {
    use super::*;
    use crate::parser::ParsedEntry;
    use std::fs::{self, File};
    use tempfile::tempdir;

    fn create_parsed_entry(path_str: &str, content_str: &str) -> ParsedEntry {
        ParsedEntry {
            path: PathBuf::from(path_str),
            content: String::from(content_str),
        }
    }

    #[test]
    fn test_check_for_collisions_no_collision() {
        let dir = tempdir().unwrap();
        let output_dir = dir.path();
        let entries = vec![
            create_parsed_entry("file1.txt", "content1"),
            create_parsed_entry("dir1/file2.txt", "content2"),
        ];

        let result = check_for_collisions(&entries, output_dir);
        assert!(result.is_ok());
    }

    #[test]
    fn test_check_for_collisions_single_file_collision() {
        let dir = tempdir().unwrap();
        let output_dir = dir.path();
        File::create(output_dir.join("file1.txt")).unwrap();

        let entries = vec![
            create_parsed_entry("file1.txt", "content1"),
            create_parsed_entry("file2.txt", "content2"),
        ];

        let result = check_for_collisions(&entries, output_dir);
        assert!(result.is_err());
        let error_message = result.err().unwrap().to_string();
        assert!(error_message.contains("Output path collision detected"));
        assert!(error_message.contains(&output_dir.join("file1.txt").display().to_string()));
    }

    #[test]
    fn test_check_for_collisions_multiple_file_collisions() {
        let dir = tempdir().unwrap();
        let output_dir = dir.path();
        File::create(output_dir.join("file1.txt")).unwrap();
        fs::create_dir_all(output_dir.join("dir1")).unwrap();
        File::create(output_dir.join("dir1/file2.txt")).unwrap();

        let entries = vec![
            create_parsed_entry("file1.txt", "c1"),
            create_parsed_entry("dir1/file2.txt", "c2"),
            create_parsed_entry("file3.txt", "c3"),
        ];

        let result = check_for_collisions(&entries, output_dir);
        assert!(result.is_err());
        let error_message = result.err().unwrap().to_string();
        assert!(error_message.contains(&output_dir.join("file1.txt").display().to_string()));
        assert!(error_message.contains(&output_dir.join("dir1/file2.txt").display().to_string()));
    }

    #[test]
    fn test_check_for_collisions_directory_as_file_collision() {
        let dir = tempdir().unwrap();
        let output_dir = dir.path();
        fs::create_dir_all(output_dir.join("item")).unwrap();

        let entries = vec![create_parsed_entry("item", "content")];

        let result = check_for_collisions(&entries, output_dir);
        assert!(result.is_err());
        let error_message = result.err().unwrap().to_string();
        assert!(error_message.contains(&output_dir.join("item").display().to_string()));
    }

    #[test]
    fn test_check_for_collisions_file_as_directory_collision() {
        let dir = tempdir().unwrap();
        let output_dir = dir.path();
        File::create(output_dir.join("item")).unwrap();

        let entries = vec![create_parsed_entry("item/another.txt", "content")];

        let result = check_for_collisions(&entries, output_dir);
        assert!(result.is_err());
        let error_message = result.err().unwrap().to_string();
        assert!(error_message.contains(&output_dir.join("item").display().to_string()));
        assert!(error_message.contains("conflict with directory creation"));
    }

    #[test]
    fn test_check_for_collisions_deep_file_as_directory_collision() {
        let dir = tempdir().unwrap();
        let output_dir = dir.path();
        fs::create_dir_all(output_dir.join("level1")).unwrap();
        File::create(output_dir.join("level1/item")).unwrap();

        let entries = vec![create_parsed_entry("level1/item/another.txt", "content")];

        let result = check_for_collisions(&entries, output_dir);
        assert!(result.is_err());
        let error_message = result.err().unwrap().to_string();
        // Different OS path separators might cause issues, so we compare with both forms
        let expected_path = output_dir.join("level1").join("item");
        assert!(
            error_message.contains(&expected_path.display().to_string())
                || error_message.contains(&expected_path.display().to_string().replace("\\", "/")),
            "Error message '{}' doesn't contain path '{}'",
            error_message,
            expected_path.display()
        );
    }

    #[test]
    fn test_create_single_file() -> Result<()> {
        let dir = tempdir()?;
        let output_dir = dir.path();
        let entries = vec![create_parsed_entry("file1.txt", "Hello World")];

        create_files_from_bundle(&entries, output_dir, false)?;

        let file_path = output_dir.join("file1.txt");
        assert!(file_path.exists());
        assert_eq!(fs::read_to_string(file_path)?, "Hello World");
        Ok(())
    }

    #[test]
    fn test_create_multiple_files() -> Result<()> {
        let dir = tempdir()?;
        let output_dir = dir.path();
        let entries = vec![
            create_parsed_entry("file1.txt", "Content 1"),
            create_parsed_entry("file2.txt", "Content 2"),
        ];

        create_files_from_bundle(&entries, output_dir, false)?;

        let file_path1 = output_dir.join("file1.txt");
        assert!(file_path1.exists());
        assert_eq!(fs::read_to_string(file_path1)?, "Content 1");

        let file_path2 = output_dir.join("file2.txt");
        assert!(file_path2.exists());
        assert_eq!(fs::read_to_string(file_path2)?, "Content 2");
        Ok(())
    }

    #[test]
    fn test_create_files_in_nested_directories() -> Result<()> {
        let dir = tempdir()?;
        let output_dir = dir.path();
        let entries = vec![
            create_parsed_entry("dir1/file1.txt", "Nested Content 1"),
            create_parsed_entry("dir1/dir2/file2.txt", "Deeply Nested Content 2"),
            create_parsed_entry("file3.txt", "Root Content 3"),
        ];

        create_files_from_bundle(&entries, output_dir, false)?;

        let path1 = output_dir.join("dir1/file1.txt");
        assert!(path1.exists());
        assert_eq!(fs::read_to_string(path1)?, "Nested Content 1");
        assert!(output_dir.join("dir1").is_dir());

        let path2 = output_dir.join("dir1/dir2/file2.txt");
        assert!(path2.exists());
        assert_eq!(fs::read_to_string(path2)?, "Deeply Nested Content 2");
        assert!(output_dir.join("dir1/dir2").is_dir());

        let path3 = output_dir.join("file3.txt");
        assert!(path3.exists());
        assert_eq!(fs::read_to_string(path3)?, "Root Content 3");
        Ok(())
    }

    #[test]
    fn test_create_file_with_empty_content() -> Result<()> {
        let dir = tempdir()?;
        let output_dir = dir.path();
        let entries = vec![create_parsed_entry("empty.txt", "")];

        create_files_from_bundle(&entries, output_dir, false)?;

        let file_path = output_dir.join("empty.txt");
        assert!(file_path.exists());
        assert_eq!(fs::read_to_string(file_path)?, "");
        Ok(())
    }

    #[test]
    fn test_create_files_complex_paths_and_content() -> Result<()> {
        let dir = tempdir()?;
        let output_dir = dir.path();
        let entries = vec![
            create_parsed_entry("src/main.rs", "fn main() {\n    println!(\"Hello\");\n}"),
            create_parsed_entry("docs/README.md", "# My Project\n\nThis is a test."),
            create_parsed_entry("config/settings.toml", "key = \"value\"\nnumber = 123"),
        ];

        create_files_from_bundle(&entries, output_dir, false)?;

        let path_rs = output_dir.join("src/main.rs");
        assert!(path_rs.exists());
        assert_eq!(
            fs::read_to_string(path_rs)?,
            "fn main() {\n    println!(\"Hello\");\n}"
        );
        assert!(output_dir.join("src").is_dir());

        let path_md = output_dir.join("docs/README.md");
        assert!(path_md.exists());
        assert_eq!(
            fs::read_to_string(path_md)?,
            "# My Project\n\nThis is a test."
        );
        assert!(output_dir.join("docs").is_dir());

        let path_toml = output_dir.join("config/settings.toml");
        assert!(path_toml.exists());
        assert_eq!(
            fs::read_to_string(path_toml)?,
            "key = \"value\"\nnumber = 123"
        );
        assert!(output_dir.join("config").is_dir());

        Ok(())
    }

    #[test]
    fn test_create_files_overwrite_with_force() -> Result<()> {
        let dir = tempdir()?;
        let output_dir = dir.path();
        let file_path = output_dir.join("file1.txt");

        // Create an initial file
        fs::write(&file_path, "Initial Content")?;
        assert_eq!(fs::read_to_string(&file_path)?, "Initial Content");

        let entries = vec![create_parsed_entry("file1.txt", "Overwritten Content")];

        // Create files with force=true
        create_files_from_bundle(&entries, output_dir, true)?;

        assert!(file_path.exists());
        assert_eq!(fs::read_to_string(&file_path)?, "Overwritten Content");
        Ok(())
    }

    #[test]
    fn test_create_files_fail_on_parent_is_file_even_with_force() -> Result<()> {
        let dir = tempdir()?;
        let output_dir = dir.path();
        let file_acting_as_parent_path = output_dir.join("parent_file");

        // Create a file where a directory is expected
        fs::write(&file_acting_as_parent_path, "I am a file, not a directory.")?;

        let entries = vec![create_parsed_entry(
            "parent_file/child.txt",
            "This should not be written.",
        )];

        // Attempt to create files with force=true
        let result = create_files_from_bundle(&entries, output_dir, true);

        assert!(result.is_err());
        let error_message = result.err().unwrap().to_string();
        assert!(error_message.contains("its parent"));
        assert!(error_message.contains("is an existing file"));

        // Ensure the original "parent_file" is untouched and no "child.txt" was created
        assert_eq!(
            fs::read_to_string(&file_acting_as_parent_path)?,
            "I am a file, not a directory."
        );
        assert!(!output_dir.join("parent_file/child.txt").exists());

        Ok(())
    }

    #[test]
    fn test_create_files_parent_creation_failure_due_to_file_ancestor() -> Result<()> {
        let dir = tempdir()?;
        let output_dir = dir.path();

        // Create a file that will act as an invalid ancestor for a directory to be created
        let ancestor_file_path = output_dir.join("ancestor_is_a_file");
        fs::write(
            &ancestor_file_path,
            "I am a file, blocking directory creation.",
        )?;

        let entries = vec![create_parsed_entry(
            "ancestor_is_a_file/new_subdir/target_file.txt",
            "This content should not be written.",
        )];

        let result = create_files_from_bundle(&entries, output_dir, false);

        assert!(
            result.is_err(),
            "Expected an error due to parent creation failure"
        );
        let error_message = result.err().unwrap().to_string();

        // Check for the specific context message from line 34
        let expected_parent_path_to_fail = output_dir.join("ancestor_is_a_file/new_subdir");
        assert!(
            error_message.contains(&format!(
                "Failed to create parent directory: {:?}",
                expected_parent_path_to_fail
            )),
            "Error message did not contain the expected context. Got: {}",
            error_message
        );

        // Ensure no part of the new path was created
        assert!(!output_dir.join("ancestor_is_a_file/new_subdir").exists());
        assert!(
            !output_dir
                .join("ancestor_is_a_file/new_subdir/target_file.txt")
                .exists()
        );

        Ok(())
    }

    #[test]
    fn test_check_for_collisions_path_parent_is_none() {
        let dir = tempdir().unwrap();
        let output_dir = dir.path();

        // Entry path "root_file.txt" has no parent, so entry.path.parent() is None.
        // This should execute the unwrap_or_else(|| Path::new("")) part of line 74.
        let entries = vec![create_parsed_entry("root_file.txt", "content")];

        // No actual files exist, so no collisions should be found.
        let result = check_for_collisions(&entries, output_dir);
        assert!(
            result.is_ok(),
            "Expected Ok, but got Err: {:?}",
            result.err()
        );

        // Create a scenario where a parent component (that doesn't exist for "root_file.txt")
        // might hypothetically conflict if the logic was different, but for root files,
        // the inner loop of check_for_collisions (lines 71-88) should not run.
        // This test primarily ensures line 74's closure is hit without panic or incorrect logic.
    }
}



================================================
File: src/main.rs
================================================
use clap::Parser;
use std::path::PathBuf;

mod bundler;
mod parser;

/// sprout - A CLI tool to sprout files from a bundle.
#[derive(Parser, Debug)]
#[command(author, version, about, long_about = None, infer_long_args = true)]
struct CliArgs {
    /// Path to the bundle file (positional).
    /// Required unless -i/--input is used.
    #[arg(name = "BUNDLE_FILE_PATH", required_unless_present = "input")]
    bundle_file_path: Option<PathBuf>,

    /// Output directory path (positional).
    /// Defaults to the current directory if not specified and -o/--output is not used.
    #[arg(name = "OUTPUT_DIRECTORY_PATH", default_value = ".")]
    output_directory_path: PathBuf,

    /// Specify bundle file path via flag (alternative to positional BUNDLE_FILE_PATH).
    #[arg(short, long, value_name = "PATH", conflicts_with = "BUNDLE_FILE_PATH")]
    input: Option<PathBuf>,

    /// Specify output directory path via flag (overrides positional OUTPUT_DIRECTORY_PATH).
    #[arg(short, long, value_name = "PATH")]
    output: Option<PathBuf>,

    /// Force overwrite of existing files.
    #[arg(short, long, default_value_t = false)]
    force: bool,
}

fn main() -> anyhow::Result<()> {
    let args = CliArgs::parse();

    let bundle_path = match (args.bundle_file_path, args.input) {
        (Some(p), None) => p,
        (None, Some(i)) => i,
        _ => unreachable!("Clap should ensure one input source is exclusively provided and valid."),
    };

    let final_output_path = if let Some(output_flag_path) = args.output {
        output_flag_path
    } else {
        args.output_directory_path
    };

    let parsed_data = parser::parse_bundle(&bundle_path)?;

    if parsed_data.is_empty() {
        println!(
            "Bundle file '{}' is empty or contains no valid entries. Nothing to sprout.",
            bundle_path.display()
        );
        return Ok(());
    }

    if !args.force {
        bundler::check_for_collisions(&parsed_data, &final_output_path)?;
    }

    bundler::create_files_from_bundle(&parsed_data, &final_output_path, args.force)?;

    println!(
        "Successfully sprouted {} file(s) from '{}' to '{}'.{}",
        parsed_data.len(),
        bundle_path.display(),
        final_output_path.display(),
        if args.force {
            " (files overwritten if necessary)"
        } else {
            ""
        }
    );
    Ok(())
}



================================================
File: src/parser.rs
================================================
// src/parser.rs
// Module for parsing the bundle file

use anyhow::{Context, Result, anyhow};
use std::collections::HashSet;
use std::fmt;
use std::fs;
use std::path::{Path, PathBuf};

const FILE_HEADER_SEPARATOR: &str = "================================================";
const FILE_PATH_PREFIX: &str = "File: ";

/// Represents a single parsed file entry from the bundle.
#[derive(Debug, PartialEq, Eq, Clone)]
pub struct ParsedEntry {
    pub path: PathBuf,
    pub content: String,
}

/// Specific errors that can occur during bundle parsing and validation.
#[derive(Debug, PartialEq, Eq, Clone)]
pub enum BundleValidationError {
    ContentBeforeFirstHeader {
        line_number: usize,
        content_excerpt: String,
    },
    MalformedHeaderMissingFilePrefix {
        line_number: usize,
        header_line: String,
    },
    MalformedHeaderMissingSeparatorAfterPath {
        line_number: usize,
        path_line: String,
    },
    MalformedHeaderPathLineInterruptedBySeparator {
        line_number: usize,
        path_line: String,
    },
    MalformedHeaderPathLineMissingNewline {
        line_number: usize,
        path_line: String,
    },
    MalformedHeaderMissingNewlineAfterContentSeparator {
        line_number: usize,
        separator_line: String,
    },
    EmptyPath {
        line_number: usize,
    },
    AbsolutePathNotAllowed {
        line_number: usize,
        path: String,
    },
    DuplicatePath {
        line_number: usize,
        path: String,
    },
    PrematureEOFBeforePathLine {
        line_number: usize,
    },
    PrematureEOFBeforeContentSeparator {
        line_number: usize,
        path: String,
    },
    PrematureEOFBeforeContentSeparatorNewline {
        line_number: usize,
        path: String,
    },
    UnexpectedContentAfterLastEntry {
        line_number: usize,
        content_excerpt: String,
    },
}

impl fmt::Display for BundleValidationError {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        match self {
            BundleValidationError::ContentBeforeFirstHeader {
                line_number,
                content_excerpt,
            } => write!(
                f,
                "L{}: Content found before the first file header. Starts with: \"{}\"",
                line_number, content_excerpt
            ),
            BundleValidationError::MalformedHeaderMissingFilePrefix {
                line_number,
                header_line,
            } => write!(
                f,
                "L{}: Malformed file header. Expected '{}' after separator line, found: \"{}\"",
                line_number, FILE_PATH_PREFIX, header_line
            ),
            BundleValidationError::MalformedHeaderMissingSeparatorAfterPath {
                line_number,
                path_line,
            } => write!(
                f,
                "L{}: Malformed file header. Expected separator line after path line, found: \"{}\"",
                line_number, path_line
            ),
            BundleValidationError::MalformedHeaderPathLineInterruptedBySeparator {
                line_number,
                path_line,
            } => write!(
                f,
                "L{}: Malformed file header. File path line is interrupted by a separator: \"{}\"",
                line_number, path_line
            ),
            BundleValidationError::MalformedHeaderPathLineMissingNewline {
                line_number,
                path_line,
            } => write!(
                f,
                "L{}: Malformed file header. File path line does not end with a newline: \"{}\"",
                line_number, path_line
            ),
            BundleValidationError::MalformedHeaderMissingNewlineAfterContentSeparator {
                line_number,
                separator_line,
            } => write!(
                f,
                "L{}: Malformed file header. Expected newline after content separator line: \"{}\"",
                line_number, separator_line
            ),
            BundleValidationError::EmptyPath { line_number } => {
                write!(f, "L{}: File path is empty.", line_number)
            }
            BundleValidationError::AbsolutePathNotAllowed { line_number, path } => write!(
                f,
                "L{}: Absolute path not allowed: \"{}\"",
                line_number, path
            ),
            BundleValidationError::DuplicatePath { line_number, path } => {
                write!(f, "L{}: Duplicate path found: \"{}\"", line_number, path)
            }
            BundleValidationError::PrematureEOFBeforePathLine { line_number } => write!(
                f,
                "L{}: Premature EOF. Expected 'File: <path>' line after separator.",
                line_number
            ),
            BundleValidationError::PrematureEOFBeforeContentSeparator { line_number, path } => {
                write!(
                    f,
                    "L{}: Premature EOF for file \"{}\". Expected second separator line after path.",
                    path, line_number
                )
            }
            BundleValidationError::PrematureEOFBeforeContentSeparatorNewline {
                line_number,
                path,
            } => write!(
                f,
                "L{}: Premature EOF for file \"{}\". Expected newline after content separator.",
                path, line_number
            ),
            BundleValidationError::UnexpectedContentAfterLastEntry {
                line_number,
                content_excerpt,
            } => write!(
                f,
                "L{}: Unexpected content found after the last valid file entry. Starts with: \"{}\"",
                line_number, content_excerpt
            ),
        }
    }
}

/// Container for multiple validation errors.
#[derive(Debug)]
pub struct BundleParseError {
    pub errors: Vec<BundleValidationError>,
}

impl fmt::Display for BundleParseError {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        writeln!(
            f,
            "Bundle parsing failed with {} error(s):",
            self.errors.len()
        )?;
        for error in &self.errors {
            writeln!(f, "- {}", error)?;
        }
        Ok(())
    }
}

impl std::error::Error for BundleParseError {}

/// Parses a bundle file, extracting file paths and their content, and validating the format.
///
/// Collects all format errors found in the bundle.
pub fn parse_bundle(bundle_path: &Path) -> Result<Vec<ParsedEntry>> {
    let bundle_content = fs::read_to_string(bundle_path)
        .with_context(|| format!("Failed to read bundle file: {:?}", bundle_path))?;

    if bundle_content.trim().is_empty() {
        return Ok(Vec::new());
    }

    let mut entries = Vec::new();
    let mut validation_errors = Vec::new();
    let mut paths_seen = HashSet::new();

    let lines: Vec<&str> = bundle_content.lines().collect();

    let mut first_header_line_idx: Option<usize> = None;
    for (idx, line_content) in lines.iter().enumerate() {
        if line_content.trim_start().starts_with(FILE_HEADER_SEPARATOR)
            && idx + 1 < lines.len()
            && lines[idx + 1].trim_start().starts_with(FILE_PATH_PREFIX)
        {
            first_header_line_idx = Some(idx);
            break;
        }
    }

    let mut start_processing_from_line_idx = 0;
    let mut skipped_pre_header_line_numbers: Vec<usize> = Vec::new();

    if let Some(fh_idx) = first_header_line_idx {
        for (line_idx, line_content) in lines.iter().enumerate().take(fh_idx) {
            if !line_content.trim().is_empty() {
                skipped_pre_header_line_numbers.push(line_idx + 1);
            }
        }

        if !skipped_pre_header_line_numbers.is_empty() {
            let min_line = *skipped_pre_header_line_numbers.iter().min().unwrap();
            let max_line = *skipped_pre_header_line_numbers.iter().max().unwrap();
            if min_line == max_line {
                eprintln!(
                    "Warning: Line {} excluded due to content before the first file header.",
                    min_line
                );
            } else {
                eprintln!(
                    "Warning: Lines {}-{} excluded due to content before the first file header.",
                    min_line, max_line
                );
            }
        }
        start_processing_from_line_idx = fh_idx;
    } else if !bundle_content.trim().is_empty() {
        let first_actual_content_line_str = lines
            .iter()
            .find(|line| !line.trim().is_empty())
            .map_or("", |line| line.trim());

        validation_errors.push(BundleValidationError::ContentBeforeFirstHeader {
            line_number: 1,
            content_excerpt: first_actual_content_line_str.chars().take(50).collect(),
        });
    }

    let mut current_bundle_offset = 0;
    for line_content_str in lines.iter().take(start_processing_from_line_idx) {
        current_bundle_offset += line_content_str.len() + 1;
    }

    while current_bundle_offset < bundle_content.len() {
        let remaining_content = &bundle_content[current_bundle_offset..];
        let search_start_line = bundle_content[..current_bundle_offset].lines().count();

        match remaining_content.find(FILE_HEADER_SEPARATOR) {
            Some(header_relative_start) => {
                let header_absolute_start = current_bundle_offset + header_relative_start;
                let header_line_number =
                    bundle_content[..header_absolute_start].lines().count() + 1;

                let skipped_content = &bundle_content[current_bundle_offset..header_absolute_start];
                if !skipped_content.trim().is_empty() {
                    validation_errors.push(
                        BundleValidationError::UnexpectedContentAfterLastEntry {
                            line_number: search_start_line,
                            content_excerpt: skipped_content
                                .trim()
                                .lines()
                                .next()
                                .unwrap_or("")
                                .chars()
                                .take(50)
                                .collect(),
                        },
                    );
                }

                let current_separator_line_num = header_line_number;

                let after_first_sep_start = header_absolute_start + FILE_HEADER_SEPARATOR.len();
                if after_first_sep_start >= bundle_content.len() {
                    validation_errors.push(BundleValidationError::PrematureEOFBeforePathLine {
                        line_number: current_separator_line_num,
                    });
                    current_bundle_offset = bundle_content.len();
                    continue;
                }
                if bundle_content.as_bytes()[after_first_sep_start] != b'\n' {
                    validation_errors.push(
                        BundleValidationError::MalformedHeaderMissingFilePrefix {
                            line_number: current_separator_line_num + 1,
                            header_line: bundle_content[after_first_sep_start..]
                                .lines()
                                .next()
                                .unwrap_or("")
                                .trim_end()
                                .to_string(),
                        },
                    );
                    current_bundle_offset = bundle_content.len();
                    continue;
                }
                let path_line_num = current_separator_line_num + 1;

                let path_line_start = after_first_sep_start + 1;
                if path_line_start >= bundle_content.len() {
                    validation_errors.push(BundleValidationError::PrematureEOFBeforePathLine {
                        line_number: path_line_num,
                    });
                    current_bundle_offset = bundle_content.len();
                    continue;
                }
                if !bundle_content[path_line_start..].starts_with(FILE_PATH_PREFIX) {
                    validation_errors.push(
                        BundleValidationError::MalformedHeaderMissingFilePrefix {
                            line_number: path_line_num,
                            header_line: bundle_content[path_line_start..]
                                .lines()
                                .next()
                                .unwrap_or("")
                                .to_string(),
                        },
                    );
                    current_bundle_offset = bundle_content.len();
                    continue;
                }

                let path_actual_start = path_line_start + FILE_PATH_PREFIX.len();
                let path_line_terminator_search_slice = &bundle_content[path_actual_start..];
                let newline_pos_in_slice = path_line_terminator_search_slice.find('\n');

                let path_str_end_offset = match newline_pos_in_slice {
                    Some(nl_idx) => {
                        if path_line_terminator_search_slice[..nl_idx]
                            .contains(FILE_HEADER_SEPARATOR)
                        {
                            validation_errors.push(BundleValidationError::MalformedHeaderPathLineInterruptedBySeparator {
                                line_number: path_line_num,
                                path_line: bundle_content[path_actual_start .. path_actual_start + nl_idx].trim_end().to_string(),
                            });
                            current_bundle_offset = bundle_content.len();
                            continue;
                        }
                        path_actual_start + nl_idx
                    }
                    None => {
                        validation_errors.push(
                            BundleValidationError::MalformedHeaderPathLineMissingNewline {
                                line_number: path_line_num,
                                path_line: path_line_terminator_search_slice
                                    .lines()
                                    .next()
                                    .unwrap_or("")
                                    .trim_end()
                                    .to_string(),
                            },
                        );
                        current_bundle_offset = bundle_content.len();
                        continue;
                    }
                };

                let file_path_str = bundle_content[path_actual_start..path_str_end_offset].trim();
                if file_path_str.is_empty() {
                    validation_errors.push(BundleValidationError::EmptyPath {
                        line_number: path_line_num,
                    });
                }

                let path = PathBuf::from(file_path_str);
                // This variable will track if the current entry is valid for actual use,
                // considering emptiness, path type, and duplication.
                let mut is_valid_for_adding_to_entries = !file_path_str.is_empty();

                if !file_path_str.is_empty() {
                    let first_component = path.components().next();
                    let is_problematic_path_type = path.is_absolute()
                        || matches!(
                            first_component,
                            Some(std::path::Component::RootDir)
                                | Some(std::path::Component::Prefix(_))
                        );

                    if is_problematic_path_type {
                        validation_errors.push(BundleValidationError::AbsolutePathNotAllowed {
                            line_number: path_line_num,
                            path: file_path_str.to_string(),
                        });
                        is_valid_for_adding_to_entries = false;
                    }

                    // For duplicate check: only consider if not already invalidated by path type.
                    // `paths_seen` should only store valid, relative paths.
                    if is_valid_for_adding_to_entries && !paths_seen.insert(path.clone()) {
                        validation_errors.push(BundleValidationError::DuplicatePath {
                            line_number: path_line_num,
                            path: file_path_str.to_string(),
                        });
                        is_valid_for_adding_to_entries = false; // Mark as invalid if duplicate
                    }
                }
                // If file_path_str was empty, is_valid_for_adding_to_entries is already false,
                // and an EmptyPath error was added earlier.

                let second_sep_line_num = path_line_num + 1;

                let second_sep_start = path_str_end_offset + 1;
                if second_sep_start >= bundle_content.len() {
                    validation_errors.push(
                        BundleValidationError::PrematureEOFBeforeContentSeparator {
                            line_number: second_sep_line_num,
                            path: file_path_str.to_string(),
                        },
                    );
                    current_bundle_offset = bundle_content.len();
                    continue;
                }
                if !bundle_content[second_sep_start..].starts_with(FILE_HEADER_SEPARATOR) {
                    validation_errors.push(
                        BundleValidationError::MalformedHeaderMissingSeparatorAfterPath {
                            line_number: second_sep_line_num,
                            path_line: file_path_str.to_string(),
                        },
                    );
                    current_bundle_offset = bundle_content.len();
                    continue;
                }

                let after_second_sep_start = second_sep_start + FILE_HEADER_SEPARATOR.len();
                if after_second_sep_start >= bundle_content.len() {
                    validation_errors.push(
                        BundleValidationError::PrematureEOFBeforeContentSeparatorNewline {
                            line_number: second_sep_line_num,
                            path: file_path_str.to_string(),
                        },
                    );
                    current_bundle_offset = bundle_content.len();
                    continue;
                }
                if bundle_content.as_bytes()[after_second_sep_start] != b'\n' {
                    validation_errors.push(
                        BundleValidationError::MalformedHeaderMissingNewlineAfterContentSeparator {
                            line_number: second_sep_line_num,
                            separator_line: bundle_content[second_sep_start
                                ..std::cmp::min(
                                    bundle_content.len(),
                                    second_sep_start + FILE_HEADER_SEPARATOR.len(),
                                )]
                                .trim_end()
                                .to_string(),
                        },
                    );
                    current_bundle_offset = bundle_content.len();
                    continue;
                }

                let content_actual_start = after_second_sep_start + 1;

                let next_entry_header_search_start = content_actual_start;
                let content_end_offset = bundle_content[next_entry_header_search_start..]
                    .find(FILE_HEADER_SEPARATOR)
                    .map(|pos| next_entry_header_search_start + pos)
                    .unwrap_or_else(|| bundle_content.len());

                let content = bundle_content[content_actual_start..content_end_offset].to_string();

                if is_valid_for_adding_to_entries {
                    entries.push(ParsedEntry { path, content });
                }

                current_bundle_offset = content_end_offset;
            }
            None => {
                let final_remaining_content = &bundle_content[current_bundle_offset..];
                if !final_remaining_content.trim().is_empty() && !entries.is_empty() {
                    validation_errors.push(
                        BundleValidationError::UnexpectedContentAfterLastEntry {
                            line_number: bundle_content[..current_bundle_offset].lines().count()
                                + 1,
                            content_excerpt: final_remaining_content
                                .trim()
                                .lines()
                                .next()
                                .unwrap_or("")
                                .chars()
                                .take(50)
                                .collect(),
                        },
                    );
                }
                current_bundle_offset = bundle_content.len();
            }
        }
    }

    if !validation_errors.is_empty() {
        return Err(anyhow!(BundleParseError {
            errors: validation_errors
        }));
    }

    Ok(entries)
}

#[cfg(test)]
mod tests {
    use super::*;
    use std::io::Write;
    use tempfile::NamedTempFile;

    fn create_temp_bundle_file(content: &str) -> NamedTempFile {
        let mut temp_file = NamedTempFile::new().expect("Failed to create temp file");
        write!(temp_file, "{}", content).expect("Failed to write to temp file");
        temp_file
    }

    fn assert_specific_error(
        result: &Result<Vec<ParsedEntry>, anyhow::Error>,
        expected_error: BundleValidationError,
    ) {
        match result {
            Err(err) => {
                if let Some(bundle_parse_error) = err.downcast_ref::<BundleParseError>() {
                    assert!(
                        bundle_parse_error.errors.contains(&expected_error),
                        "Expected error {:?} not found in {:?}",
                        expected_error,
                        bundle_parse_error.errors
                    );
                } else {
                    panic!("Error is not a BundleParseError: {:?}", err);
                }
            }
            Ok(_) => panic!("Expected error, but got Ok"),
        }
    }

    #[test]
    fn test_parse_empty_bundle_file() {
        let temp_file = create_temp_bundle_file("");
        let entries = parse_bundle(temp_file.path()).unwrap();
        assert!(entries.is_empty());
    }

    #[test]
    fn test_parse_bundle_file_with_only_whitespace() {
        let temp_file = create_temp_bundle_file("   \n\t  \n");
        let entries = parse_bundle(temp_file.path()).unwrap();
        assert!(entries.is_empty());
    }

    #[test]
    fn test_error_content_before_first_header() {
        let bundle_content = format!(
            "Some introductory text.\n\
            {}\n\
            {}path/to/file1.txt\n\
            {}\n\
            Content of file1.",
            FILE_HEADER_SEPARATOR, FILE_PATH_PREFIX, FILE_HEADER_SEPARATOR
        );
        let temp_file = create_temp_bundle_file(&bundle_content);
        let result = parse_bundle(temp_file.path());
        assert!(result.is_ok(), "Expected Ok, got {:?}", result);
        let entries = result.unwrap();
        assert_eq!(entries.len(), 1);
        assert_eq!(entries[0].path, PathBuf::from("path/to/file1.txt"));
        assert_eq!(entries[0].content, "Content of file1.");
    }

    #[test]
    fn test_error_content_before_first_header_no_valid_header_at_all() {
        let temp_file =
            create_temp_bundle_file("This is just some text, no valid file entries at all.");
        let result = parse_bundle(temp_file.path());
        assert_specific_error(
            &result,
            BundleValidationError::ContentBeforeFirstHeader {
                line_number: 1,
                content_excerpt: "This is just some text, no valid file entries at a".to_string(),
            },
        );
    }

    #[test]
    fn test_parse_single_entry() {
        let bundle_content = format!(
            "{}\n\
            {}file.txt\n\
            {}\n\
            Hello, world!",
            FILE_HEADER_SEPARATOR, FILE_PATH_PREFIX, FILE_HEADER_SEPARATOR
        );
        let temp_file = create_temp_bundle_file(&bundle_content);
        let entries = parse_bundle(temp_file.path()).unwrap();
        assert_eq!(entries.len(), 1);
        assert_eq!(entries[0].path, PathBuf::from("file.txt"));
        assert_eq!(entries[0].content, "Hello, world!");
    }

    #[test]
    fn test_parse_multiple_entries() {
        let bundle_content = format!(
            "{}\n\
            {}file1.txt\n\
            {}\n\
            Content of file1.\n\
            {}\n\
            {}path/to/file2.rs\n\
            {}\n\
            // Rust code\nfn main() {{}}\n\
            {}\n\
            {}another.md\n\
            {}\n\
            ## Markdown Content",
            FILE_HEADER_SEPARATOR,
            FILE_PATH_PREFIX,
            FILE_HEADER_SEPARATOR,
            FILE_HEADER_SEPARATOR,
            FILE_PATH_PREFIX,
            FILE_HEADER_SEPARATOR,
            FILE_HEADER_SEPARATOR,
            FILE_PATH_PREFIX,
            FILE_HEADER_SEPARATOR
        );
        let temp_file = create_temp_bundle_file(&bundle_content);
        let entries = parse_bundle(temp_file.path()).unwrap();
        assert_eq!(entries.len(), 3);

        assert_eq!(entries[0].path, PathBuf::from("file1.txt"));
        assert_eq!(entries[0].content, "Content of file1.\n");

        assert_eq!(entries[1].path, PathBuf::from("path/to/file2.rs"));
        assert_eq!(entries[1].content, "// Rust code\nfn main() {}\n");

        assert_eq!(entries[2].path, PathBuf::from("another.md"));
        assert_eq!(entries[2].content, "## Markdown Content");
    }

    #[test]
    fn test_parse_entry_with_empty_content() {
        let bundle_content = format!(
            "{}\n\
            {}empty_file.txt\n\
            {}\n",
            FILE_HEADER_SEPARATOR, FILE_PATH_PREFIX, FILE_HEADER_SEPARATOR
        );
        let temp_file = create_temp_bundle_file(&bundle_content);
        let entries = parse_bundle(temp_file.path()).unwrap();
        assert_eq!(entries.len(), 1);
        assert_eq!(entries[0].path, PathBuf::from("empty_file.txt"));
        assert_eq!(entries[0].content, "");
    }

    #[test]
    fn test_error_malformed_header_missing_file_prefix() {
        let bundle_content = format!(
            "{}\n\
            Not File: path/to/file.txt\n\
            {}\n\
            Content",
            FILE_HEADER_SEPARATOR, FILE_HEADER_SEPARATOR
        );
        let temp_file = create_temp_bundle_file(&bundle_content);
        let result = parse_bundle(temp_file.path());
        assert_specific_error(
            &result,
            BundleValidationError::MalformedHeaderMissingFilePrefix {
                line_number: 2,
                header_line: "Not File: path/to/file.txt".to_string(),
            },
        );
    }

    #[test]
    fn test_error_malformed_header_missing_separator_after_path() {
        let bundle_content = format!(
            "{}\n\
            {}path/to/file.txt\n\
            Content without second separator",
            FILE_HEADER_SEPARATOR, FILE_PATH_PREFIX
        );
        let temp_file = create_temp_bundle_file(&bundle_content);
        let result = parse_bundle(temp_file.path());
        assert_specific_error(
            &result,
            BundleValidationError::MalformedHeaderMissingSeparatorAfterPath {
                line_number: 3,
                path_line: "path/to/file.txt".to_string(),
            },
        );
    }

    #[test]
    fn test_error_path_line_interrupted_by_separator() {
        let bundle_content = format!(
            "{}\n\
            {}path/to{}file.txt\n\
            {}\n\
            Content",
            FILE_HEADER_SEPARATOR, FILE_PATH_PREFIX, FILE_HEADER_SEPARATOR, FILE_HEADER_SEPARATOR
        );
        let temp_file = create_temp_bundle_file(&bundle_content);
        let result = parse_bundle(temp_file.path());
        assert_specific_error(
            &result,
            BundleValidationError::MalformedHeaderPathLineInterruptedBySeparator {
                line_number: 2,
                path_line: format!("path/to{}file.txt", FILE_HEADER_SEPARATOR),
            },
        );
    }

    #[test]
    fn test_error_path_line_missing_newline() {
        let bundle_content = format!(
            "{}\n\
            {}path/to/file.txt",
            FILE_HEADER_SEPARATOR, FILE_PATH_PREFIX
        );
        let temp_file = create_temp_bundle_file(&bundle_content);
        let result = parse_bundle(temp_file.path());
        assert_specific_error(
            &result,
            BundleValidationError::MalformedHeaderPathLineMissingNewline {
                line_number: 2,
                path_line: "path/to/file.txt".to_string(),
            },
        );
    }

    #[test]
    fn test_error_missing_newline_after_content_separator() {
        let bundle_content = format!(
            "{}\n\
            {}file.txt\n\
            {}{}",
            FILE_HEADER_SEPARATOR, FILE_PATH_PREFIX, FILE_HEADER_SEPARATOR, "NoNewlineContent"
        );
        let temp_file = create_temp_bundle_file(&bundle_content);
        let result = parse_bundle(temp_file.path());
        assert_specific_error(
            &result,
            BundleValidationError::MalformedHeaderMissingNewlineAfterContentSeparator {
                line_number: 3,
                separator_line: FILE_HEADER_SEPARATOR.to_string(),
            },
        );
    }

    #[test]
    fn test_error_empty_path() {
        let bundle_content = format!(
            "{}\n\
            {}\n\
            {}\n\
            Content",
            FILE_HEADER_SEPARATOR, FILE_PATH_PREFIX, FILE_HEADER_SEPARATOR
        );
        let temp_file = create_temp_bundle_file(&bundle_content);
        let result = parse_bundle(temp_file.path());
        assert_specific_error(&result, BundleValidationError::EmptyPath { line_number: 2 });
    }

    #[test]
    fn test_error_absolute_path() {
        let absolute_path_str = "/an/absolute/path.txt";
        let bundle_content = format!(
            "{}\n\
            {}{}\n\
            {}\n\
            Content",
            FILE_HEADER_SEPARATOR, FILE_PATH_PREFIX, absolute_path_str, FILE_HEADER_SEPARATOR
        );
        let temp_file = create_temp_bundle_file(&bundle_content);
        let result = parse_bundle(temp_file.path());
        assert_specific_error(
            &result,
            BundleValidationError::AbsolutePathNotAllowed {
                line_number: 2,
                path: absolute_path_str.to_string(),
            },
        );
    }

    #[test]
    fn test_error_duplicate_path() {
        let bundle_content = format!(
            "{}\n\
            {}file.txt\n\
            {}\n\
            Content1\n\
            {}\n\
            {}file.txt\n\
            {}\n\
            Content2",
            FILE_HEADER_SEPARATOR,
            FILE_PATH_PREFIX,
            FILE_HEADER_SEPARATOR,
            FILE_HEADER_SEPARATOR,
            FILE_PATH_PREFIX,
            FILE_HEADER_SEPARATOR
        );
        let temp_file = create_temp_bundle_file(&bundle_content);
        let result = parse_bundle(temp_file.path());
        assert_specific_error(
            &result,
            BundleValidationError::DuplicatePath {
                line_number: 6,
                path: "file.txt".to_string(),
            },
        );
    }

    #[test]
    fn test_error_premature_eof_after_first_separator() {
        let bundle_content = FILE_HEADER_SEPARATOR;
        let temp_file = create_temp_bundle_file(bundle_content);
        let result = parse_bundle(temp_file.path());
        assert_specific_error(
            &result,
            BundleValidationError::PrematureEOFBeforePathLine { line_number: 1 },
        );
    }

    #[test]
    fn test_error_premature_eof_after_file_prefix() {
        let bundle_content = format!("{}\n{}", FILE_HEADER_SEPARATOR, FILE_PATH_PREFIX);
        let temp_file = create_temp_bundle_file(&bundle_content);
        let result = parse_bundle(temp_file.path());
        assert_specific_error(
            &result,
            BundleValidationError::MalformedHeaderPathLineMissingNewline {
                line_number: 2,
                path_line: "".to_string(),
            },
        );
    }

    #[test]
    fn test_error_premature_eof_after_path_line() {
        let bundle_content = format!("{}\n{}path.txt", FILE_HEADER_SEPARATOR, FILE_PATH_PREFIX);
        let temp_file = create_temp_bundle_file(&bundle_content);
        let result = parse_bundle(temp_file.path());
        assert_specific_error(
            &result,
            BundleValidationError::MalformedHeaderPathLineMissingNewline {
                line_number: 2,
                path_line: "path.txt".to_string(),
            },
        );
    }

    #[test]
    fn test_error_unexpected_content_after_last_entry() {
        let bundle_content = format!(
            "{}\n\
            {}file.txt\n\
            {}\n\
            Content\n\
            Some trailing garbage text.",
            FILE_HEADER_SEPARATOR, FILE_PATH_PREFIX, FILE_HEADER_SEPARATOR
        );
        let temp_file = create_temp_bundle_file(&bundle_content);
        let result = parse_bundle(temp_file.path());
        assert!(result.is_ok(), "Expected Ok, got {:?}", result);
        let entries = result.unwrap();
        assert_eq!(entries.len(), 1);
        assert_eq!(entries[0].path, PathBuf::from("file.txt"));
        assert_eq!(entries[0].content, "Content\nSome trailing garbage text.");
    }

    #[test]
    fn test_multiple_errors_reported() {
        let bundle_content = format!(
            "Leading garbage.\n\
            {}\n\
            {}/abs/path.txt\n\
            {}\n\
            Content1\n\
            {}\n\
            {}\n\
            {}\n\
            Content2\n\
            Trailing garbage.",
            FILE_HEADER_SEPARATOR,
            FILE_PATH_PREFIX,
            FILE_HEADER_SEPARATOR,
            FILE_HEADER_SEPARATOR,
            FILE_PATH_PREFIX,
            FILE_HEADER_SEPARATOR
        );
        let temp_file = create_temp_bundle_file(&bundle_content);
        let result = parse_bundle(temp_file.path());

        assert!(result.is_err());
        if let Err(err) = result {
            if let Some(bundle_parse_error) = err.downcast_ref::<BundleParseError>() {
                assert_eq!(
                    bundle_parse_error.errors.len(),
                    2,
                    "Expected 2 errors, got {}. Errors: {:?}",
                    bundle_parse_error.errors.len(),
                    bundle_parse_error.errors
                );

                assert!(
                    !bundle_parse_error.errors.contains(
                        &BundleValidationError::ContentBeforeFirstHeader {
                            line_number: 1,
                            content_excerpt: "Leading garbage.".to_string()
                        }
                    ),
                    "ContentBeforeFirstHeader should now be a warning, not an error."
                );

                assert!(bundle_parse_error.errors.contains(
                    &BundleValidationError::AbsolutePathNotAllowed {
                        line_number: 3,
                        path: "/abs/path.txt".to_string()
                    }
                ));
                assert!(
                    bundle_parse_error
                        .errors
                        .contains(&BundleValidationError::EmptyPath { line_number: 7 })
                );
            } else {
                panic!("Error is not a BundleParseError: {:?}", err);
            }
        } else {
            panic!("Expected an error, but got Ok. Result: {:?}", result);
        }
    }
}



================================================
File: tests/integration_tests.rs
================================================
use assert_cmd::prelude::*;
use predicates::prelude::*;
use std::fs;
use std::io::Write;
use std::process::Command;
use tempfile::NamedTempFile;
use tempfile::TempDir;

fn create_temp_bundle_file(content: &str) -> NamedTempFile {
    let mut file = NamedTempFile::new().expect("Failed to create temp bundle file");
    write!(file, "{}", content).expect("Failed to write to temp bundle file");
    file
}

#[test]
fn test_valid_bundle_simple_structure() -> Result<(), Box<dyn std::error::Error>> {
    let bundle_content = "================================================\nFile: file1.txt\n================================================\nHello from file1\n================================================\nFile: file2.txt\n================================================\nContent of file2\n";
    let bundle_file = create_temp_bundle_file(bundle_content);
    let output_dir = TempDir::new()?;

    let mut cmd = Command::cargo_bin("sprout")?;
    cmd.arg(bundle_file.path()).arg(output_dir.path());

    cmd.assert()
        .success()
        .stdout(predicate::str::contains(format!(
            "Successfully sprouted 2 file(s) from '{}' to '{}'.",
            bundle_file.path().display(),
            output_dir.path().display()
        )));

    let file1_path = output_dir.path().join("file1.txt");
    let file2_path = output_dir.path().join("file2.txt");

    assert!(file1_path.exists());
    assert_eq!(fs::read_to_string(file1_path)?, "Hello from file1\n");

    assert!(file2_path.exists());
    assert_eq!(fs::read_to_string(file2_path)?, "Content of file2\n");

    Ok(())
}

#[test]
fn test_valid_bundle_nested_structure() -> Result<(), Box<dyn std::error::Error>> {
    let bundle_content = "================================================\nFile: dir1/file1.txt\n================================================\nNested content\n================================================\nFile: dir1/dir2/file2.txt\n================================================\nDeeply nested\n";
    let bundle_file = create_temp_bundle_file(bundle_content);
    let output_dir = TempDir::new()?;

    let mut cmd = Command::cargo_bin("sprout")?;
    cmd.arg(bundle_file.path()).arg(output_dir.path());

    cmd.assert()
        .success()
        .stdout(predicate::str::contains(format!(
            "Successfully sprouted 2 file(s) from '{}' to '{}'.",
            bundle_file.path().display(),
            output_dir.path().display()
        )));

    let file1_path = output_dir.path().join("dir1/file1.txt");
    let file2_path = output_dir.path().join("dir1/dir2/file2.txt");

    assert!(file1_path.exists());
    assert_eq!(fs::read_to_string(file1_path)?, "Nested content\n");

    assert!(file2_path.exists());
    assert_eq!(fs::read_to_string(file2_path)?, "Deeply nested\n");

    Ok(())
}

#[test]
fn test_malformed_bundle_file() -> Result<(), Box<dyn std::error::Error>> {
    let bundle_content = "================================================\nFile: file1.txt\nThis is not a valid header\nContent\n";
    let bundle_file = create_temp_bundle_file(bundle_content);
    let output_dir = TempDir::new()?;

    let mut cmd = Command::cargo_bin("sprout")?;
    cmd.arg(bundle_file.path()).arg(output_dir.path());

    cmd.assert().failure().stderr(
        predicate::str::contains("Bundle parsing failed")
            .and(predicate::str::contains("Malformed file header")),
    );

    assert!(fs::read_dir(output_dir.path())?.next().is_none());

    Ok(())
}

#[test]
fn test_output_file_collision() -> Result<(), Box<dyn std::error::Error>> {
    let bundle_content = "================================================\nFile: existing_file.txt\n================================================\nSome content\n";
    let bundle_file = create_temp_bundle_file(bundle_content);
    let output_dir = TempDir::new()?;

    let conflicting_file_path = output_dir.path().join("existing_file.txt");
    fs::write(&conflicting_file_path, "Original content")?;

    let mut cmd = Command::cargo_bin("sprout")?;
    cmd.arg(bundle_file.path()).arg(output_dir.path());

    cmd.assert().failure().stderr(
        predicate::str::contains("Output path collision detected").and(predicate::str::contains(
            conflicting_file_path.to_str().unwrap(),
        )),
    );

    assert_eq!(
        fs::read_to_string(conflicting_file_path)?,
        "Original content"
    );

    Ok(())
}

#[test]
fn test_empty_bundle_file() -> Result<(), Box<dyn std::error::Error>> {
    let bundle_file = create_temp_bundle_file("");
    let output_dir = TempDir::new()?;

    let mut cmd = Command::cargo_bin("sprout")?;
    cmd.arg(bundle_file.path()).arg(output_dir.path());

    cmd.assert()
        .success()
        .stdout(predicate::str::contains(format!(
            "Bundle file '{}' is empty or contains no valid entries. Nothing to sprout.",
            bundle_file.path().display()
        )));

    assert!(fs::read_dir(output_dir.path())?.next().is_none());
    Ok(())
}

#[test]
fn test_output_to_current_directory_default() -> Result<(), Box<dyn std::error::Error>> {
    let bundle_content = "================================================\nFile: default_dir_file.txt\n================================================\nDefault dir test\n";
    let bundle_file = create_temp_bundle_file(bundle_content);

    let current_dir_scope = TempDir::new()?;

    let mut cmd = Command::cargo_bin("sprout")?;
    cmd.current_dir(current_dir_scope.path())
        .arg(bundle_file.path());

    cmd.assert()
        .success()
        .stdout(predicate::str::contains(format!(
            "Successfully sprouted 1 file(s) from '{}' to '{}'.",
            bundle_file.path().display(),
            "."
        )));

    let file_path = current_dir_scope.path().join("default_dir_file.txt");
    assert!(file_path.exists());
    assert_eq!(fs::read_to_string(file_path)?, "Default dir test\n");

    Ok(())
}

#[test]
fn test_output_to_specified_directory_via_positional_arg() -> Result<(), Box<dyn std::error::Error>>
{
    let bundle_content = "================================================\nFile: specified_pos_file.txt\n================================================\nSpecified dir test - positional\n";
    let bundle_file = create_temp_bundle_file(bundle_content);
    let output_dir = TempDir::new()?;

    let mut cmd = Command::cargo_bin("sprout")?;
    cmd.arg(bundle_file.path()).arg(output_dir.path());

    cmd.assert()
        .success()
        .stdout(predicate::str::contains(format!(
            "Successfully sprouted 1 file(s) from '{}' to '{}'.",
            bundle_file.path().display(),
            output_dir.path().display()
        )));

    let file_path = output_dir.path().join("specified_pos_file.txt");
    assert!(file_path.exists());
    assert_eq!(
        fs::read_to_string(file_path)?,
        "Specified dir test - positional\n"
    );

    Ok(())
}

#[test]
fn test_output_to_specified_directory_via_o_flag() -> Result<(), Box<dyn std::error::Error>> {
    let bundle_content = "================================================\nFile: specified_flag_file.txt\n================================================\nSpecified dir test - flag\n";
    let bundle_file = create_temp_bundle_file(bundle_content);
    let output_dir = TempDir::new()?;

    let mut cmd = Command::cargo_bin("sprout")?;
    cmd.arg(bundle_file.path()).arg("-o").arg(output_dir.path());

    cmd.assert()
        .success()
        .stdout(predicate::str::contains(format!(
            "Successfully sprouted 1 file(s) from '{}' to '{}'.",
            bundle_file.path().display(),
            output_dir.path().display()
        )));

    let file_path = output_dir.path().join("specified_flag_file.txt");
    assert!(file_path.exists());
    assert_eq!(
        fs::read_to_string(file_path)?,
        "Specified dir test - flag\n"
    );

    Ok(())
}

#[test]
fn test_input_via_i_flag() -> Result<(), Box<dyn std::error::Error>> {
    let bundle_content = "================================================\nFile: input_flag_test.txt\n================================================\nInput via -i flag\n";
    let bundle_file = create_temp_bundle_file(bundle_content);
    let output_dir = TempDir::new()?;

    let mut cmd = Command::cargo_bin("sprout")?;
    cmd.arg("-i")
        .arg(bundle_file.path())
        .arg("-o")
        .arg(output_dir.path());

    cmd.assert()
        .success()
        .stdout(predicate::str::contains(format!(
            "Successfully sprouted 1 file(s) from '{}' to '{}'.",
            bundle_file.path().display(),
            output_dir.path().display()
        )));

    let file_path = output_dir.path().join("input_flag_test.txt");
    assert!(file_path.exists());
    assert_eq!(fs::read_to_string(file_path)?, "Input via -i flag\n");

    Ok(())
}

#[test]
fn test_missing_input_bundle() -> Result<(), Box<dyn std::error::Error>> {
    let mut cmd = Command::cargo_bin("sprout")?;
    cmd.assert().failure().stderr(
        predicate::str::contains("error: the following required arguments were not provided:")
            .and(predicate::str::contains("<BUNDLE_FILE_PATH>")),
    );
    Ok(())
}

#[test]
fn test_bundle_with_empty_file_content() -> Result<(), Box<dyn std::error::Error>> {
    let bundle_content = "================================================\nFile: empty_file.txt\n================================================\n";
    let bundle_file = create_temp_bundle_file(bundle_content);
    let output_dir = TempDir::new()?;

    let mut cmd = Command::cargo_bin("sprout")?;
    cmd.arg(bundle_file.path()).arg(output_dir.path());

    cmd.assert()
        .success()
        .stdout(predicate::str::contains(format!(
            "Successfully sprouted 1 file(s) from '{}' to '{}'.",
            bundle_file.path().display(),
            output_dir.path().display()
        )));

    let file_path = output_dir.path().join("empty_file.txt");
    assert!(file_path.exists());
    assert_eq!(fs::read_to_string(file_path)?, "");

    Ok(())
}

#[test]
fn test_force_overwrite_existing_file() -> Result<(), Box<dyn std::error::Error>> {
    let bundle_content = "================================================\nFile: overwrite_me.txt\n================================================\nNew Content\n";
    let bundle_file = create_temp_bundle_file(bundle_content);
    let output_dir = TempDir::new()?;
    let target_file_path = output_dir.path().join("overwrite_me.txt");

    // Create the file initially
    fs::write(&target_file_path, "Old Content")?;
    assert_eq!(fs::read_to_string(&target_file_path)?, "Old Content");

    let mut cmd = Command::cargo_bin("sprout")?;
    cmd.arg(bundle_file.path())
        .arg(output_dir.path())
        .arg("--force");

    cmd.assert()
        .success()
        .stdout(predicate::str::contains(format!(
            "Successfully sprouted 1 file(s) from '{}' to '{}'. (files overwritten if necessary)",
            bundle_file.path().display(),
            output_dir.path().display()
        )));

    assert!(target_file_path.exists());
    assert_eq!(fs::read_to_string(target_file_path)?, "New Content\n");

    Ok(())
}

#[test]
fn test_force_overwrite_existing_file_short_flag() -> Result<(), Box<dyn std::error::Error>> {
    let bundle_content = "================================================\nFile: overwrite_me_short.txt\n================================================\nNew Content Short\n";
    let bundle_file = create_temp_bundle_file(bundle_content);
    let output_dir = TempDir::new()?;
    let target_file_path = output_dir.path().join("overwrite_me_short.txt");

    // Create the file initially
    fs::write(&target_file_path, "Old Content Short")?;
    assert_eq!(fs::read_to_string(&target_file_path)?, "Old Content Short");

    let mut cmd = Command::cargo_bin("sprout")?;
    cmd.arg(bundle_file.path()).arg(output_dir.path()).arg("-f"); // Short flag for force

    cmd.assert()
        .success()
        .stdout(predicate::str::contains(format!(
            "Successfully sprouted 1 file(s) from '{}' to '{}'. (files overwritten if necessary)",
            bundle_file.path().display(),
            output_dir.path().display()
        )));

    assert!(target_file_path.exists());
    assert_eq!(fs::read_to_string(target_file_path)?, "New Content Short\n");

    Ok(())
}

#[test]
fn test_force_still_fails_if_parent_is_file() -> Result<(), Box<dyn std::error::Error>> {
    let bundle_content = "================================================\nFile: existing_file_as_parent/new_child.txt\n================================================\nShould not be created\n";
    let bundle_file = create_temp_bundle_file(bundle_content);
    let output_dir = TempDir::new()?;

    // Create a file that would be a parent directory
    let conflicting_parent_path = output_dir.path().join("existing_file_as_parent");
    fs::write(&conflicting_parent_path, "I am a file.")?;

    let mut cmd = Command::cargo_bin("sprout")?;
    cmd.arg(bundle_file.path())
        .arg(output_dir.path())
        .arg("--force");

    cmd.assert().failure().stderr(
        predicate::str::contains("Failed to create parent directory")
            .or(
                // Error from create_dir_all
                predicate::str::contains("its parent")
                    .and(predicate::str::contains("is an existing file")), // Error from bundler.rs explicit check
            )
            .or(
                predicate::str::contains("Failed to write file"), // Error from fs::write if parent is a file
            ),
    );

    // Ensure original file is untouched and no new file/directory was created under/as it
    assert_eq!(
        fs::read_to_string(&conflicting_parent_path)?,
        "I am a file."
    );
    assert!(
        !output_dir
            .path()
            .join("existing_file_as_parent/new_child.txt")
            .exists()
    );
    assert!(conflicting_parent_path.is_file());

    Ok(())
}




================================================
File: .github/CODEOWNERS
================================================
# This is a CODEOWNERS file.
#
# Lines starting with '#' are comments.
# Each line is a file pattern followed by one or more owners.
# These patterns follow the same rules as .gitignore.
#
# Owners can be:
# - A GitHub username (e.g., @octocat)
# - A GitHub team name (e.g., @my-org/my-team)
# - An email address (e.g., user@example.com)
#
# Order matters: the last matching pattern takes the most precedence.
#
# Example:
# *       @global-owner1 @global-owner2  # All files are owned by these users/teams
# *.js    @js-owner                      # .js files are owned by @js-owner
# /docs/  docs@example.com               # Files in the /docs/ directory are owned by docs@example.com

# All files in the repository are owned by nightconcept
* @nightconcept dark@nightconcept.net

# You can add more specific rules below if needed.
# For example, if different parts of the project have different owners:
#
# /cmd/      @nightconcept
# /internal/ @nightconcept
# /scripts/  dark@nightconcept.net



================================================
File: .github/copilot-instructions.md
================================================
# AI Project Guidelines (Condensed)

**Objective:** Define mandatory process, coding, testing, and interaction standards for AI assistance.

## 1. Preparation

* **Project Context (Session Start):** ALWAYS review key project docs: `docs/PRD.md` (architecture, goals, tech stack, versions, structure, style guide), `docs/digest.txt` (current state summary), `docs/TASKS.md` (assignments).
* **Task Prep (Before Work):**
    * ALWAYS consult `docs/TASKS.md` for your assignment. If missing, add it (concise description, `YYYY-MM-DD`).
    * ALWAYS review relevant existing code *before* suggesting changes.

## 2. Implementation Planning

**Present this plan before providing code for a task:**

* Problem description (brief).
* Solution overview (high-level).
* Implementation steps (list).
* Risks/Challenges (foreseen).

## 3. Development Workflow

* **Plan First:** Present plan (Sec 2) before coding.
* **Focus:** Target the specific task from `TASKS.md`. No unrelated refactoring unless tasked.
* **Modification Approach:**
    * Prioritize minimal, incremental, clean, elegant, idiomatic changes.
    * Explain significant suggestions (Sec 5.4).
    * Propose beneficial low-risk refactoring.
    * Avoid duplication; use helpers/modules.
    * Explain use of language strengths/pitfalls if relevant.
* **Dependencies:** No new/updated external dependencies without explicit maintainer approval (check `docs/PRD.md` for approved stack/versions). Use only approved dependencies.
* **Commits (User Task):** Follow Conventional Commits (`https://www.conventionalcommits.org/en/v1.0.0/`).
* **Manual Testing:** Provide clear user instructions for manually testing the task's changes.

## 4. Folder Structure

* **Strict Adherence:** Follow structure defined in `docs/PRD.md`.
* **Changes:** No adding/removing/relocating files/dirs without prior maintainer approval. Approved structure changes require updating `docs/PRD.md` *before* implementation.
* **Source Location:** All source code must be in `src/`.
* **Precedence:** This rule is foundational.

## 5. Coding Standards

### 5.1. General & Robustness

* Follow language best practices unless overridden by `docs/PRD.md` or these guidelines.
* Prioritize: Clarity, maintainability, efficiency.
* Consider performance & basic security.
* Implement robust error handling (language norms or `PRD.md` spec); handle errors gracefully.

### 5.2. Modularity & Structure

* Keep files focused (ideally < 500 lines); refactor large ones.
* Prefer small, single-purpose functions.
* Structure code logically (per `docs/PRD.md`) into modules.
* Use clear, consistent imports (relative for local packages). Verify paths.

### 5.3. Style & Formatting

* **Priority:** 1) `docs/PRD.md`, 2) These rules, 3) Language common practices.
* **Type Hinting:** Mandatory for functions/classes/modules (dynamic languages).
* **Indentation:** 2 spaces.
* **Function Calls:** No space: `func()` not `func ()`.
* **Line Structure:** Avoid collapsing statements if clarity suffers.
* **Scope:** Default local. More descriptive names for wider scope. Avoid single-letter vars (except iterators/tiny scope; `i` only for loops). Use `_` for ignored vars.
* **Casing:** Match current file style; else language common style. `UPPER_CASE` for constants only.
* **Booleans:** Prefer `is_` prefix for boolean functions.
* **File Headers:** Top comment: Title (descriptive, not filename) + brief purpose. No version/OS info.

### 5.4. Documentation & Comments

* **Docstrings:** Required for public functions, classes, modules (standard format).
* **Code Comments:** Explain non-obvious logic, complex algorithms, decisions (*why*, not *what*).
* **Reasoning Comments:** Use `# Reason:` for complex block rationale.
* **README Updates:** Update `docs/README.md` for core features, dependency changes, or setup/build modifications.

## 6. Testing

* **Goal:** Tests are living documentation specifying behavior. Use common language framework.
* **Behavior Specification:** Tests specify behavior. Type/scope/timing (e.g., E2E, Unit, Integration) defined in `docs/PRD.md` per project phase.
* **Location:** Place tests in `/src/test` (Lua: `/src/spec`), mirroring `src/` structure (Sec 4).
    * Ex: Tests for `src/engine/mod.js` -> `src/test/engine/mod_test.js`.
    * Ex: Lua spec for `src/engine/mod.lua` -> `src/spec/engine/mod_spec.lua`.
* **Content:** Tests clearly describe expected behavior per `PRD.md` goals for the current phase.
    * **Prototype Phase:** Primary focus on automated E2E tests validating core functionality.
* **Strategy & Coverage:** Defined in `PRD.md`, evolves with phases.
    * **Prototype Phase:** E2E priority. Comprehensive unit tests & code coverage metrics (e.g., 100% statement coverage) are **not** the focus *unless* specified in `docs/PRD.md` for a later phase demanding them.
* **Updating Tests:** Review/update tests with code changes to reflect *current* expected behavior. Fix failing/outdated tests promptly.

## 7. AI Interaction Protocols

### 7.1. Engineering Role & Audience

* **Role:** Act as a **Senior Software Engineer**.
* **Audience:** Target **Mid-Level Software Engineers** (code = best practices, clear, documented; explanations thorough; justify complex choices).

### 7.2. Interaction Guidelines

* Ask clarifying questions if needed; do not assume.
* Verify facts (libs, APIs, file paths); do not invent. Use MCP servers if available.
* Do not delete/overwrite code unless instructed or part of the defined task.
* Report significant blockers/errors *during* implementation promptly with context and suggestions.
* If a task seems complex, state potential benefit from a more advanced model **boldly** at the start (e.g., "**Suggestion: This complex refactoring might benefit from a more advanced model.**").
* Be friendly, helpful, collaborative.
* Explicitly state when task requirements are met. Mark task complete in `docs/TASKS.md`.



================================================
File: .github/dependabot.yml
================================================
version: 2
updates:
  - package-ecosystem: github-actions
    directory: /
    schedule:
      interval: daily

  - package-ecosystem: cargo
    directory: /
    schedule:
      interval: daily



================================================
File: .github/workflows/ci.yml
================================================
name: Rust CI

permissions:
  contents: read
  security-events: read
  actions: read

on:
  push:
    branches: [main]
    tags: [ 'v*' ]
  pull_request:
    branches: [main]

jobs:
  build_and_test:
    name: Test on Rust ${{ matrix.rust-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust-version: [stable] # You can add more versions like 'beta', 'nightly', or specific versions '1.70.0'

    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0
        with:
          egress-policy: audit # Configure as needed, 'audit' is a good start

      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          fetch-depth: 2

      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@4305c38b25d97ef35a8ad1f985ccf2d2242004f2
        with:
          toolchain: ${{ matrix.rust-version }}
          components: clippy, rustfmt

      - name: Cache Cargo dependencies
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/            # Cache the target directory to speed up subsequent builds
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install additional Rust tools
        run: |
          cargo install cargo-audit --force
          cargo install cargo-tarpaulin --version 0.32.7 --force

      - name: Run security audit
        run: cargo audit

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Lint code
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Run tests
        run: cargo test --all-features --verbose

      - name: Generate code coverage (Tarpaulin)
        run: |
          cargo tarpaulin --verbose --all-features --workspace --engine Llvm --out Xml --output-dir target/tarpaulin
          # Tarpaulin by default creates cobertura.xml in the output directory

      - name: Upload coverage to Coveralls
        uses: coverallsapp/github-action@648a8eb78e6d50909eff900e4ec85cab4524a45b # v2.3.6
        if: matrix.rust-version == 'stable'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          file: target/tarpaulin/cobertura.xml



================================================
File: .github/workflows/codeql.yml
================================================
# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: "CodeQL"

on:
  push:
    branches: ["main"]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: ["main"]
  schedule:
    - cron: "0 0 * * 1"

permissions:
  contents: read

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: ["python"]
        # CodeQL supports [ $supported-codeql-languages ]
        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support

    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          egress-policy: audit

      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      # Initializes the CodeQL tools for scanning.
      - name: Initialize CodeQL
        uses: github/codeql-action/init@ff0a06e83cb2de871e5a09832bc6a81e7276941f # v3.28.18
        with:
          languages: ${{ matrix.language }}
          # If you wish to specify custom queries, you can do so here or in a config file.
          # By default, queries listed here will override any specified in a config file.
          # Prefix the list here with "+" to use these queries and those in the config file.

      # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
      # If this step fails, then you should remove it and run the build manually (see below)
      - name: Autobuild
        uses: github/codeql-action/autobuild@ff0a06e83cb2de871e5a09832bc6a81e7276941f # v3.28.18

      # ℹ️ Command-line programs to run using the OS shell.
      # 📚 See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun

      #   If the Autobuild fails above, remove it and uncomment the following three lines.
      #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.

      # - run: |
      #   echo "Run, Build Application using script"
      #   ./location_of_script_within_repo/buildscript.sh

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@ff0a06e83cb2de871e5a09832bc6a81e7276941f # v3.28.18
        with:
          category: "/language:${{matrix.language}}"



================================================
File: .github/workflows/dependency-review.yml
================================================
# Dependency Review Action
#
# This Action will scan dependency manifest files that change as part of a Pull Request,
# surfacing known-vulnerable versions of the packages declared or updated in the PR.
# Once installed, if the workflow run is marked as required,
# PRs introducing known-vulnerable packages will be blocked from merging.
#
# Source repository: https://github.com/actions/dependency-review-action
name: 'Dependency Review'
on: [pull_request]

permissions:
  contents: read

jobs:
  dependency-review:
    runs-on: ubuntu-latest
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          egress-policy: audit

      - name: 'Checkout Repository'
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: 'Dependency Review'
        uses: actions/dependency-review-action@da24556b548a50705dd671f47852072ea4c105d9 # v4.7.1



================================================
File: .github/workflows/release.yml
================================================
name: Release Please

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

jobs:
  release-please:
    runs-on: ubuntu-latest
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          egress-policy: audit

      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Release Please
        id: release
        uses: googleapis/release-please-action@a02a34c4d625f9be7cb89156071d8567266a2445
        with:
          release-type: rust
          # package-name: sprout # This input is deprecated for release-type: rust
          # Optional: Define a custom token if needed, though default GITHUB_TOKEN often works.
          token: ${{ secrets.GITHUB_TOKEN }}
          # Optional: If you want release-please to create a PR instead of releasing directly
          # command: release-pr
          # Optional: If you want to include a manifest file (e.g. for cargo-dist)
          # manifest-file: .manifest.json

  # This job runs after a release has been created by release-please
  # (either directly or after a release PR is merged).
  # It builds the binaries and uploads them as release assets.
  build-and-upload-assets:
    needs: release-please
    if: ${{ needs.release-please.outputs.release_created == 'true' }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            asset_name_suffix: linux-x86_64
            binary_name: sprout
          - os: macos-latest
            target: x86_64-apple-darwin
            asset_name_suffix: macos-x86_64
            binary_name: sprout
          - os: macos-latest
            target: aarch64-apple-darwin
            asset_name_suffix: macos-aarch64
            binary_name: sprout
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            asset_name_suffix: windows-x86_64
            binary_name: sprout.exe
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          egress-policy: audit

      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          # Checkout the specific tag created by release-please
          ref: ${{ needs.release-please.outputs.tag_name }}

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@4305c38b25d97ef35a8ad1f985ccf2d2242004f2 # stable
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}
        env:
          CARGO_TERM_COLOR: always

      - name: Prepare asset name
        id: asset_details
        run: |
          VERSION_TAG="${{ needs.release-please.outputs.tag_name }}"
          # Remove 'v' prefix if present (e.g., v0.1.0 -> 0.1.0)
          VERSION="${VERSION_TAG#v}"
          ASSET_NAME="sprout-v${VERSION}-${{ matrix.asset_name_suffix }}"
          echo "ASSET_NAME=${ASSET_NAME}" >> $GITHUB_OUTPUT
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT


      - name: Upload Release Asset (Linux/macOS)
        if: runner.os != 'Windows'
        uses: actions/upload-release-asset@e8f9f06c4b078e705bd2ea027f0926603fc9b4d5 # v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release-please.outputs.upload_url }}
          asset_path: ./target/${{ matrix.target }}/release/${{ matrix.binary_name }}
          asset_name: ${{ steps.asset_details.outputs.ASSET_NAME }}
          asset_content_type: application/octet-stream

      - name: Upload Release Asset (Windows)
        if: runner.os == 'Windows'
        uses: actions/upload-release-asset@e8f9f06c4b078e705bd2ea027f0926603fc9b4d5 # v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release-please.outputs.upload_url }}
          asset_path: ./target/${{ matrix.target }}/release/${{ matrix.binary_name }}
          asset_name: ${{ steps.asset_details.outputs.ASSET_NAME }}.exe # Ensure .exe for Windows asset name if binary_name doesn't include it
          asset_content_type: application/octet-stream


================================================
File: .github/workflows/scorecards.yml
================================================
# This workflow uses actions that are not certified by GitHub. They are provided
# by a third-party and are governed by separate terms of service, privacy
# policy, and support documentation.

name: Scorecard supply-chain security
on:
  # For Branch-Protection check. Only the default branch is supported. See
  # https://github.com/ossf/scorecard/blob/main/docs/checks.md#branch-protection
  branch_protection_rule:
  # To guarantee Maintained check is occasionally updated. See
  # https://github.com/ossf/scorecard/blob/main/docs/checks.md#maintained
  schedule:
    - cron: '20 7 * * 2'
  push:
    branches: ["main"]

# Declare default permissions as read only.

jobs:
  analysis:
    name: Scorecard analysis
    runs-on: ubuntu-latest
    permissions:
      # Needed to upload the results to code-scanning dashboard.
      security-events: write
      # Needed to publish results and get a badge (see publish_results below).
      id-token: write
      contents: read
      actions: read
      # To allow GraphQL ListCommits to work
      issues: read
      pull-requests: read
      # To detect SAST tools
      checks: read

    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          egress-policy: audit

      - name: "Checkout code"
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - name: "Run analysis"
        uses: ossf/scorecard-action@f49aabe0b5af0936a0987cfb85d86b75731b0186 # v2.4.1
        with:
          results_file: results.sarif
          results_format: sarif
          # (Optional) "write" PAT token. Uncomment the `repo_token` line below if:
          # - you want to enable the Branch-Protection check on a *public* repository, or
          # - you are installing Scorecards on a *private* repository
          # To create the PAT, follow the steps in https://github.com/ossf/scorecard-action#authentication-with-pat.
          # repo_token: ${{ secrets.SCORECARD_TOKEN }}

          # Public repositories:
          #   - Publish results to OpenSSF REST API for easy access by consumers
          #   - Allows the repository to include the Scorecard badge.
          #   - See https://github.com/ossf/scorecard-action#publishing-results.
          # For private repositories:
          #   - `publish_results` will always be set to `false`, regardless
          #     of the value entered here.
          publish_results: true

      # Upload the results as artifacts (optional). Commenting out will disable uploads of run results in SARIF
      # format to the repository Actions tab.
      - name: "Upload artifact"
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: SARIF file
          path: results.sarif
          retention-days: 5

      # Upload the results to GitHub's code scanning dashboard.
      - name: "Upload to code-scanning"
        uses: github/codeql-action/upload-sarif@ff0a06e83cb2de871e5a09832bc6a81e7276941f # v3.28.18
        with:
          sarif_file: results.sarif



